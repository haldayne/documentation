<?xml version="1.0" encoding="utf-8"?>
<project title="API Documentation" version="2.8.5">
  <partials/>
  <file path="customs/src/UploadException.php" generated-path="customs.src.UploadException.html" hash="8e792e362b7e7230be6f8e65edcdcf66" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Customs" line="4" package="Default">
      <extends>\RuntimeException</extends>
      <name>UploadException</name>
      <full_name>\Haldayne\Customs\UploadException</full_name>
      <docblock line="4">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="4" description="Default"/>
      </docblock>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="4" code="PPC:ERR-50005">No summary for class \Haldayne\Customs\UploadException</error>
    </parse_markers>
    <source>eJw9yTEKgDAMAMA9r8g/FBxEcBbcuoQ2YKFNA0mhIv7dzVtvXvRSEKpsSpFxp5LoFg5rN2/VJoBYyAxPLY3SNiKr5ybIw1mSYTi6eK78Dzzwwgd5kx/k</source>
  </file>
  <file path="boost/src/Arrayable.php" generated-path="boost.src.Arrayable.html" hash="e64f162d7869faba45837c236c8466cc" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>eJyzsS/IKODKS8xNLS5ITE5V8EjMSUmszEuNcUksSQwuKSpNLiktSrXm4srMK0ktSgMq4QIA4kcScg==</source>
  </file>
  <file path="boost/src/Contract/Arrayable.php" generated-path="boost.src.Contract.Arrayable.html" hash="7f7c51100037144d3e52566dd96cb54e" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <interface namespace="Haldayne\Boost\Contract" line="4" package="Default">
      <name>Arrayable</name>
      <full_name>\Haldayne\Boost\Contract\Arrayable</full_name>
      <docblock line="4">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="4" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost\Contract" line="9" package="Default">
        <name>toArray</name>
        <full_name>\Haldayne\Boost\Contract\Arrayable::toArray()</full_name>
        <docblock line="9">
          <description>Return a native PHP array representation of the object.</description>
          <long-description></long-description>
        </docblock>
      </method>
    </interface>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="4" code="PPC:ERR-50009">No summary for interface ""</error>
    </parse_markers>
    <source>eJwtjbEOgkAQRPv9ii2VQj4AE6M2lISaZjmXgMHdy95iQoz/Llyc5hXzJnO+xDGC0ItTpMBY0/ygVbi7qSbv7ipuFLwCmMTZht25mtFK/czwAdxSFkUmFtiyLyZIKOTTm7GpG6RdR+NonFh8K1RQB/SRUfsnBz/952VmXPp5CjgsErLqmg8Pxwq+8AMxFDjF</source>
  </file>
  <file path="boost/src/Contract/Jsonable.php" generated-path="boost.src.Contract.Jsonable.html" hash="9d44ae119de918bed5ae503ebcfaa745" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <interface namespace="Haldayne\Boost\Contract" line="4" package="Default">
      <name>Jsonable</name>
      <full_name>\Haldayne\Boost\Contract\Jsonable</full_name>
      <docblock line="4">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="4" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost\Contract" line="9" package="Default">
        <name>toJson</name>
        <full_name>\Haldayne\Boost\Contract\Jsonable::toJson()</full_name>
        <docblock line="9">
          <description>Return a JSON representation of the object.</description>
          <long-description></long-description>
        </docblock>
      </method>
    </interface>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="4" code="PPC:ERR-50009">No summary for interface ""</error>
    </parse_markers>
    <source>eJwtjTEOwjAMRXefwiNkoAcoEhIsqAOVYO3iBEcNKnaUuANC3B1a8Ze3vKe/P+Qxg9CTa6bAeKbpTi/h4ahabTipWKFgLUAS4xIXp6sq5CeGN+BvjXMr0eGVbS6ChN2tv2DhXLiyGFlSQY1oI6P6Bwfb/ZNmZZ79lALGWcKqmi4fm20LH/gC88czZw==</source>
  </file>
  <file path="customs/src/UploadFile.php" generated-path="customs.src.UploadFile.html" hash="b36e7c5ea10781f35b3bdfbf8e4d19fd" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>eJyFVE1v00AQvftXzCGHNgrNPaVAlQaoRKBqwwGpUjV2JvHCenfZj4CB/ndmd+vEDS3xxdJ45s2bN2/88rWpTaGwIWewIniPcomtottpcF437rQoguuF56Ihjo2HwwKGcE3GkiPlHSCshCTwNXqo0UFJpMCFqiLnVkHKFoKRGpe0POHKcVFJdA4+p9jbWEk/Pamlg/PSeYuVz59mygvfFr8L4Cd1jc8QppbQE3dV9AN0+ZUqD7ZjI9Savwz73Yfb9onnyQNOB/fGoMUGuHOsHdS+kR9ZE1jUPPti/gE2aAWWTDNKBZW23MlotYzpXvPYwj0C7hAVN//TwaoOUluxFgpl1iyGR8CarcWGRStbhuMeUvAo+3gdVCqMUJ4aoy3aFhzZDdkMadDXT/Iap7cJpRQVrIKqvNAK7u4qrRg6VP5oO/woEx7lZsepMO8hQaBlepPJk6XHp9u8QaTw4lUa/QwGeaq48Bj5Jy2RP0tLvb0xMuZdqpU+yhRy+n2xb4Z35JNkWzV7AsIaNwSBVdB2J8cIxApQtfs+uNCgdHQS+5V12eZn1AjBRRzlFZTBw1I4I7EdsdsrjHfS6tBBVagiFCvjfD4L4dk4yqNQDhyumGGN0elk3f/XsyY/faTb0f42LPlgVV/sQ1rtfJPmq7XMXo4T51M5gS86QBPpN3pDOzE6qJJYkKy1pe+BODFdMPvuG5FJHx6g9s/NEfVufzKJDRb6kAg3yeGx4oAAkeUhAeaX8xlvE2X7K15Ncgf153uWRvwHnj8UPkckOjjm3W4TH9EZw9X1p8VsuphdwPnVZY4aqz3/x/gXNdhtsBfMU90XfwF5mcMH</source>
  </file>
  <file path="customs/tests/UploadIteratorTest.php" generated-path="customs.tests.UploadIteratorTest.html" hash="98d01fe1d56ec7c6c655c747c269ef99" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="Faker">\Faker</namespace-alias>
    <namespace-alias name="vfs">\org\bovigo\vfs</namespace-alias>
    <class final="false" abstract="false" namespace="Haldayne\Customs" line="7" package="Default">
      <extends>\PHPUnit_Framework_TestCase</extends>
      <name>UploadIteratorTest</name>
      <full_name>\Haldayne\Customs\UploadIteratorTest</full_name>
      <docblock line="7">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="7" description="Default"/>
      </docblock>
      <property static="true" visibility="public" namespace="Haldayne\Customs" line="54" package="Default">
        <name>$faker</name>
        <full_name>\Haldayne\Customs\UploadIteratorTest::faker</full_name>
        <default></default>
        <docblock line="54">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="public" namespace="Haldayne\Customs" line="55" package="Default">
        <name>$vfs</name>
        <full_name>\Haldayne\Customs\UploadIteratorTest::vfs</full_name>
        <default></default>
        <docblock line="55">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="9" package="Default">
        <name>test_construction</name>
        <full_name>\Haldayne\Customs\UploadIteratorTest::test_construction()</full_name>
        <docblock line="9">
          <description></description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="17" package="Default">
        <name>test_no_upload</name>
        <full_name>\Haldayne\Customs\UploadIteratorTest::test_no_upload()</full_name>
        <docblock line="17">
          <description></description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="23" package="Default">
        <name>test_single_upload</name>
        <full_name>\Haldayne\Customs\UploadIteratorTest::test_single_upload()</full_name>
        <docblock line="23">
          <description></description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="37" package="Default">
        <name>test_multiple_upload</name>
        <full_name>\Haldayne\Customs\UploadIteratorTest::test_multiple_upload()</full_name>
        <docblock line="37">
          <description></description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Haldayne\Customs" line="57" package="Default">
        <name>setupBeforeClass</name>
        <full_name>\Haldayne\Customs\UploadIteratorTest::setupBeforeClass()</full_name>
        <docblock line="57">
          <description></description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Haldayne\Customs" line="74" package="Default">
        <name>provides_single_upload_info</name>
        <full_name>\Haldayne\Customs\UploadIteratorTest::provides_single_upload_info()</full_name>
        <docblock line="74">
          <description>Emulates a populated upload from an HTML form like:
&lt;input type='file' name='foo' /&gt;
&lt;input type='file' name='bar' /&gt;
&lt;input type='file' name='baz' /&gt;</description>
          <long-description></long-description>
          <tag name="param" line="74" description="&lt;p&gt;The number of file inputs to include, defaults to 1&lt;/p&gt;" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="param" line="74" description="" type="array" variable="$defaults">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$defaults</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Haldayne\Customs" line="95" package="Default">
        <name>provides_multiple_upload_info</name>
        <full_name>\Haldayne\Customs\UploadIteratorTest::provides_multiple_upload_info()</full_name>
        <docblock line="95">
          <description>Emulates a populated upload from an HTML form like:
&lt;input type='file' name='foo[bar]' /&gt;
&lt;input type='file' name='foo[baz]' /&gt;
&lt;input type='file' name='foo[2]' /&gt;
&lt;input type='file' name='bar[0]' /&gt;
&lt;input type='file' name='bar[x]' /&gt;</description>
          <long-description></long-description>
          <tag name="param" line="95" description="&lt;p&gt;The number of outer file inputs to include, defaults to 1&lt;/p&gt;" type="integer" variable="$m">
            <type>integer</type>
          </tag>
          <tag name="param" line="95" description="&lt;p&gt;The number of inner file inputs to include, defaults to 1&lt;/p&gt;" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="param" line="95" description="" type="array" variable="$defaults">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$m</name>
          <default>1</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$defaults</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Haldayne\Customs" line="117" package="Default">
        <name>provides_info</name>
        <full_name>\Haldayne\Customs\UploadIteratorTest::provides_info()</full_name>
        <docblock line="117">
          <description>Provides data you'd find in a $_FILES entry: name, type, etc.</description>
          <long-description></long-description>
          <tag name="param" line="117" description="&lt;p&gt;Override otherwise random values&lt;/p&gt;" type="array" variable="$defaults">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$defaults</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Haldayne\Customs" line="145" package="Default">
        <name>provides_file</name>
        <full_name>\Haldayne\Customs\UploadIteratorTest::provides_file()</full_name>
        <docblock line="145">
          <description>Provides a SplFileInfo corresponding to a random file.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Haldayne\Customs" line="167" package="Default">
        <name>provides_name</name>
        <full_name>\Haldayne\Customs\UploadIteratorTest::provides_name()</full_name>
        <docblock line="167">
          <description>Return a random, unique HTML name. Technically, this could be any
character from the ISO-10646 standard and PHP is meant to handle these.</description>
          <long-description>However, PHP mangles two characters: '.' and ' '.  We omit these
characters from this generation so that we can test them specifically.
PHP also interprets [] specially, so we omit those here as we test
them specifically elsewhere.</long-description>
          <tag name="see" line="167" description="" link="http://stackoverflow.com/q/3424860/2908724"/>
          <tag name="see" line="167" description="" link="https://bugs.php.net/bug.php?id=34882"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mangle</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Haldayne\Customs" line="175" package="Default">
        <name>provides_mangled_name</name>
        <full_name>\Haldayne\Customs\UploadIteratorTest::provides_mangled_name()</full_name>
        <docblock line="175">
          <description>Always returns some kind of unique mangled name.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Customs" line="183" package="Default">
        <name>mangle_names</name>
        <full_name>\Haldayne\Customs\UploadIteratorTest::mangle_names()</full_name>
        <docblock line="183">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$info</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="7" code="PPC:ERR-50005">No summary for class \Haldayne\Customs\UploadIteratorTest</error>
      <error line="9" code="PPC:ERR-50008">No summary for method test_construction()</error>
      <error line="17" code="PPC:ERR-50008">No summary for method test_no_upload()</error>
      <error line="23" code="PPC:ERR-50008">No summary for method test_single_upload()</error>
      <error line="37" code="PPC:ERR-50008">No summary for method test_multiple_upload()</error>
      <error line="57" code="PPC:ERR-50008">No summary for method setupBeforeClass()</error>
      <error line="167" code="PPC:ERR-50015">Argument $mangle is missing from the Docblock of provides_name</error>
      <error line="183" code="PPC:ERR-50015">Argument $info is missing from the Docblock of mangle_names</error>
      <error line="183" code="PPC:ERR-50008">No summary for method mangle_names()</error>
      <error line="54" code="PPC:ERR-50007">No summary for property $faker</error>
      <error line="55" code="PPC:ERR-50007">No summary for property $vfs</error>
    </parse_markers>
    <source>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</source>
  </file>
  <file path="customs/src/AbstractUploadEntity.php" generated-path="customs.src.AbstractUploadEntity.html" hash="bda036dfba0f14cc6a94cab0eb41358d" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="true" namespace="Haldayne\Customs" line="7" package="Default">
      <extends/>
      <name>AbstractUploadEntity</name>
      <full_name>\Haldayne\Customs\AbstractUploadEntity</full_name>
      <docblock line="7">
        <description>Common methods shared amongst uploaded files.</description>
        <long-description></long-description>
        <tag name="package" line="7" description="Default"/>
      </docblock>
      <property static="false" visibility="protected" namespace="Haldayne\Customs" line="37" package="Default">
        <name>$htmlName</name>
        <full_name>\Haldayne\Customs\AbstractUploadEntity::htmlName</full_name>
        <default></default>
        <docblock line="37">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="9" package="Default">
        <name>__construct</name>
        <full_name>\Haldayne\Customs\AbstractUploadEntity::__construct()</full_name>
        <docblock line="9">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$htmlName</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="30" package="Default">
        <name>getHtmlName</name>
        <full_name>\Haldayne\Customs\AbstractUploadEntity::getHtmlName()</full_name>
        <docblock line="30">
          <description>Get the HTML variable name for this upload.</description>
          <long-description>This name approximates the originally given name, like:
  &lt;input type='file' name='file[a]' /&gt;

But in some cases the exact name cannot be returned.  First, because
PHP mangles HTML names containing '.' or ' ', these will map:
  * foo.bar returned as "foo_bar"
  * foo bar returned as "foo_bar"
  * foo_bar returned as "foo_bar"
  * foo[bar.baz] returned as "foo[bar.baz]"

Second, if the auto-append syntax was given:
  * foo[] returned as "foo[0]", etc.</long-description>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="9" code="PPC:ERR-50015">Argument $htmlName is missing from the Docblock of __construct</error>
      <error line="9" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="37" code="PPC:ERR-50007">No summary for property $htmlName</error>
    </parse_markers>
    <source>eJyNUstu2zAQvOsrBkYApYZj99w8itR16wJ9GK17cg1jTdESUYoUxFVip8i/d0U/kKo5hBeJy9mdnd25elsVVeKo1KEipTElm9HO6V/jJrAvw2WSjPr9BH2MfVl6h1Jz4bOAUFCtM5DE8sBoKuspk8DGWB2GkjBKaB24JsVQlkLA7eH6M0Injg3vkj8J5FTN2hqFTeMUGyFZrZR3gm4Un58VXNqv0uCrCN0ntOeMCxMubo7PuMYJehlBj0n8xP7b08dHzeBCVM6/fMYd1YbWVqNVj42v0RY8KBkeUo6Z8/YpAqmqar81JbEOsZivTW4cWbtDbu60i7ABrPmt3xzTgSvjqkbYd5W+TtshpRG3/1/QMsXopsP5TvDGIXhhVRQOdHrbjjS2osg5z1hr1Jqb2ulsCHwwdeCBBBU1QR9rzaYzlORyWc5efVw5ZMxMxhmXIx2mIgUp0kHLEzTujbWSVD1R0Zc5+eGa6hMjKKAnwZUEex0gXgpcvRS4kJjQPyz/Q59eep0p/tAiMhvAbOL4qGF/ITvULkPYifot7qVE3FxX6OIZmtfL3gCa1dEgo2cNnGueHrx43vXtvmTXvv9adoTZ92/zyXg+eY/b2ad9VHzHWrE088Toj8lfiGwiow==</source>
  </file>
  <file path="customs/src/UploadIterator.php" generated-path="customs.src.UploadIterator.html" hash="e744c4edd83e6dd2c65bab2960825384" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Customs" line="7" package="Default">
      <extends/>
      <implements>\ArrayAccess</implements>
      <implements>\SeekableIterator</implements>
      <implements>\Countable</implements>
      <name>UploadIterator</name>
      <full_name>\Haldayne\Customs\UploadIterator</full_name>
      <docblock line="7">
        <description>Iterate over the $_FILES super-global, or an array in that same format.</description>
        <long-description></long-description>
        <tag name="package" line="7" description="Default"/>
      </docblock>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="86" package="Default">
        <name>$input</name>
        <full_name>\Haldayne\Customs\UploadIterator::input</full_name>
        <default></default>
        <docblock line="86">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="87" package="Default">
        <name>$files</name>
        <full_name>\Haldayne\Customs\UploadIterator::files</full_name>
        <default></default>
        <docblock line="87">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="88" package="Default">
        <name>$index</name>
        <full_name>\Haldayne\Customs\UploadIterator::index</full_name>
        <default></default>
        <docblock line="88">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="9" package="Default">
        <name>__construct</name>
        <full_name>\Haldayne\Customs\UploadIterator::__construct()</full_name>
        <docblock line="9">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$input</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="17" package="Default">
        <name>offsetExists</name>
        <full_name>\Haldayne\Customs\UploadIterator::offsetExists()</full_name>
        <docblock line="17">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="22" package="Default">
        <name>offsetGet</name>
        <full_name>\Haldayne\Customs\UploadIterator::offsetGet()</full_name>
        <docblock line="22">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="31" package="Default">
        <name>offsetSet</name>
        <full_name>\Haldayne\Customs\UploadIterator::offsetSet()</full_name>
        <docblock line="31">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="36" package="Default">
        <name>offsetUnset</name>
        <full_name>\Haldayne\Customs\UploadIterator::offsetUnset()</full_name>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="43" package="Default">
        <name>current</name>
        <full_name>\Haldayne\Customs\UploadIterator::current()</full_name>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="48" package="Default">
        <name>key</name>
        <full_name>\Haldayne\Customs\UploadIterator::key()</full_name>
        <docblock line="48">
          <description></description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="53" package="Default">
        <name>next</name>
        <full_name>\Haldayne\Customs\UploadIterator::next()</full_name>
        <docblock line="53">
          <description></description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="58" package="Default">
        <name>rewind</name>
        <full_name>\Haldayne\Customs\UploadIterator::rewind()</full_name>
        <docblock line="58">
          <description></description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="63" package="Default">
        <name>valid</name>
        <full_name>\Haldayne\Customs\UploadIterator::valid()</full_name>
        <docblock line="63">
          <description></description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="68" package="Default">
        <name>seek</name>
        <full_name>\Haldayne\Customs\UploadIterator::seek()</full_name>
        <docblock line="68">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$position</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="79" package="Default">
        <name>count</name>
        <full_name>\Haldayne\Customs\UploadIterator::count()</full_name>
        <docblock line="79">
          <description></description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Customs" line="95" package="Default">
        <name>import</name>
        <full_name>\Haldayne\Customs\UploadIterator::import()</full_name>
        <docblock line="95">
          <description>Import a structure purporting to be a valid $_FILES format into a flat
array of UploadFile or UploadError. Resolve all recursive structure and
reconstitues the HTML form name.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Customs" line="118" package="Default">
        <name>names</name>
        <full_name>\Haldayne\Customs\UploadIterator::names()</full_name>
        <docblock line="118">
          <description>Using the "name" key in the input as a model, figure out all the
HTML names.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Customs" line="150" package="Default">
        <name>reducer</name>
        <full_name>\Haldayne\Customs\UploadIterator::reducer()</full_name>
        <docblock line="150">
          <description>Companion to `names`, which recursively traverses the iterator,
appending new keys onto the base-so-far.</description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$it</name>
          <default></default>
          <type>\RecursiveArrayIterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$base</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="true">
          <name>$names</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Customs" line="167" package="Default">
        <name>gather</name>
        <full_name>\Haldayne\Customs\UploadIterator::gather()</full_name>
        <docblock line="167">
          <description>Given an HTML name, gather all its information into a standard
info structure.</description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Customs" line="198" package="Default">
        <name>wrap</name>
        <full_name>\Haldayne\Customs\UploadIterator::wrap()</full_name>
        <docblock line="198">
          <description>Wrap the file upload information in an appropriate object class, raising
an exception if one would be warranted by the error.</description>
          <long-description></long-description>
          <tag name="param" line="198" description="&lt;p&gt;The HTML form element name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="198" description="&lt;p&gt;The file upload information&lt;/p&gt;" type="array" variable="$info">
            <type>array</type>
          </tag>
          <tag name="return" line="198" description="" type="\Haldayne\Customs\UploadFile|\Haldayne\Customs\UploadError">
            <type>\Haldayne\Customs\UploadFile</type>
            <type>\Haldayne\Customs\UploadError</type>
          </tag>
          <tag name="throws" line="198" description="" type="\Haldayne\Customs\UploadException">
            <type>\Haldayne\Customs\UploadException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$info</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="9" code="PPC:ERR-50015">Argument $input is missing from the Docblock of __construct</error>
      <error line="9" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="17" code="PPC:ERR-50015">Argument $offset is missing from the Docblock of offsetExists</error>
      <error line="17" code="PPC:ERR-50008">No summary for method offsetExists()</error>
      <error line="22" code="PPC:ERR-50015">Argument $offset is missing from the Docblock of offsetGet</error>
      <error line="22" code="PPC:ERR-50008">No summary for method offsetGet()</error>
      <error line="31" code="PPC:ERR-50015">Argument $offset is missing from the Docblock of offsetSet</error>
      <error line="31" code="PPC:ERR-50015">Argument $value is missing from the Docblock of offsetSet</error>
      <error line="31" code="PPC:ERR-50008">No summary for method offsetSet()</error>
      <error line="36" code="PPC:ERR-50015">Argument $offset is missing from the Docblock of offsetUnset</error>
      <error line="36" code="PPC:ERR-50008">No summary for method offsetUnset()</error>
      <error line="43" code="PPC:ERR-50008">No summary for method current()</error>
      <error line="48" code="PPC:ERR-50008">No summary for method key()</error>
      <error line="53" code="PPC:ERR-50008">No summary for method next()</error>
      <error line="58" code="PPC:ERR-50008">No summary for method rewind()</error>
      <error line="63" code="PPC:ERR-50008">No summary for method valid()</error>
      <error line="68" code="PPC:ERR-50015">Argument $position is missing from the Docblock of seek</error>
      <error line="68" code="PPC:ERR-50008">No summary for method seek()</error>
      <error line="79" code="PPC:ERR-50008">No summary for method count()</error>
      <error line="150" code="PPC:ERR-50015">Argument $it is missing from the Docblock of reducer</error>
      <error line="150" code="PPC:ERR-50015">Argument $base is missing from the Docblock of reducer</error>
      <error line="150" code="PPC:ERR-50015">Argument $names is missing from the Docblock of reducer</error>
      <error line="167" code="PPC:ERR-50015">Argument $name is missing from the Docblock of gather</error>
      <error line="86" code="PPC:ERR-50007">No summary for property $input</error>
      <error line="87" code="PPC:ERR-50007">No summary for property $files</error>
      <error line="88" code="PPC:ERR-50007">No summary for property $index</error>
    </parse_markers>
    <source>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</source>
  </file>
  <file path="customs/src/UploadFailure.php" generated-path="customs.src.UploadFailure.html" hash="819bf55d301d4382f4b3e8703260b17f" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Customs" line="7" package="Default">
      <extends/>
      <name>UploadFailure</name>
      <full_name>\Haldayne\Customs\UploadFailure</full_name>
      <docblock line="7">
        <description>Represents a file that did not successfully upload.</description>
        <long-description></long-description>
        <tag name="package" line="7" description="Default"/>
      </docblock>
      <property static="true" visibility="public" namespace="Haldayne\Customs" line="12" package="Default">
        <name>$failure_codes</name>
        <full_name>\Haldayne\Customs\UploadFailure::failure_codes</full_name>
        <default>array(UPLOAD_ERR_INI_SIZE =&gt; 'The file size exceeds the server-allowed limit.', UPLOAD_ERR_FORM_SIZE =&gt; 'The file size exceeds the form-allowed upload limit.', UPLOAD_ERR_PARTIAL =&gt; 'The file was only partially uploaded.', UPLOAD_ERR_NO_FILE =&gt; 'No file was uploaded.', UPLOAD_ERR_CANT_WRITE =&gt; 'The server failed to write the file.', UPLOAD_ERR_NO_TMP_DIR =&gt; 'A server misconfiguration .', UPLOAD_ERR_EXTENSION =&gt; 'A PHP server extension cancelled the upload.')</default>
        <docblock line="12">
          <description>The possible failure codes and an English description.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="25" package="Default">
        <name>getFile</name>
        <full_name>\Haldayne\Customs\UploadFailure::getFile()</full_name>
        <docblock line="25">
          <description>Return the part of the file we got, if any.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="29" package="Default">
        <name>getFailureReason</name>
        <full_name>\Haldayne\Customs\UploadFailure::getFailureReason()</full_name>
        <docblock line="29">
          <description></description>
          <long-description></long-description>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="29" code="PPC:ERR-50008">No summary for method getFailureReason()</error>
    </parse_markers>
    <source>eJyNkmFr2zAQhr/7V9yHQbfQJT9g64ZpHWpIHeO6bLQbRpXPiUCWhE5emo3+98mS27DSbDswgvO9j+5O78fPZmsSxXokwzjCJZMt2yv8dj6Q0z19SJLFbJbADCo0FgmVI2DQCYngtsxBK1pQ2gENnCNRN0i5h8FIzdq5ly0SLhkR3ITMkgk5WEx+JeAjgMeYQb1FMJpI3HtuF6uA6xb9Zar1H2RqIwVtwae4FcYJreaTehFOM9xLwYEcc/54M0GaCDmDu1js46ZcrdOLJquqJi/y5jq/zeDsE5yMPYS5SPxEwAeO2JIf0ifQ/kD7nkmpd9iCFL1w85PT14jLdXX1P8hO2/4ZGNf1V26ZVnWerv6k7hiBVn7fhlkn2GHz2B7BFOtmma9ic4U+UP4hO0+LuvlS5fVhrLiT8FZ+AqdhZ4XDOJtPHb+/viqbi7wKoPQJ0wviWnViM1g2Pi0c0Wdf66y4ztfFJC8vyycEPjhUNGo5UxxlaMt3M3lx4n33hn7hvQrdYFWoHfcIunueAnYIG+1OQXTeg/tXDdcNioeWN+iWXvP2XfgbLf6YHC2N/qyQkVYvNI/Jb268FdM=</source>
  </file>
  <file path="boost/tests/CollectionTest.php" generated-path="boost.tests.CollectionTest.html" hash="19ca109010f0d6d3f3a1faadcb880718" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\DataStructure" line="4" package="Default">
      <extends>\PHPUnit_Framework_TestCase</extends>
      <name>CollectionTest</name>
      <full_name>\Haldayne\DataStructure\CollectionTest</full_name>
      <docblock line="4">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="4" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\DataStructure" line="7" package="Default">
        <name>test_construction_valid</name>
        <full_name>\Haldayne\DataStructure\CollectionTest::test_construction_valid()</full_name>
        <docblock line="7">
          <description></description>
          <long-description></long-description>
          <tag name="dataProvider" line="7" description="provides_valid_items"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$items</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\DataStructure" line="16" package="Default">
        <name>test_construction_invalid</name>
        <full_name>\Haldayne\DataStructure\CollectionTest::test_construction_invalid()</full_name>
        <docblock line="16">
          <description></description>
          <long-description></long-description>
          <tag name="dataProvider" line="16" description="provides_invalid_items"/>
          <tag name="expectedException" line="16" description="InvalidArgumentException"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$items</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\DataStructure" line="22" package="Default">
        <name>test_all</name>
        <full_name>\Haldayne\DataStructure\CollectionTest::test_all()</full_name>
        <docblock line="22">
          <description></description>
          <long-description></long-description>
          <tag name="dataProvider" line="22" description="provides_valid_items"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$items</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$array</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\DataStructure" line="28" package="Default">
        <name>test_contains_get_set_forget</name>
        <full_name>\Haldayne\DataStructure\CollectionTest::test_contains_get_set_forget()</full_name>
        <docblock line="28">
          <description></description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\DataStructure" line="45" package="Default">
        <name>test_isEmpty</name>
        <full_name>\Haldayne\DataStructure\CollectionTest::test_isEmpty()</full_name>
        <docblock line="45">
          <description></description>
          <long-description></long-description>
          <tag name="dataProvider" line="45" description="provides_valid_items"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$items</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$array</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\DataStructure" line="54" package="Default">
        <name>test_diff</name>
        <full_name>\Haldayne\DataStructure\CollectionTest::test_diff()</full_name>
        <docblock line="54">
          <description></description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\DataStructure" line="68" package="Default">
        <name>test_intersect</name>
        <full_name>\Haldayne\DataStructure\CollectionTest::test_intersect()</full_name>
        <docblock line="68">
          <description></description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\DataStructure" line="82" package="Default">
        <name>test_each</name>
        <full_name>\Haldayne\DataStructure\CollectionTest::test_each()</full_name>
        <docblock line="82">
          <description></description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\DataStructure" line="104" package="Default">
        <name>test_partition</name>
        <full_name>\Haldayne\DataStructure\CollectionTest::test_partition()</full_name>
        <docblock line="104">
          <description></description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\DataStructure" line="137" package="Default">
        <name>test_count</name>
        <full_name>\Haldayne\DataStructure\CollectionTest::test_count()</full_name>
        <docblock line="137">
          <description></description>
          <long-description></long-description>
          <tag name="dataProvider" line="137" description="provides_valid_items"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$items</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$array</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\DataStructure" line="145" package="Default">
        <name>test_toArray</name>
        <full_name>\Haldayne\DataStructure\CollectionTest::test_toArray()</full_name>
        <docblock line="145">
          <description></description>
          <long-description></long-description>
          <tag name="dataProvider" line="145" description="provides_valid_items"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$items</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$array</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\DataStructure" line="154" package="Default">
        <name>test_toJson</name>
        <full_name>\Haldayne\DataStructure\CollectionTest::test_toJson()</full_name>
        <docblock line="154">
          <description></description>
          <long-description></long-description>
          <tag name="dataProvider" line="154" description="provides_valid_items"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$items</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$array</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\DataStructure" line="162" package="Default">
        <name>test_array_access</name>
        <full_name>\Haldayne\DataStructure\CollectionTest::test_array_access()</full_name>
        <docblock line="162">
          <description></description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\DataStructure" line="179" package="Default">
        <name>test_iterator_aggregate</name>
        <full_name>\Haldayne\DataStructure\CollectionTest::test_iterator_aggregate()</full_name>
        <docblock line="179">
          <description></description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Haldayne\DataStructure" line="195" package="Default">
        <name>provides_valid_items</name>
        <full_name>\Haldayne\DataStructure\CollectionTest::provides_valid_items()</full_name>
        <docblock line="195">
          <description>Provides a structure to initialize a Collection, and the corresponding
native PHP array.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Haldayne\DataStructure" line="210" package="Default">
        <name>provides_invalid_items</name>
        <full_name>\Haldayne\DataStructure\CollectionTest::provides_invalid_items()</full_name>
        <docblock line="210">
          <description>Provides types that cannot be made into a Collection.</description>
          <long-description></long-description>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="4" code="PPC:ERR-50005">No summary for class \Haldayne\DataStructure\CollectionTest</error>
      <error line="7" code="PPC:ERR-50015">Argument $items is missing from the Docblock of test_construction_valid</error>
      <error line="7" code="PPC:ERR-50008">No summary for method test_construction_valid()</error>
      <error line="16" code="PPC:ERR-50015">Argument $items is missing from the Docblock of test_construction_invalid</error>
      <error line="16" code="PPC:ERR-50008">No summary for method test_construction_invalid()</error>
      <error line="22" code="PPC:ERR-50015">Argument $items is missing from the Docblock of test_all</error>
      <error line="22" code="PPC:ERR-50015">Argument $array is missing from the Docblock of test_all</error>
      <error line="22" code="PPC:ERR-50008">No summary for method test_all()</error>
      <error line="28" code="PPC:ERR-50008">No summary for method test_contains_get_set_forget()</error>
      <error line="45" code="PPC:ERR-50015">Argument $items is missing from the Docblock of test_isEmpty</error>
      <error line="45" code="PPC:ERR-50015">Argument $array is missing from the Docblock of test_isEmpty</error>
      <error line="45" code="PPC:ERR-50008">No summary for method test_isEmpty()</error>
      <error line="54" code="PPC:ERR-50008">No summary for method test_diff()</error>
      <error line="68" code="PPC:ERR-50008">No summary for method test_intersect()</error>
      <error line="82" code="PPC:ERR-50008">No summary for method test_each()</error>
      <error line="104" code="PPC:ERR-50008">No summary for method test_partition()</error>
      <error line="137" code="PPC:ERR-50015">Argument $items is missing from the Docblock of test_count</error>
      <error line="137" code="PPC:ERR-50015">Argument $array is missing from the Docblock of test_count</error>
      <error line="137" code="PPC:ERR-50008">No summary for method test_count()</error>
      <error line="145" code="PPC:ERR-50015">Argument $items is missing from the Docblock of test_toArray</error>
      <error line="145" code="PPC:ERR-50015">Argument $array is missing from the Docblock of test_toArray</error>
      <error line="145" code="PPC:ERR-50008">No summary for method test_toArray()</error>
      <error line="154" code="PPC:ERR-50015">Argument $items is missing from the Docblock of test_toJson</error>
      <error line="154" code="PPC:ERR-50015">Argument $array is missing from the Docblock of test_toJson</error>
      <error line="154" code="PPC:ERR-50008">No summary for method test_toJson()</error>
      <error line="162" code="PPC:ERR-50008">No summary for method test_array_access()</error>
      <error line="179" code="PPC:ERR-50008">No summary for method test_iterator_aggregate()</error>
    </parse_markers>
    <source>eJy9WFtX4zYQfs+vmAe6tmmyCdA8FJrdsil7oKctORv6FDg5iq0EdR3ZlWSWtIf/3pF8iS9xYkogHBLbmss3M5+kkX/6GN6HLU6WVIbEpXBJfI+sOL39hSgyViJyVSToWavl+kRKGAa+T13FAn5DpQL6qCj3JNyOLkd/cqamnwVa+haIr1M9PiSStv5tAX66h4fws4c2RyJ4YB4VEMYXcvpAfOZNmaJLCYddIx1GM5+5MI+48QUKjU3dgEsDCJ/ESvaB0XKMTuxHfzj9lgOaCp2Z8adWCicWr0XFeA5XJksfQ7RKvYtHl4YG2lUsdy4W0ZJylQ0kKk3jSdy9KKKXJpj4fmK6DUQIsoID81NGc+DCYCskI6Tumex8QNJQocbICjs21kZ1fIyunGIAdTlShHE5XVA1lfg/DwRe2k0gTcAiVhusmf5yLbirQ3cjIkSHqFJvds+pk/1MfFkS7heEBQLRwwnQ3vaUuJgO8Qxf9cCMPROrVtCujzbiknoEE/LJegGy2NmnWmeJnz76Gdb6qaa97+yd00xeLEO1ek1eZ0P604PBYABuEHGVEN5pFwR0wCkoJxtpMBU8Np83471FwtCnhvqE45++IhYMPkBuJL5PBPTUWNt8TKhiPE56OcXaKWQSMTnK26w6QbY8rqd+I3/tXGCnp79dX48vpsPr30fnX67G13+8AZpi4kp4xjdfroY3jQH1CiV4Frxd5GBcUSER19syZO32OTQp5qGS4e1lqXP5EqbsC9A+ybIVxS46UOLeN2KCIHxB9Tr9Y3n9NiYyq/YBLrgRRRRf6cqBSFKw3+nrqYyWbXgXD+sbJ+fR2EqE4PuBuT4rjmZ6ZtzcrSWetqboqNfOrG8VPMH4cgDzRaxNCW6RJ/8nJY/l+Nkc7COzKcRyxVH9ERRbbA5zvdsXs/MEFJ9tUDHkmxiLmiQxErg7q7PdK9ltmOEJmJlxBIZ+DXgXEqGYyWKZfN0uzFZgcO5q2uYiYqqTzcb4dr1OPdDFgtGOS2YzsqClti6dlGsg5XqVK+AzPMfYB18Z9zBIfRBy0Ab2+X7gYY/TsVLuOMUcJpk1ik0ZWzAwqRQrDtVM+x1pwIJUtePEJOrHZvGo5KqgVTKiFxgVnOuepdiZlIqIpGswgXrlCbS7NO2NUySlsJlDtqH8d3DswEew6APlFpyCFXieta8ixEZNEg37MRCTzOONSdeeY2Gzn+tlQ/+elIWb5trgT7rfrplUEvAoAWyJPNAHTDxsD3V3SWY+3VuXnPSrTXrkSj6LvS7YmxtoR7f5WrDc4tcEaVKz1xjTdL/RCTerbrN4f5UB33O42uRrRvsX2p9S7up1Mit/HLpx3TDyW5Onc9elUm7ZWoyDKTFir3D8Z1IfWA/cSe9ux9k/k+wXJCO+NtBMf4un/GF+clQwqO8xWDx8NzibV3T7RndYp1tMRX8XwGHspH/XsNJX2CkTFYjzxULQBVF024kmkZ2SVLhadWK6oLTM+f5nI6VJPhqWbEcLqlJYdl20V1wqwl16PbetmK6pik4Aq1O7+DvCiqNfLWQ8Gd1hEBaWhTRnnUFnAPq1K6SzXgI+6lTeWCbDEgjI9A0tqAAYx30Vl4d/KI6sA8fJzz1Q9xTcQAgqw4B7jC9Sa5wo9kBhdDmKF4n3yUBhbcH4Vb5Em5ajSn2Snbu4x06AR77fhsldeU+c4LPNz7OWvI8rTO6mKlkqubPZXl3H33ea2L8dK2+o34ZXzd/VvWTOSqZWof6+JwpcwnmgYEZhSTyK1cMS5uv2vEIU3lc3LQWyh1aDPP6h0uvgw/ebnlpIQORSpSGd4NwPKbet8D487XaXdBmIlZ6mwnI2Juyp9R+/jMFY</source>
  </file>
  <file path="boost/src/Map.php" generated-path="boost.src.Map.html" hash="45924a737ff130f87a0dd2eb70320765" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="Arrayable">\Haldayne\Boost\Contract\Arrayable</namespace-alias>
    <namespace-alias name="Jsonable">\Haldayne\Boost\Contract\Jsonable</namespace-alias>
    <class final="false" abstract="false" namespace="Haldayne\Boost" line="35" package="Default">
      <extends/>
      <implements>\Countable</implements>
      <implements>\Haldayne\Boost\Contract\Arrayable</implements>
      <implements>\Haldayne\Boost\Contract\Jsonable</implements>
      <implements>\ArrayAccess</implements>
      <implements>\IteratorAggregate</implements>
      <name>Map</name>
      <full_name>\Haldayne\Boost\Map</full_name>
      <docblock line="35">
        <description>An improvement on PHP associative arrays.</description>
        <long-description>Sports a fluent interface accepting callables to drive array operations,
similar in spirit to jQuery. Supports keys of any type: scalars, even
arrays and objects!  Used in place of `array ()` and `[]`, your code will
be easier to write *and* read.

In the API, a formal variable named `$collection` must be one of:
  - Haldayne\Boost\Map
  - Haldayne\Boost\Contract\Arrayable
  - Haldayne\Boost\Contract\Jsonable
  - \Traversable
  - object
  - array

In the API, a formal variable named `$code` must be either a callable or
a string representing actual PHP code. When giving a string, be mindful:
user-supplied string code is a security risk, and string code you write is
checked only at run-time. Also, be mindful that these strings can contain
`$v` and `$k`, which represent the value and key being passed in.

In the API, a formal variable named `$key` may be of *any* type.

As much as possible, method names were chosen to reflect synonymous usage in
the PHP engine itself. When not possible or relevant, the names may reflect
usage from Laravel.</long-description>
        <tag name="package" line="35" description="Default"/>
      </docblock>
      <constant namespace="Haldayne\Boost" line="42" package="Default">
        <name>LOOSE</name>
        <full_name>\Haldayne\Boost\Map::LOOSE</full_name>
        <value>true</value>
        <docblock line="42">
          <description>Should the comparison be made loosely?</description>
          <long-description></long-description>
          <tag name="see" line="42" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="42" description="" link="\Haldayne\Boost\Map::intersect"/>
        </docblock>
      </constant>
      <constant namespace="Haldayne\Boost" line="49" package="Default">
        <name>STRICT</name>
        <full_name>\Haldayne\Boost\Map::STRICT</full_name>
        <value>false</value>
        <docblock line="49">
          <description>Should the comparison be made strictly?</description>
          <long-description></long-description>
          <tag name="see" line="49" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="49" description="" link="\Haldayne\Boost\Map::intersect"/>
        </docblock>
      </constant>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="467" package="Default">
        <name>$array</name>
        <full_name>\Haldayne\Boost\Map::array</full_name>
        <default>array()</default>
        <docblock line="467">
          <description>The internal array representation of the map.</description>
          <long-description></long-description>
          <tag name="var" line="467" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="473" package="Default">
        <name>$guard</name>
        <full_name>\Haldayne\Boost\Map::guard</full_name>
        <default>null</default>
        <docblock line="473">
          <description>The guard code protecting sets.</description>
          <long-description></long-description>
          <tag name="var" line="473" description="" type="callable|string|null" variable="">
            <type>callable</type>
            <type>string</type>
            <type>null</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="479" package="Default">
        <name>$map_code_to_callable</name>
        <full_name>\Haldayne\Boost\Map::map_code_to_callable</full_name>
        <default>array()</default>
        <docblock line="479">
          <description>Track string code we've made into callables.</description>
          <long-description></long-description>
          <tag name="var" line="479" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="485" package="Default">
        <name>$map_key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::map_key_to_hash</full_name>
        <default>array()</default>
        <docblock line="485">
          <description>Track hashes we've created for non-string keys.</description>
          <long-description></long-description>
          <tag name="var" line="485" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="63" package="Default">
        <name>__construct</name>
        <full_name>\Haldayne\Boost\Map::__construct()</full_name>
        <docblock line="63">
          <description>Create a new map.</description>
          <long-description>Initialize the map with the given collection, if any. Accepts any kind
of collection: array, object, Traversable, another Map, etc. Optionally,
wrap every key,value sets into the map with the given guard code: if the
guard code fails, the set will throw an exception.</long-description>
          <tag name="param" line="63" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="63" description="" type="callable" variable="$guard">
            <type>callable</type>
          </tag>
          <tag name="throws" line="63" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default>null</default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$guard</name>
          <default>null</default>
          <type>callable</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="91" package="Default">
        <name>find</name>
        <full_name>\Haldayne\Boost\Map::find()</full_name>
        <docblock line="91">
          <description>Return a new map containing only members of this map that pass the callable.</description>
          <long-description>An all-purpose "grep". You give a function deciding whether an element is
in or out, and this returns a new map of those that are in. Ex, find the
odd numbers:

```
$nums = new Map(range(0, 3));
$odds = $m-&gt;find('return 1 == ($v % 2);');
```</long-description>
          <tag name="param" line="91" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="91" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="110" package="Default">
        <name>first</name>
        <full_name>\Haldayne\Boost\Map::first()</full_name>
        <docblock line="110">
          <description>Return a new map containing the first N elements matching the callable.</description>
          <long-description>Like `grep`, but stop after finding N elements.

```
$nums = new Map(range(0, 3));
$odds = $m-&gt;all('return 1 == ($v % 2);');
```</long-description>
          <tag name="param" line="110" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="110" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="110" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="132" package="Default">
        <name>last</name>
        <full_name>\Haldayne\Boost\Map::last()</full_name>
        <docblock line="132">
          <description>Return a new map containing the last N elements matching the callable.</description>
          <long-description>Like `grep`, but stop after finding N elements.

```
$nums = new Map(range(0, 3));
$odds = $m-&gt;all('return 1 == ($v % 2);');
```</long-description>
          <tag name="param" line="132" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="132" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="132" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="148" package="Default">
        <name>contains</name>
        <full_name>\Haldayne\Boost\Map::contains()</full_name>
        <docblock line="148">
          <description>Determine if a key exists the map.</description>
          <long-description>This is the object method equivalent of the magic isset($map[$key]);</long-description>
          <tag name="param" line="148" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="148" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="164" package="Default">
        <name>get</name>
        <full_name>\Haldayne\Boost\Map::get()</full_name>
        <docblock line="164">
          <description>Get the value corresponding to the given key.</description>
          <long-description>If the key does not exist in the map, return the default.

This is the object method equivalent of the magic $map[$key].</long-description>
          <tag name="param" line="164" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="164" description="" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="164" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="181" package="Default">
        <name>set</name>
        <full_name>\Haldayne\Boost\Map::set()</full_name>
        <docblock line="181">
          <description>Set a key and its corresponding value into the map.</description>
          <long-description>This is the object method equivalent of the magic $map[$key] = 'foo'.</long-description>
          <tag name="param" line="181" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="181" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="181" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="195" package="Default">
        <name>forget</name>
        <full_name>\Haldayne\Boost\Map::forget()</full_name>
        <docblock line="195">
          <description>Remove a key and its corresponding value from the map.</description>
          <long-description>This is the object method equivalent of the magic unset($map[$key]);</long-description>
          <tag name="param" line="195" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="195" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="206" package="Default">
        <name>isEmpty</name>
        <full_name>\Haldayne\Boost\Map::isEmpty()</full_name>
        <docblock line="206">
          <description>Determine if any key and their values have been set into the map.</description>
          <long-description></long-description>
          <tag name="return" line="206" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="223" package="Default">
        <name>diff</name>
        <full_name>\Haldayne\Boost\Map::diff()</full_name>
        <docblock line="223">
          <description>Return a new map containing those keys and values that are not present in
the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose values match will
be removed.  Otherwise, comparison is strict, and elements whose keys
and values match will be removed.</long-description>
          <tag name="param" line="223" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="223" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="223" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="243" package="Default">
        <name>intersect</name>
        <full_name>\Haldayne\Boost\Map::intersect()</full_name>
        <docblock line="243">
          <description>Return a new map containing those keys and values that are present in
the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose value match will
be included.  Otherise, comparison is strict, and elements whose keys &amp;
values match will be included.</long-description>
          <tag name="param" line="243" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="243" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="243" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="268" package="Default">
        <name>walk</name>
        <full_name>\Haldayne\Boost\Map::walk()</full_name>
        <docblock line="268">
          <description>Execute the given code over each element of the map. The code receives
the value and then the key as formal parameters.</description>
          <long-description>The items are walked in the order they exist in the map. If the code
returns boolean false, then the iteration halts. Values can be modified
from within the callback, but not keys.

Example:
```
$map-&gt;each(function (&amp;$value, $key) { $value++; return true; })-&gt;sum();
$map-&gt;each('$v++; return true;')-&gt;sum();
```</long-description>
          <tag name="param" line="268" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="268" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="285" package="Default">
        <name>walk_backward</name>
        <full_name>\Haldayne\Boost\Map::walk_backward()</full_name>
        <docblock line="285">
          <description>Like `walk`, except walk from the end toward the front.</description>
          <long-description></long-description>
          <tag name="param" line="285" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="285" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="312" package="Default">
        <name>partition</name>
        <full_name>\Haldayne\Boost\Map::partition()</full_name>
        <docblock line="312">
          <description>Returns a new map, where elements from this map have been placed into
new map elements. The return value of the code determines the key for
each new bucket.</description>
          <long-description>The code is called for each item in the map. The code receives the value
and key, respectively.  The code may return a scalar key and that scalar
becomes the key for a new map, into which that element is placed. If the
code returns a non-scalar, it explodes.</long-description>
          <tag name="param" line="312" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="312" description="" type="\Haldayne\Boost\MapOfMaps">
            <type>\Haldayne\Boost\MapOfMaps</type>
          </tag>
          <tag name="throws" line="312" description="" type="\UnexpectedValueException">
            <type>\UnexpectedValueException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="338" package="Default">
        <name>count</name>
        <full_name>\Haldayne\Boost\Map::count()</full_name>
        <docblock line="338">
          <description>Count the number of items in the map.</description>
          <long-description></long-description>
          <tag name="return" line="338" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="350" package="Default">
        <name>toArray</name>
        <full_name>\Haldayne\Boost\Map::toArray()</full_name>
        <docblock line="350">
          <description>Copy this map into an array, recursing as necessary to convert contained
collections into arrays.</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Arrayable::toArray()" refers="\Haldayne\Boost\Contract\Arrayable::toArray()" link="/classes/Haldayne.Boost.Contract.Arrayable.html#method_toArray"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="365" package="Default">
        <name>toJson</name>
        <full_name>\Haldayne\Boost\Map::toJson()</full_name>
        <docblock line="365">
          <description>Return a JSON representation of the object.</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Jsonable::toJson()" refers="\Haldayne\Boost\Contract\Jsonable::toJson()" link="/classes/Haldayne.Boost.Contract.Jsonable.html#method_toJson"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="379" package="Default">
        <name>offsetExists</name>
        <full_name>\Haldayne\Boost\Map::offsetExists()</full_name>
        <docblock line="379">
          <description>Determine if a value exists at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="379" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="379" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="391" package="Default">
        <name>offsetGet</name>
        <full_name>\Haldayne\Boost\Map::offsetGet()</full_name>
        <docblock line="391">
          <description>Get a value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="391" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="391" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="409" package="Default">
        <name>offsetSet</name>
        <full_name>\Haldayne\Boost\Map::offsetSet()</full_name>
        <docblock line="409">
          <description>Set the value at a given key.</description>
          <long-description>If key is null, the value is appended to the array using numeric indexes.
If the map was constructed with a set guard, then pass the value to the
guard. If the guard fails, the set throws an exception.</long-description>
          <tag name="param" line="409" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="409" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="409" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="throws" line="409" description="" type="\UnexpectedValueException">
            <type>\UnexpectedValueException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="441" package="Default">
        <name>offsetUnset</name>
        <full_name>\Haldayne\Boost\Map::offsetUnset()</full_name>
        <docblock line="441">
          <description>Unset the value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="441" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="441" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="454" package="Default">
        <name>getIterator</name>
        <full_name>\Haldayne\Boost\Map::getIterator()</full_name>
        <docblock line="454">
          <description>Get an iterator for a copy of the map.</description>
          <long-description></long-description>
          <tag name="return" line="454" description="" type="\ArrayIterator">
            <type>\ArrayIterator</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="495" package="Default">
        <name>collection_to_array</name>
        <full_name>\Haldayne\Boost\Map::collection_to_array()</full_name>
        <docblock line="495">
          <description>Give me a native PHP array, regardless of what kind of collection-like
structure is given.</description>
          <long-description></long-description>
          <tag name="param" line="495" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Traversable|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|object|array" variable="$items">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="return" line="495" description="" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="495" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="528" package="Default">
        <name>call</name>
        <full_name>\Haldayne\Boost\Map::call()</full_name>
        <docblock line="528">
          <description>Calls the given code with the given value and key as first &amp; second argument.</description>
          <long-description></long-description>
          <tag name="param" line="528" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="528" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="param" line="528" description="" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="throws" line="528" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="548" package="Default">
        <name>code_to_callable</name>
        <full_name>\Haldayne\Boost\Map::code_to_callable()</full_name>
        <docblock line="548">
          <description>Return a callable from the given code, if possible.</description>
          <long-description>When you give a callable, this returns immediately. When you give a
string, caches and returns an anonymous function created from that
string code. Otherwise, it explodes.

If given a string, then the value is passed in by-reference, allowing
that code to update the value.  Updating keys would induce undefined
behavior on iterations, so we don't allow that.</long-description>
          <tag name="param" line="548" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="throws" line="548" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="573" package="Default">
        <name>passes</name>
        <full_name>\Haldayne\Boost\Map::passes()</full_name>
        <docblock line="573">
          <description>Decide if the given value is considered "passing" or "failing".</description>
          <long-description></long-description>
          <tag name="param" line="573" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="573" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="585" package="Default">
        <name>key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::key_to_hash()</full_name>
        <docblock line="585">
          <description>Lookup the hash for the given key. If a hash does not yet exist, one is
created.</description>
          <long-description></long-description>
          <tag name="param" line="585" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="585" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="620" package="Default">
        <name>hash_to_key</name>
        <full_name>\Haldayne\Boost\Map::hash_to_key()</full_name>
        <docblock line="620">
          <description>Lookup the key for the given hash.</description>
          <long-description></long-description>
          <tag name="param" line="620" description="" type="string" variable="$hash">
            <type>string</type>
          </tag>
          <tag name="return" line="620" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$hash</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="646" package="Default">
        <name>grep</name>
        <full_name>\Haldayne\Boost\Map::grep()</full_name>
        <docblock line="646">
          <description>Finds elements for which the given code passes, optionally limited to a
maximum count.</description>
          <long-description>If limit is null, no limit on number of matches. If limit is positive,
return that many from the front of the array. If limit is negative,
return that many from the end of the array.</long-description>
          <tag name="param" line="646" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="646" description="" type="integer|null" variable="$limit">
            <type>integer</type>
            <type>null</type>
          </tag>
          <tag name="return" line="646" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$limit</name>
          <default>null</default>
          <type>integer|null</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="365" code="PPC:ERR-50015">Argument $options is missing from the Docblock of toJson</error>
    </parse_markers>
    <source>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</source>
  </file>
  <file path="boost/src/MapOfMaps.php" generated-path="boost.src.MapOfMaps.html" hash="608a8379434e4b3468b5a954e63de974" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Boost" line="7" package="Default">
      <extends>\Haldayne\Boost\Map</extends>
      <name>MapOfMaps</name>
      <full_name>\Haldayne\Boost\MapOfMaps</full_name>
      <docblock line="7">
        <description>Implements a map of maps.</description>
        <long-description>Sports a fluent interface accepting callables to drive array operations,
similar in spirit to jQuery. Supports keys of any type: scalars, even
arrays and objects!  Used in place of `array ()` and `[]`, your code will
be easier to write *and* read.

In the API, a formal variable named `$collection` must be one of:
  - Haldayne\Boost\Map
  - Haldayne\Boost\Contract\Arrayable
  - Haldayne\Boost\Contract\Jsonable
  - \Traversable
  - object
  - array

In the API, a formal variable named `$code` must be either a callable or
a string representing actual PHP code. When giving a string, be mindful:
user-supplied string code is a security risk, and string code you write is
checked only at run-time. Also, be mindful that these strings can contain
`$v` and `$k`, which represent the value and key being passed in.

In the API, a formal variable named `$key` may be of *any* type.

As much as possible, method names were chosen to reflect synonymous usage in
the PHP engine itself. When not possible or relevant, the names may reflect
usage from Laravel.</long-description>
        <tag name="package" line="7" description="Default"/>
        <tag name="inherited_from" description="\Haldayne\Boost\Map" refers="\Haldayne\Boost\Map" link="/classes/Haldayne.Boost.Map.html"/>
      </docblock>
      <constant namespace="Haldayne\Boost" line="42" package="Default">
        <name>LOOSE</name>
        <full_name>\Haldayne\Boost\Map::LOOSE</full_name>
        <value>true</value>
        <docblock line="42">
          <description>Should the comparison be made loosely?</description>
          <long-description></long-description>
          <tag name="see" line="42" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="42" description="" link="\Haldayne\Boost\Map::intersect"/>
        </docblock>
      </constant>
      <constant namespace="Haldayne\Boost" line="49" package="Default">
        <name>STRICT</name>
        <full_name>\Haldayne\Boost\Map::STRICT</full_name>
        <value>false</value>
        <docblock line="49">
          <description>Should the comparison be made strictly?</description>
          <long-description></long-description>
          <tag name="see" line="49" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="49" description="" link="\Haldayne\Boost\Map::intersect"/>
        </docblock>
      </constant>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="467" package="Default">
        <name>$array</name>
        <full_name>\Haldayne\Boost\Map::array</full_name>
        <default>array()</default>
        <docblock line="467">
          <description>The internal array representation of the map.</description>
          <long-description></long-description>
          <tag name="var" line="467" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="473" package="Default">
        <name>$guard</name>
        <full_name>\Haldayne\Boost\Map::guard</full_name>
        <default>null</default>
        <docblock line="473">
          <description>The guard code protecting sets.</description>
          <long-description></long-description>
          <tag name="var" line="473" description="" type="callable|string|null" variable="">
            <type>callable</type>
            <type>string</type>
            <type>null</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="479" package="Default">
        <name>$map_code_to_callable</name>
        <full_name>\Haldayne\Boost\Map::map_code_to_callable</full_name>
        <default>array()</default>
        <docblock line="479">
          <description>Track string code we've made into callables.</description>
          <long-description></long-description>
          <tag name="var" line="479" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="485" package="Default">
        <name>$map_key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::map_key_to_hash</full_name>
        <default>array()</default>
        <docblock line="485">
          <description>Track hashes we've created for non-string keys.</description>
          <long-description></long-description>
          <tag name="var" line="485" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="12" package="Default">
        <name>__construct</name>
        <full_name>\Haldayne\Boost\MapOfMaps::__construct()</full_name>
        <docblock line="12">
          <description>Create a new map of maps.</description>
          <long-description>Initialize the map with the given collection, if any. Accepts any kind
of collection: array, object, Traversable, another Map, etc. Optionally,
wrap every key,value sets into the map with the given guard code: if the
guard code fails, the set will throw an exception.</long-description>
          <tag name="inherited_from" description="\Haldayne\Boost\Map::__construct()" refers="\Haldayne\Boost\Map::__construct()" link="/classes/Haldayne.Boost.Map.html#method___construct"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default>null</default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="23" package="Default">
        <name>guard</name>
        <full_name>\Haldayne\Boost\MapOfMaps::guard()</full_name>
        <docblock line="23">
          <description>Ensure the given thing is a Map.</description>
          <long-description></long-description>
          <tag name="param" line="23" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="23" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="63" package="Default">
        <name>__construct</name>
        <full_name>\Haldayne\Boost\Map::__construct()</full_name>
        <docblock line="63">
          <description>Create a new map.</description>
          <long-description>Initialize the map with the given collection, if any. Accepts any kind
of collection: array, object, Traversable, another Map, etc. Optionally,
wrap every key,value sets into the map with the given guard code: if the
guard code fails, the set will throw an exception.</long-description>
          <tag name="param" line="63" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="63" description="" type="callable" variable="$guard">
            <type>callable</type>
          </tag>
          <tag name="throws" line="63" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default>null</default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$guard</name>
          <default>null</default>
          <type>callable</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="91" package="Default">
        <name>find</name>
        <full_name>\Haldayne\Boost\Map::find()</full_name>
        <docblock line="91">
          <description>Return a new map containing only members of this map that pass the callable.</description>
          <long-description>An all-purpose "grep". You give a function deciding whether an element is
in or out, and this returns a new map of those that are in. Ex, find the
odd numbers:

```
$nums = new Map(range(0, 3));
$odds = $m-&gt;find('return 1 == ($v % 2);');
```</long-description>
          <tag name="param" line="91" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="91" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="110" package="Default">
        <name>first</name>
        <full_name>\Haldayne\Boost\Map::first()</full_name>
        <docblock line="110">
          <description>Return a new map containing the first N elements matching the callable.</description>
          <long-description>Like `grep`, but stop after finding N elements.

```
$nums = new Map(range(0, 3));
$odds = $m-&gt;all('return 1 == ($v % 2);');
```</long-description>
          <tag name="param" line="110" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="110" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="110" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="132" package="Default">
        <name>last</name>
        <full_name>\Haldayne\Boost\Map::last()</full_name>
        <docblock line="132">
          <description>Return a new map containing the last N elements matching the callable.</description>
          <long-description>Like `grep`, but stop after finding N elements.

```
$nums = new Map(range(0, 3));
$odds = $m-&gt;all('return 1 == ($v % 2);');
```</long-description>
          <tag name="param" line="132" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="132" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="132" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="148" package="Default">
        <name>contains</name>
        <full_name>\Haldayne\Boost\Map::contains()</full_name>
        <docblock line="148">
          <description>Determine if a key exists the map.</description>
          <long-description>This is the object method equivalent of the magic isset($map[$key]);</long-description>
          <tag name="param" line="148" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="148" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="164" package="Default">
        <name>get</name>
        <full_name>\Haldayne\Boost\Map::get()</full_name>
        <docblock line="164">
          <description>Get the value corresponding to the given key.</description>
          <long-description>If the key does not exist in the map, return the default.

This is the object method equivalent of the magic $map[$key].</long-description>
          <tag name="param" line="164" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="164" description="" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="164" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="181" package="Default">
        <name>set</name>
        <full_name>\Haldayne\Boost\Map::set()</full_name>
        <docblock line="181">
          <description>Set a key and its corresponding value into the map.</description>
          <long-description>This is the object method equivalent of the magic $map[$key] = 'foo'.</long-description>
          <tag name="param" line="181" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="181" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="181" description="" type="\Haldayne\Boost\MapOfMaps">
            <type>\Haldayne\Boost\MapOfMaps</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="195" package="Default">
        <name>forget</name>
        <full_name>\Haldayne\Boost\Map::forget()</full_name>
        <docblock line="195">
          <description>Remove a key and its corresponding value from the map.</description>
          <long-description>This is the object method equivalent of the magic unset($map[$key]);</long-description>
          <tag name="param" line="195" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="195" description="" type="\Haldayne\Boost\MapOfMaps">
            <type>\Haldayne\Boost\MapOfMaps</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="206" package="Default">
        <name>isEmpty</name>
        <full_name>\Haldayne\Boost\Map::isEmpty()</full_name>
        <docblock line="206">
          <description>Determine if any key and their values have been set into the map.</description>
          <long-description></long-description>
          <tag name="return" line="206" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="223" package="Default">
        <name>diff</name>
        <full_name>\Haldayne\Boost\Map::diff()</full_name>
        <docblock line="223">
          <description>Return a new map containing those keys and values that are not present in
the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose values match will
be removed.  Otherwise, comparison is strict, and elements whose keys
and values match will be removed.</long-description>
          <tag name="param" line="223" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="223" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="223" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="243" package="Default">
        <name>intersect</name>
        <full_name>\Haldayne\Boost\Map::intersect()</full_name>
        <docblock line="243">
          <description>Return a new map containing those keys and values that are present in
the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose value match will
be included.  Otherise, comparison is strict, and elements whose keys &amp;
values match will be included.</long-description>
          <tag name="param" line="243" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="243" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="243" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="268" package="Default">
        <name>walk</name>
        <full_name>\Haldayne\Boost\Map::walk()</full_name>
        <docblock line="268">
          <description>Execute the given code over each element of the map. The code receives
the value and then the key as formal parameters.</description>
          <long-description>The items are walked in the order they exist in the map. If the code
returns boolean false, then the iteration halts. Values can be modified
from within the callback, but not keys.

Example:
```
$map-&gt;each(function (&amp;$value, $key) { $value++; return true; })-&gt;sum();
$map-&gt;each('$v++; return true;')-&gt;sum();
```</long-description>
          <tag name="param" line="268" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="268" description="" type="\Haldayne\Boost\MapOfMaps">
            <type>\Haldayne\Boost\MapOfMaps</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="285" package="Default">
        <name>walk_backward</name>
        <full_name>\Haldayne\Boost\Map::walk_backward()</full_name>
        <docblock line="285">
          <description>Like `walk`, except walk from the end toward the front.</description>
          <long-description></long-description>
          <tag name="param" line="285" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="285" description="" type="\Haldayne\Boost\MapOfMaps">
            <type>\Haldayne\Boost\MapOfMaps</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="312" package="Default">
        <name>partition</name>
        <full_name>\Haldayne\Boost\Map::partition()</full_name>
        <docblock line="312">
          <description>Returns a new map, where elements from this map have been placed into
new map elements. The return value of the code determines the key for
each new bucket.</description>
          <long-description>The code is called for each item in the map. The code receives the value
and key, respectively.  The code may return a scalar key and that scalar
becomes the key for a new map, into which that element is placed. If the
code returns a non-scalar, it explodes.</long-description>
          <tag name="param" line="312" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="312" description="" type="\Haldayne\Boost\MapOfMaps">
            <type>\Haldayne\Boost\MapOfMaps</type>
          </tag>
          <tag name="throws" line="312" description="" type="\UnexpectedValueException">
            <type>\UnexpectedValueException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="338" package="Default">
        <name>count</name>
        <full_name>\Haldayne\Boost\Map::count()</full_name>
        <docblock line="338">
          <description>Count the number of items in the map.</description>
          <long-description></long-description>
          <tag name="return" line="338" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="350" package="Default">
        <name>toArray</name>
        <full_name>\Haldayne\Boost\Map::toArray()</full_name>
        <docblock line="350">
          <description>Copy this map into an array, recursing as necessary to convert contained
collections into arrays.</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Arrayable::toArray()" refers="\Haldayne\Boost\Contract\Arrayable::toArray()" link="/classes/Haldayne.Boost.Contract.Arrayable.html#method_toArray"/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="365" package="Default">
        <name>toJson</name>
        <full_name>\Haldayne\Boost\Map::toJson()</full_name>
        <docblock line="365">
          <description>Return a JSON representation of the object.</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Jsonable::toJson()" refers="\Haldayne\Boost\Contract\Jsonable::toJson()" link="/classes/Haldayne.Boost.Contract.Jsonable.html#method_toJson"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>0</default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="379" package="Default">
        <name>offsetExists</name>
        <full_name>\Haldayne\Boost\Map::offsetExists()</full_name>
        <docblock line="379">
          <description>Determine if a value exists at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="379" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="379" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="391" package="Default">
        <name>offsetGet</name>
        <full_name>\Haldayne\Boost\Map::offsetGet()</full_name>
        <docblock line="391">
          <description>Get a value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="391" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="391" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="409" package="Default">
        <name>offsetSet</name>
        <full_name>\Haldayne\Boost\Map::offsetSet()</full_name>
        <docblock line="409">
          <description>Set the value at a given key.</description>
          <long-description>If key is null, the value is appended to the array using numeric indexes.
If the map was constructed with a set guard, then pass the value to the
guard. If the guard fails, the set throws an exception.</long-description>
          <tag name="param" line="409" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="409" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="409" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="throws" line="409" description="" type="\UnexpectedValueException">
            <type>\UnexpectedValueException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="441" package="Default">
        <name>offsetUnset</name>
        <full_name>\Haldayne\Boost\Map::offsetUnset()</full_name>
        <docblock line="441">
          <description>Unset the value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="441" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="441" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="454" package="Default">
        <name>getIterator</name>
        <full_name>\Haldayne\Boost\Map::getIterator()</full_name>
        <docblock line="454">
          <description>Get an iterator for a copy of the map.</description>
          <long-description></long-description>
          <tag name="return" line="454" description="" type="\ArrayIterator">
            <type>\ArrayIterator</type>
          </tag>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="495" package="Default">
        <name>collection_to_array</name>
        <full_name>\Haldayne\Boost\Map::collection_to_array()</full_name>
        <docblock line="495">
          <description>Give me a native PHP array, regardless of what kind of collection-like
structure is given.</description>
          <long-description></long-description>
          <tag name="param" line="495" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Traversable|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|object|array" variable="$items">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="return" line="495" description="" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="495" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="528" package="Default">
        <name>call</name>
        <full_name>\Haldayne\Boost\Map::call()</full_name>
        <docblock line="528">
          <description>Calls the given code with the given value and key as first &amp; second argument.</description>
          <long-description></long-description>
          <tag name="param" line="528" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="528" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="param" line="528" description="" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="throws" line="528" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="548" package="Default">
        <name>code_to_callable</name>
        <full_name>\Haldayne\Boost\Map::code_to_callable()</full_name>
        <docblock line="548">
          <description>Return a callable from the given code, if possible.</description>
          <long-description>When you give a callable, this returns immediately. When you give a
string, caches and returns an anonymous function created from that
string code. Otherwise, it explodes.

If given a string, then the value is passed in by-reference, allowing
that code to update the value.  Updating keys would induce undefined
behavior on iterations, so we don't allow that.</long-description>
          <tag name="param" line="548" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="throws" line="548" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="573" package="Default">
        <name>passes</name>
        <full_name>\Haldayne\Boost\Map::passes()</full_name>
        <docblock line="573">
          <description>Decide if the given value is considered "passing" or "failing".</description>
          <long-description></long-description>
          <tag name="param" line="573" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="573" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="585" package="Default">
        <name>key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::key_to_hash()</full_name>
        <docblock line="585">
          <description>Lookup the hash for the given key. If a hash does not yet exist, one is
created.</description>
          <long-description></long-description>
          <tag name="param" line="585" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="585" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="620" package="Default">
        <name>hash_to_key</name>
        <full_name>\Haldayne\Boost\Map::hash_to_key()</full_name>
        <docblock line="620">
          <description>Lookup the key for the given hash.</description>
          <long-description></long-description>
          <tag name="param" line="620" description="" type="string" variable="$hash">
            <type>string</type>
          </tag>
          <tag name="return" line="620" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$hash</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="646" package="Default">
        <name>grep</name>
        <full_name>\Haldayne\Boost\Map::grep()</full_name>
        <docblock line="646">
          <description>Finds elements for which the given code passes, optionally limited to a
maximum count.</description>
          <long-description>If limit is null, no limit on number of matches. If limit is positive,
return that many from the front of the array. If limit is negative,
return that many from the end of the array.</long-description>
          <tag name="param" line="646" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="646" description="" type="integer|null" variable="$limit">
            <type>integer</type>
            <type>null</type>
          </tag>
          <tag name="return" line="646" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$limit</name>
          <default>null</default>
          <type>integer|null</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="12" code="PPC:ERR-50015">Argument $collection is missing from the Docblock of __construct</error>
    </parse_markers>
    <source>eJx9UE1PwzAMvedX+DBpWzXR+wYCgRBwQPwAQJOXum2kxInyMYbQ/jtpSjlUAh/iyPZ7fs+X1653gtFQcCgJHlE3+Mn0dmttiDsh6qoSUMGTcZoMcQyAYNCBbYcULnKzFlJjCPCM7qXNTwA6ReKmVMSXgByFZogK7jxhpEzD9DGjKgN1yS4dtJLQJpZRWYb9XloO0ScZVwtptaaxfgWctF4XzLiqoNFnrdvtH6gNvMIi9ipsYNkl9M0S3te7gj6Lud57DskTxJ6gU0fi/FPcgRoukQ1Osqfxm7wbDRh1ogYWR9SJflueYvIMB2s1If/rt8hajfi5ux+asQkqG0SWlM/4MIAmH2fxDQTsi9Y=</source>
  </file>
  <package name="Default" full_name="Default"/>
  <package name="global" full_name="global"/>
  <namespace name="Haldayne" full_name="Haldayne">
    <namespace name="Boost" full_name="Haldayne\Boost">
      <namespace name="Contract" full_name="Haldayne\Boost\Contract"/>
    </namespace>
    <namespace name="Customs" full_name="Haldayne\Customs"/>
    <namespace name="DataStructure" full_name="Haldayne\DataStructure"/>
  </namespace>
  <deprecated count="0"/>
</project>
