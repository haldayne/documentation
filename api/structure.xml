<?xml version="1.0" encoding="utf-8"?>
<project title="Haldayne PHP Componentry" version="2.8.5">
  <partials/>
  <file path="customs/src/UploadException.php" generated-path="customs.src.UploadException.html" hash="e9bac1b058cb70f9b48ed6e43e2c85ea" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Customs" line="13" package="Haldayne">
      <extends>\RuntimeException</extends>
      <name>UploadException</name>
      <full_name>\Haldayne\Customs\UploadException</full_name>
      <docblock line="13">
        <description>Represents an exception during upload.</description>
        <long-description>Occurs when the *server* had a problem, or the *client* appears to be
attempting to bypass the normal PHP file upload safeguards.</long-description>
        <tag name="see" line="13" description="which occurs when the client uploads anything other than a&#10;complete file." link="\Haldayne\Customs\UploadError"/>
        <tag name="package" line="13" description="Haldayne"/>
      </docblock>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="61" package="Haldayne">
        <name>$htmlName</name>
        <full_name>\Haldayne\Customs\HtmlNameAccessorTrait::htmlName</full_name>
        <default></default>
        <docblock line="61">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="61" description="&lt;p&gt;The HTML name we were given.&lt;/p&gt;" type="string" variable="$htmlName">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="53" package="Haldayne">
        <name>getHtmlName</name>
        <full_name>\Haldayne\Customs\HtmlNameAccessorTrait::getHtmlName()</full_name>
        <docblock line="53">
          <description>Get the HTML variable name.</description>
          <long-description></long-description>
          <tag name="return" line="53" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="api" line="53" description=""/>
          <tag name="since" line="53" description="1.0.0"/>
        </docblock>
        <inherited_from>\Haldayne\Customs\HtmlNameAccessorTrait</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>eJxdkU9rHDEMxe/+FDospBmS7D3pn5QQyKkNIb0tBK1HGxs8trHkzi4l373y7OxsqS8CS36/p+fP37LLJuJAnNESPGHo8RBp81BZ0sB3xqy7zkAHL5QLMUVhwAi0t5TFpwh9LT6+Q80hYX+jk234p7W1MIyOIogj6JjKbyodOOwBIZe0DTRcQSrHtg1elTvAnAn1oSTYUhNCERoUpIR2d8jIPD2JqQwY4PnpGXY+0MwHxh29Vyw9n6zcMxH8mrqPpShwdN46SP85PDqYZdqKB3GNmrTZTOrO2ORsGnIgoYnaGGtjQzM1I5ZcaC8UVWnzUqP4gZaO+WNAT2VNW4bwQ7P/bi0xp/Ja0ItG3vpT7O108FAIlYgQaTwtunzAzWnq3kehEjHMF+up5roN3sKuRjvZenuzKbKUauXTys38K1jZ1GvZnP2vaA9fINYQLieho+tJEotGdXv7r9TFq8ZEMCKfvxdGLw4OqZbZ9MXCUfHLu0VwpVHz9VcmOQVytjaPfZgP8xddvt8x</source>
  </file>
  <file path="boost/src/Arrayable.php" generated-path="boost.src.Arrayable.html" hash="e64f162d7869faba45837c236c8466cc" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>eJyzsS/IKODKS8xNLS5ITE5V8EjMSUmszEuNcUksSQwuKSpNLiktSrXm4srMK0ktSgMq4QIA4kcScg==</source>
  </file>
  <file path="customs/src/ServerProblemException.php" generated-path="customs.src.ServerProblemException.html" hash="de4dd99400ac6d4ec9c42f73901b2e4e" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Customs" line="21" package="Haldayne">
      <extends>\Haldayne\Customs\UploadException</extends>
      <name>ServerProblemException</name>
      <full_name>\Haldayne\Customs\ServerProblemException</full_name>
      <docblock line="21">
        <description>A specific kind of UploadException: the server had a problem.</description>
        <long-description>It's recommended that you also log the temporary directory and currently
installed extensions for their diagnostic value. The exception message
does not include these details for security, but the exception provides
a method for extracting them. Example:

```
try {
    $it = new UploadIterator;
} catch (ServerProblemException $ex) {
    error_log($ex-&gt;getDiagnosticMessage());
    throw $ex;
}</long-description>
        <tag name="package" line="21" description="Haldayne"/>
        <tag name="inherited_from" description="\Haldayne\Customs\UploadException" refers="\Haldayne\Customs\UploadException" link="/classes/Haldayne.Customs.UploadException.html"/>
      </docblock>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="61" package="Haldayne">
        <name>$htmlName</name>
        <full_name>\Haldayne\Customs\HtmlNameAccessorTrait::htmlName</full_name>
        <default></default>
        <docblock line="61">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="61" description="&lt;p&gt;The HTML name we were given.&lt;/p&gt;" type="string" variable="$htmlName">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="30" package="Haldayne">
        <name>getMessage</name>
        <full_name>\Haldayne\Customs\ServerProblemException::getMessage()</full_name>
        <docblock line="30">
          <description>Return the message specific for this exception code.</description>
          <long-description></long-description>
          <tag name="return" line="30" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="api" line="30" description=""/>
          <tag name="since" line="30" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="63" package="Haldayne">
        <name>getDiagnosticMessage</name>
        <full_name>\Haldayne\Customs\ServerProblemException::getDiagnosticMessage()</full_name>
        <docblock line="63">
          <description>Returns a string containing deeper diagnostics of the system state
at the time the server problem occurred.</description>
          <long-description>Server problems may not last long (a lot of simultaneous uploads
temporarily eats all the upload space) or may be semi-permanent (an
extension is preventing all uploads). It's therefore important to
know as much as possible about the system at the time of the problem.

This method captures the free space available, loaded extensions, and
session id into a string for foresnic diagnostics.</long-description>
          <tag name="return" line="63" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="api" line="63" description=""/>
          <tag name="since" line="63" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="53" package="Haldayne">
        <name>getHtmlName</name>
        <full_name>\Haldayne\Customs\HtmlNameAccessorTrait::getHtmlName()</full_name>
        <docblock line="53">
          <description>Get the HTML variable name.</description>
          <long-description></long-description>
          <tag name="return" line="53" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="api" line="53" description=""/>
          <tag name="since" line="53" description="1.0.0"/>
        </docblock>
        <inherited_from>\Haldayne\Customs\HtmlNameAccessorTrait</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>eJy1VU1v4zYQvftXzMEL24HjbK9Od1sjVlEDmw/I3m6B7UKhxbFNhCIFkrJjLPLfO6Qoy06c3sqDPijyzZvHN6Nffys3ZUexAm3JcoQ/meRsr/Cfm8o6XdjrTufq4qIDFzABW2IuViKHJ6E46BV8LaVmPHnOsXRCqzG4DYJFs0UDG8aBQWn0UmIxIgCPMXM9CwZzXRSoOHLawBzsdQVMWg1SrwOEw6LUhpk9cEGrnaYnRiHzyhhUTu49llDWMSkJBJ8dKksELKy08QjC0E62Vto6ortlssIRLAgZG65ACVu2Ro/ENVpQ2hFkLiuOHsEicHRMyBrTIsUWbj+EZeUCxxaJctwKjtZDMcJ1G83DJuJlWO6EClkVI0ieWVFKHEc1Hh8f/c1Rdj/9gx9d4eATKNxFcWcODSMBrv2CF8iZyzfQnweNH2pxD/pDF58HLRQao01GmvZp/vLzGt30oMltnX1/MLhulruN0TsPUYeqOV51csmshXcCBuW5fW2EDnGgEYzjxwWk6CqjgnBR+NZN9ZkJeyRprjmO4t4G4ndTY1hnSNHDLCvF4dnSASL8Mvo4+hjnrsK9rJbSB6pUHuBJioMAYUHN1w+7E0Hhrmd0+dkTGRx9zhkZ4+vDl/vJNEvSNLu7zxa3D9l0lo4Pa/yIXHu3wlp//uzI0ystORWIULDbCIrlNGxoKohTBSF7VHXvRbyZ3C2yb+lskZyP+Ad51heWhh0ZtkH07y0DqclHJMR/xUn+XiR389n93fkwE9WWHSwJ8Anfy4DjilXSncWJMkdPXB+WvHTq63kfWdKztgE5RVGVKv/IEUs8Lnzre1RoSXtLydMW5rBBYnUZO1HgcduKDQt0HpoNf+3C+ckyCwXbh9ZBVUIXTTT6jO7Oh7aioLyZQl3ZqIttcJrDEHIPyBxlJOWRfhC68QCoNHyEpedXiEvKryA85SiKaqDac6AaKg1u6XvwHCHGqINR3XopgEGqNwThwxM3UkE3QE+KGgCjnCpyJd1LTealNIEtdex6Uclj8aLGbac/0WvhCzv2xJyVdHoYaMDKINZZAtuSZxntHoJne9LRh77xN2CWbBLy5FQ95OiDC3wL8WlZRWV+ZID/t4ecaaevukm31v+bNvTLXD8wt6HmfqPVSqzH4zff+oO2ABqiJRF1q/5J7fQ+2DHs6n0Z/SE/ff9gfwyDovRqn+J7K2KciPJlgscJg4V2mDHOa4ze8CROlt18mcznWXY6/Tap0++eQhbIhOPtv10/ON1AXpTUZ/u9YW/odc1qF2RtAvSfOt3SptJ/9aWbzZP0ryT93kuT2/tFkk2m07T347AmavzSeen8C5O/xuo=</source>
  </file>
  <file path="boost/src/functions/header_ip.php" generated-path="boost.src.functions.header_ip.html" hash="b11e4494593915684a54913ac1d4bff5" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <function namespace="Haldayne\Boost" line="33" package="Haldayne">
      <name>header_ip</name>
      <full_name>\Haldayne\Boost\header_ip()</full_name>
      <docblock line="33">
        <description>Return the client IP addresses provided by proxy-supplied headers,
including the proxy IP address itself.</description>
        <long-description>Do not rely on these values, because they come from the headers which are
user-supplied and can be spoofed. (Unless you know certain headers are
reliable because you own the proxy infrastructure.)

By default, we validate that the values in the headers are IP addresses.
You can disable this. By default, we check well-known headers, but you can
change which headers to check.

To determine if the client originated from a known proxy, bearing in mind
that this test is tainted because it relies upon headers, you can use:

```
if (header_ip() === [ remote_ip() ]) {
    // client NOT using a known proxy
} else {
    // client IS using a known proxy
}
```</long-description>
        <tag name="package" line="33" description="Haldayne"/>
        <tag name="param" line="33" description="&lt;p&gt;Check that header-supplied values are IP addresses.&lt;/p&gt;" type="boolean" variable="$validate">
          <type>boolean</type>
        </tag>
        <tag name="param" line="33" description="&lt;p&gt;The headers to check for originating IP addresses.&lt;/p&gt;" type="array" variable="$headers">
          <type>array</type>
        </tag>
        <tag name="return" line="33" description="All IP addresses reported by proxy headers, with the last-&#10;most element being the proxy IP address itself." type="array">
          <type>array</type>
        </tag>
        <tag name="see" line="33" description="" link="http://blog.ircmaxell.com/2012/11/anatomy-of-attack-how-i-hacked.html"/>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$validate</name>
        <default>true</default>
        <type>boolean</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$headers</name>
        <default>array()</default>
        <type>array</type>
      </argument>
    </function>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>eJyNVE1v1DAQvedXzIFDt2o2tMfCilI40AsgKAcEFZ21Jxurjh3ZTrdR1f/OjJP9giIRKYoTzbx5895MXr/pmq5w2FLsUBF8QKtxcPTz0vuYXhVFdXxcwDF8odQHB6khUNaQS3D1GVDrQDFShC74e6NJw3KQ88NQxr7rOFBDQ6gpxBNBMU7ZXhu3ykA5cA8HTIpk67lEyv3eg/MJAtkBfK4dCe7R9hRPYEkKe37nrwMo3xLUwbcZd6oI68aoBjCQgHFs2JFCp0GhYxSInfc16TkcfXNWWAy+hzvn16AoJDRuizchMR+DS0tbCpLg126vJ+PqgDGFXrFqNJ9xmmReDqCpxt6mE1jnVozGJD1gytljc5x+0AfXPVA7C/Sdi0oH2sRMJjUmzv+soBpSd3ywtpSOtq2wfH3KvBlC0FSDbkWTYpu6yY8A84n+tWfwRKE1jsDU+8Pgg1kZx73o0QaEsV6WQ8zCIK5zY5ysBWzq2XAZignkyVoLwEZWk603rEff+T3qE21x9Hxidnt7m8erhqMx7JfpjmawWCzgB4O0PtH45WYGjxIpV1Vt2H/8dM1oQvCAtwQ+AVnm8kzS1dd/5uwoyemiw4AtLL238GLr+btsTVZhpLwbzmkKnrV9AsMQcIAXG6eu96Zl4xrUPmx9EZ5/Y4VxqUewt9Ye7nSgzoe0t9M7C9YmNdl+y1NeClbLfwuWilqRZkn/s+IXkZh1St15VS2tX81NUC0+8LDOeZ+rs5enZ9XpaYVM37dD6esSU0J1VzZ+XZqy4SOvbZNay2hVUfdOJbMdFPF7p/YCeBnpZKeYDMbNrHgsnorfm+uvEw==</source>
  </file>
  <file path="boost/src/Contract/Arrayable.php" generated-path="boost.src.Contract.Arrayable.html" hash="7f7c51100037144d3e52566dd96cb54e" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <interface namespace="Haldayne\Boost\Contract" line="4" package="Default">
      <name>Arrayable</name>
      <full_name>\Haldayne\Boost\Contract\Arrayable</full_name>
      <docblock line="4">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="4" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost\Contract" line="9" package="Default">
        <name>toArray</name>
        <full_name>\Haldayne\Boost\Contract\Arrayable::toArray()</full_name>
        <docblock line="9">
          <description>Return a native PHP array representation of the object.</description>
          <long-description></long-description>
        </docblock>
      </method>
    </interface>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="4" code="PPC:ERR-50009">No summary for interface ""</error>
    </parse_markers>
    <source>eJwtjbEOgkAQRPv9ii2VQj4AE6M2lISaZjmXgMHdy95iQoz/Llyc5hXzJnO+xDGC0ItTpMBY0/ygVbi7qSbv7ipuFLwCmMTZht25mtFK/czwAdxSFkUmFtiyLyZIKOTTm7GpG6RdR+NonFh8K1RQB/SRUfsnBz/952VmXPp5CjgsErLqmg8Pxwq+8AMxFDjF</source>
  </file>
  <file path="customs/src/SecurityConcernException.php" generated-path="customs.src.SecurityConcernException.html" hash="8e6dfd2c423d4ba1686a2698a7998baf" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Customs" line="21" package="Haldayne">
      <extends>\Haldayne\Customs\UploadException</extends>
      <name>SecurityConcernException</name>
      <full_name>\Haldayne\Customs\SecurityConcernException</full_name>
      <docblock line="21">
        <description>A specific kind of UploadException: the upload is suspicious.</description>
        <long-description>It's recommended that you also log the session ID, IP address, and other
environment for their diagnostic value. The exception message does not
include these details for security, but the exception provides a method for
extracting them. Example:

```
try {
    $it = new UploadIterator;
} catch (SecurityConcernException $ex) {
    error_log($ex-&gt;getDiagnosticMessage());
    throw $ex;
}</long-description>
        <tag name="package" line="21" description="Haldayne"/>
        <tag name="inherited_from" description="\Haldayne\Customs\UploadException" refers="\Haldayne\Customs\UploadException" link="/classes/Haldayne.Customs.UploadException.html"/>
      </docblock>
      <constant namespace="Haldayne\Customs" line="23" package="Haldayne">
        <name>NOT_UPLOADED</name>
        <full_name>\Haldayne\Customs\SecurityConcernException::NOT_UPLOADED</full_name>
        <value>1</value>
        <docblock line="23">
          <description></description>
          <long-description></long-description>
        </docblock>
      </constant>
      <constant namespace="Haldayne\Customs" line="24" package="Haldayne">
        <name>UNKNOWN_CODE</name>
        <full_name>\Haldayne\Customs\SecurityConcernException::UNKNOWN_CODE</full_name>
        <value>2</value>
        <docblock line="24">
          <description></description>
          <long-description></long-description>
        </docblock>
      </constant>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="61" package="Haldayne">
        <name>$htmlName</name>
        <full_name>\Haldayne\Customs\HtmlNameAccessorTrait::htmlName</full_name>
        <default></default>
        <docblock line="61">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="61" description="&lt;p&gt;The HTML name we were given.&lt;/p&gt;" type="string" variable="$htmlName">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="31" package="Haldayne">
        <name>getMessage</name>
        <full_name>\Haldayne\Customs\SecurityConcernException::getMessage()</full_name>
        <docblock line="31">
          <description>Return the message specific for this exception code.</description>
          <long-description></long-description>
          <tag name="api" line="31" description=""/>
          <tag name="since" line="31" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="60" package="Haldayne">
        <name>getDiagnosticMessage</name>
        <full_name>\Haldayne\Customs\SecurityConcernException::getDiagnosticMessage()</full_name>
        <docblock line="60">
          <description>Returns a string containing details of the remote connection at the
time the security concern was raised.</description>
          <long-description>Knowing the remote connection and environment helps frame the context
of the problem: patterns of attack, duration, payload sizes. From this
data, you can better adapt your environment.

This method captures the session ID, IP address, and other environment
details into a string for foresnic diagnostics.</long-description>
          <tag name="return" line="60" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="api" line="60" description=""/>
          <tag name="since" line="60" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="53" package="Haldayne">
        <name>getHtmlName</name>
        <full_name>\Haldayne\Customs\HtmlNameAccessorTrait::getHtmlName()</full_name>
        <docblock line="53">
          <description>Get the HTML variable name.</description>
          <long-description></long-description>
          <tag name="return" line="53" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="api" line="53" description=""/>
          <tag name="since" line="53" description="1.0.0"/>
        </docblock>
        <inherited_from>\Haldayne\Customs\HtmlNameAccessorTrait</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>eJylVN9vGjkQfuevmIdUQERJe4/Q9hoFTo3aBgSk99CrNo49gJVde+XxhtBT/vcbe70LyeV0J50lWMsef/Pr++bdr+W27BhRIJVCInwSuRJ7g39cVORtQeNO5+z0tAOncA5UotRrLeFOGwV2DddlboWaPkgsvbZmBH6LUMVD0ARUUamlthUNGSBgXPougUNpiwKNQsUPhIe9rUDkZCG3mwhBSMR4cDkZwOUchFKOTwYggls2cAELzb121jCQh7V14aF2oLTYGEueo7wXeYVDWDEgNiEC50lig6AsEhjrA5I2Mq8UBgTiG/RC5xQxCWXltN8P4LbyMbQDUunsvVaMIhjUb60KL2JgD94J6bWJyRRDmD6IosxxlIpwc3MTPt7t4c+wCetEe3gPBnepppcenfDWjYPBI0jh5RZ6yxTOhTUSnWkLDyf40D+AoXPWZVzMHp+//rBBP2mr8rXOv9fvjxtzv3V2FyBqZ3WUZx2ZCyL4R5ecJbeQnnOgw1HwktaQh6vZKruef5mdT6YTTu/t+Oju+urz1ez3q+xiNpny3S9MtHAZyRbWKSzQV87EqjddaxlYN5w5duiHtAqHzduPotTtnrjBCG+Hb4Zv0tlZ/JbVbR6wKiMjAheqLU80qHMJi3Y6duAkOH39IfjqH11LwcQhL7jAo9Fx1qPWJCxXZ9QNlFzrHGEnIgmTZqIenK02W5jPlqtuKsnfHByX7l8cbFmJwkBl7ozdGZh/mjf6jCSJRTv2o3Atqty/iJpyT70YtyaPnfr/5f4FfZB3QQ3ceJaWCdtGZDxEQn8dFtZjMDBY90JEuTVQXheYJkNNx2Aa+Bgr6IQmVE3vmzefOeOkwZfweZQcT5At5iVr3onkKMTKFG/AUpys+dscixGUwrNCTUyAt0LeDUBVLFnGHvDtPtaY9E+kIfzmbBHZ2qAp4cUgjj3JzbnFgMVTTpRxFrrjwJ5ntQqkT/NG8oOKJ+N/m5nHqG0gqQ3aeHvoUxAX/5AMq+MwUOl5LB8TMepn/1d6L8yoZyJs3JXszq97TzjafUWjpgaZVu+/v6Ifg9T3LBQjnnQHTx5l2cWX8+Uyy54eH2B6/ac3J9lyuvg2XXzvLqZfZ6tpdj6ZLLo/Wpv+OGnhsfMXeMw+fA==</source>
  </file>
  <file path="boost/src/Contract/Jsonable.php" generated-path="boost.src.Contract.Jsonable.html" hash="9d44ae119de918bed5ae503ebcfaa745" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <interface namespace="Haldayne\Boost\Contract" line="4" package="Default">
      <name>Jsonable</name>
      <full_name>\Haldayne\Boost\Contract\Jsonable</full_name>
      <docblock line="4">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="4" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost\Contract" line="9" package="Default">
        <name>toJson</name>
        <full_name>\Haldayne\Boost\Contract\Jsonable::toJson()</full_name>
        <docblock line="9">
          <description>Return a JSON representation of the object.</description>
          <long-description></long-description>
        </docblock>
      </method>
    </interface>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="4" code="PPC:ERR-50009">No summary for interface ""</error>
    </parse_markers>
    <source>eJwtjTEOwjAMRXefwiNkoAcoEhIsqAOVYO3iBEcNKnaUuANC3B1a8Ze3vKe/P+Qxg9CTa6bAeKbpTi/h4ahabTipWKFgLUAS4xIXp6sq5CeGN+BvjXMr0eGVbS6ChN2tv2DhXLiyGFlSQY1oI6P6Bwfb/ZNmZZ79lALGWcKqmi4fm20LH/gC88czZw==</source>
  </file>
  <file path="customs/src/UploadFile.php" generated-path="customs.src.UploadFile.html" hash="73b4447fef1aa9f093568601affbac31" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <namespace-alias name="Mime">\Haldayne\Mime</namespace-alias>
    <class final="false" abstract="false" namespace="Haldayne\Customs" line="9" package="Haldayne">
      <extends/>
      <name>UploadFile</name>
      <full_name>\Haldayne\Customs\UploadFile</full_name>
      <docblock line="9">
        <description>Represents a file that has been successfully uploaded.</description>
        <long-description></long-description>
        <tag name="package" line="9" description="Haldayne"/>
      </docblock>
      <property static="false" visibility="protected" namespace="Haldayne\Customs" line="60" package="Haldayne">
        <name>$name</name>
        <full_name>\Haldayne\Customs\UploadFile::name</full_name>
        <default></default>
        <docblock line="60">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="Haldayne\Customs" line="61" package="Haldayne">
        <name>$file</name>
        <full_name>\Haldayne\Customs\UploadFile::file</full_name>
        <default></default>
        <docblock line="61">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="61" package="Haldayne">
        <name>$htmlName</name>
        <full_name>\Haldayne\Customs\HtmlNameAccessorTrait::htmlName</full_name>
        <default></default>
        <docblock line="61">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="61" description="&lt;p&gt;The HTML name we were given.&lt;/p&gt;" type="string" variable="$htmlName">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="34" package="Haldayne">
        <name>getClientFilename</name>
        <full_name>\Haldayne\Customs\UploadFile::getClientFilename()</full_name>
        <docblock line="34">
          <description>Get the file name the client gave us for this file, if any.</description>
          <long-description>Do not rely on this file name for anything but display, because you
cannot trust that it contains safe characters.</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="45" package="Haldayne">
        <name>getServerFile</name>
        <full_name>\Haldayne\Customs\UploadFile::getServerFile()</full_name>
        <docblock line="45">
          <description>Get the temporary file holding this upload. You must move this file
before the request ends to keep the upload.</description>
          <long-description></long-description>
          <tag name="see" line="45" description="" link="\Haldayne\Customs\UploadFile::moveTo"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="53" package="Haldayne">
        <name>getMimeAnalyzer</name>
        <full_name>\Haldayne\Customs\UploadFile::getMimeAnalyzer()</full_name>
        <docblock line="53">
          <description>Get the MIME analyzer for the file</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="53" package="Haldayne">
        <name>getHtmlName</name>
        <full_name>\Haldayne\Customs\HtmlNameAccessorTrait::getHtmlName()</full_name>
        <docblock line="53">
          <description>Get the HTML variable name.</description>
          <long-description></long-description>
          <tag name="return" line="53" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="api" line="53" description=""/>
          <tag name="since" line="53" description="1.0.0"/>
        </docblock>
        <inherited_from>\Haldayne\Customs\HtmlNameAccessorTrait</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="60" code="PPC:ERR-50007">No summary for property $name</error>
      <error line="61" code="PPC:ERR-50007">No summary for property $file</error>
    </parse_markers>
    <source>eJyFVE1vEzEQve+vmEMPbRSSe0uBKi1QiUDVhgNSpWp2M5s1eG3jj6AF+t8Z29lkm6pkLyuNZ968efPs129NYwqFLTmDFcFHlEvsFN3PgvO6dWdFEdwgPBctcWw6GhUwglsylhwp7wChFpLAN+ihQQclkQIXqoqcq4OUHQQjNS5pOeHKaVFJdA6+pth7riz+FMBfauZb+ZkZXaRibRcWheem8Tw1jt8IZpbQEzdW9At0+Z0qD7YnJNSKT0ZDAqMtg0R1ssHp4d4ZtNiC8zbWHjUbErBomNFi/gnWaAWWPGNUCyptuZPRahnTvebJhXsC3CMqbv63h1U9pLZiJRTKLFsMj4FlW4k161Z2DMc9pOBR9vF6qFQYoTy1Rlu0HTiya7IZ0qBvXuAllCfLvTeBafqbUEpRQR1U5YVW8PBQacW9QuWPt2qM8wTj3P0kFebFxe8o9nr1xpHvV7irPDnbT0tSnGfAZ4dphPO02vs7I6NDrlWtj3PfnP74zBIfyCfhtpoOZIQVron9BbW2O1HGIGpA1e274VKD0tFPbFwWY5ufUSMEF3GUF1EGD0vhjMRuzLavMHq406GHqlBFKFbS+Xw/hGf7KI9COXBYM8OGN1vxUtzkvztZkZ+lYaIekcnx/gos+WDVUOJDWu3ck+ZrtMyOjhPnCzOBbzpAG+m3ek07MXqokliQrLWln4E4kdTSRff9IDLpYAO1f+kc0eAROD2NDRb6kAh3yeex4oAAkeUhAebX8yveJsrud7w7yR00nO9FGvExvNgUvkQkOjjm3e8SnxKaws3tl8XVbHF1CRc31zlqrPb8nvFTNbgeg2Ce67H4B6nQwj0=</source>
  </file>
  <file path="customs/src/HtmlNameAccessorTrait.php" generated-path="customs.src.HtmlNameAccessorTrait.html" hash="99c846f2e4ec58a9cafad146fe4c0465" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <trait namespace="Haldayne\Customs" line="28" package="Haldayne">
      <name>HtmlNameAccessorTrait</name>
      <full_name>\Haldayne\Customs\HtmlNameAccessorTrait</full_name>
      <docblock line="28">
        <description>Accessor methods for the HTML name of a file upload.</description>
        <long-description>Every uploaded file has a name, given to it in the HTML form. The HTML
spec says the name qualifies as CDATA, so pretty much any character can
comprise an HTML variable name. However, the HTML name we have access
to is subject to PHP engine rules' name mangling.

In many cases, the HTML name returned matches the HTML name given, but
not in all cases:

Given in Form     |Returned from getHtmlName()   |Match?
------------------|------------------------------|------
foo               |foo                           |Yes
foo[bar]          |foo[bar]                      |Yes
foo[bar][baz_1]   |foo[bar][baz_1]               |Yes
foo_bar           |foo_bar                       |Yes
foo.bar           |foo_bar                       |No
foo bar           |foo_bar                       |No
foo[]             |foo[0]                        |No

As a rule of thumb, avoid using "." and " " in your HTML form names.
When using array syntax, prefer explicit naming your keys.</long-description>
        <tag name="package" line="28" description="Haldayne"/>
      </docblock>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="61" package="Haldayne">
        <name>$htmlName</name>
        <full_name>\Haldayne\Customs\HtmlNameAccessorTrait::htmlName</full_name>
        <default></default>
        <docblock line="61">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="61" description="&lt;p&gt;The HTML name we were given.&lt;/p&gt;" type="string" variable="$htmlName">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="53" package="Haldayne">
        <name>getHtmlName</name>
        <full_name>\Haldayne\Customs\HtmlNameAccessorTrait::getHtmlName()</full_name>
        <docblock line="53">
          <description>Get the HTML variable name.</description>
          <long-description></long-description>
          <tag name="return" line="53" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="api" line="53" description=""/>
          <tag name="since" line="53" description="1.0.0"/>
        </docblock>
      </method>
    </trait>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>eJydVW1P2zAQ/p5fcUJIG1VJ4evYBhVjtNKAinWbJoaQmziNN8fObKeQDf777pw3Gl60zZXa9HzP3XNP766v9/M0DxTLuM1ZxGHCZMxKxb8dFtbpzO4FwWgwCGAA4yji1moDGXepji0k+OxShMxPPgBFAJ0Ag0RIDkUuNYtDxBH0aMVNWdt4XHmkzKIzwYawFCuuwGkQDoTqgmKGLIR5/ZUi2ZxHYFlpvZNP+rNgUiSCYzgLh+/G8/EQrIbccOdKyIooBaZKiFJmWOS4gYgpChXpLDfCcrytsq2YEWwhq7AhTPQ1R97DXo3XRH2FKC8HBSLeFmyx+M4jR99mkxlwtRSKgykkty8qZMbUUgq1bFSZKjIhM2a57adB9oVRKFbGXJRy27v2ig1hUTiKpLTXjUlZBXtVZzj2uuLNexQS6NyeN3ETozNYcjdxmTzFkC+36PqEsu0TdvvBuX1oeuSasInWsH5uH5rWrr9yWwMvFsxcrgN7pueA+PbravfyPrAzPQG8Qq8e1Z7pCWD4b8BT3Wjzn7iL9SJ8hTtPCNPg/OTSpFEn0oC6tMgWQ2ArLWIoLPYjbIQbOAQxbOALm6XUhenmz/ebpZ6FLyl2UwVhxrASbKkcuxnSrCU4WPwmlyLCGUYIOflAP3jp0aPAGYZ3Tb8162RO1uB3QJT9pqEzgI/cdS2/Ppm1S+N5pmQJn/xumeJ4M4dryaa6kDHYOki1nHBAjBMJLgHQflZtVUwTyKU4xp5kP8VBjrsjA+sMlbWZ1iW0m+lxgnBQDTHSkElrEwpJKiZrw8h/5sUClYOkUJETmhDdXLbptrxrpRSdTSK8/bZl86Zjttc61RS8b2W9C/paH/+11m1FXonWynLRPqOi+DeyG+6EO8+WuLZ6epXdJ90VuE5/BLPz6efx/AjGs2lbEhwg/2d+qGaFX3NTL9GwJWjEijl+X8S74A9zEAJY</source>
  </file>
  <file path="customs/src/UploadError.php" generated-path="customs.src.UploadError.html" hash="7fd6641b8283289762470103dc2e5573" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Customs" line="15" package="Haldayne">
      <extends/>
      <name>UploadError</name>
      <full_name>\Haldayne\Customs\UploadError</full_name>
      <docblock line="15">
        <description>Represents a file that did not successfully upload.</description>
        <long-description>Errors occur when the *client* did something wrong. The possible causes are:
- The client did not upload a file.
- The client uploaded a partial, incomplete file.
- The client sent more bytes than either the form or the server allowed.</long-description>
        <tag name="see" line="15" description="which occurs when the server went wrong or the client&#10;appears to be circumventing PHP file upload safeguards." link="\Haldayne\Customs\UploadException"/>
        <tag name="package" line="15" description="Haldayne"/>
      </docblock>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="134" package="Haldayne">
        <name>$code</name>
        <full_name>\Haldayne\Customs\UploadError::code</full_name>
        <default></default>
        <docblock line="134">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="134" description="&lt;p&gt;The error code.&lt;/p&gt;" type="integer" variable="$code">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="137" package="Haldayne">
        <name>$size</name>
        <full_name>\Haldayne\Customs\UploadError::size</full_name>
        <default></default>
        <docblock line="137">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="137" description="&lt;p&gt;The size of the file uploaded.&lt;/p&gt;" type="integer" variable="$size">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="Haldayne\Customs" line="142" package="Haldayne">
        <name>$messages</name>
        <full_name>\Haldayne\Customs\UploadError::messages</full_name>
        <default>array(UPLOAD_ERR_INI_SIZE =&gt; 'The file size exceeds the server-allowed limit.', UPLOAD_ERR_FORM_SIZE =&gt; 'The file size exceeds the form-allowed upload limit.', UPLOAD_ERR_PARTIAL =&gt; 'The file was only partially uploaded.', UPLOAD_ERR_NO_FILE =&gt; 'No file was uploaded.')</default>
        <docblock line="142">
          <description>The possible failure codes and an English description.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="61" package="Haldayne">
        <name>$htmlName</name>
        <full_name>\Haldayne\Customs\HtmlNameAccessorTrait::htmlName</full_name>
        <default></default>
        <docblock line="61">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="61" description="&lt;p&gt;The HTML name we were given.&lt;/p&gt;" type="string" variable="$htmlName">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Haldayne\Customs" line="54" package="Haldayne">
        <name>changeErrorMessage</name>
        <full_name>\Haldayne\Customs\UploadError::changeErrorMessage()</full_name>
        <docblock line="54">
          <description>Change the text associated with a PHP upload error code.</description>
          <long-description>You may want to localize or otherwise change the generic error
associated with one of the upload error codes. You may only change
messages for the following upload error codes:

- UPLOAD_ERR_INI_SIZE (1) : The upload exceeds the `upload_max_filesize`
  directive.
- UPLOAD_ERR_FORM_SIZE (2) : The upload exceeds the `MAX_FILE_SIZE`
  directive in the HTML form.
- UPLOAD_ERR_PARTIAL (3) : The upload was incomplete.
- UPLOAD_ERR_NO_FILE (4) : No file was uploaded.</long-description>
          <tag name="param" line="54" description="&lt;p&gt;The code whose message you want to change.&lt;/p&gt;" type="integer" variable="$code">
            <type>integer</type>
          </tag>
          <tag name="param" line="54" description="&lt;p&gt;The new message for that code.&lt;/p&gt;" type="string" variable="$message">
            <type>string</type>
          </tag>
          <tag name="throws" line="54" description="If the given code does not have a message" type="\OutOfBoundsException">
            <type>\OutOfBoundsException</type>
          </tag>
          <tag name="api" line="54" description=""/>
          <tag name="since" line="54" description="1.0.0"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="70" package="Haldayne">
        <name>getErrorMessage</name>
        <full_name>\Haldayne\Customs\UploadError::getErrorMessage()</full_name>
        <docblock line="70">
          <description>Return a description of why the error occurred.</description>
          <long-description></long-description>
          <tag name="see" line="70" description="To adjust the message globally." link="\Haldayne\Customs\UploadError::changeErrorMessage"/>
          <tag name="api" line="70" description=""/>
          <tag name="since" line="70" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="88" package="Haldayne">
        <name>isTooBig</name>
        <full_name>\Haldayne\Customs\UploadError::isTooBig()</full_name>
        <docblock line="88">
          <description>Is the error because the uploaded file was too big?</description>
          <long-description>An upload may exceed either the `upload_max_filesize` setting or the
`MAX_FILE_SIZE` input. This method handles both cases and returns true
if either of these limits was reached. In such a case, the optional
pass-by-reference `$maximum` will indicate the maximum possible size.</long-description>
          <tag name="param" line="88" description="&lt;p&gt;The server or form allowed maximum file size, in bytes.&lt;/p&gt;" type="integer" variable="$maximum">
            <type>integer</type>
          </tag>
          <tag name="return" line="88" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="88" description=""/>
          <tag name="since" line="88" description="1.0.0"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$maximum</name>
          <default>null</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="109" package="Haldayne">
        <name>isPartial</name>
        <full_name>\Haldayne\Customs\UploadError::isPartial()</full_name>
        <docblock line="109">
          <description>Is the error because the uploaded file was only partially received?</description>
          <long-description></long-description>
          <tag name="param" line="109" description="&lt;p&gt;The number of bytes received.&lt;/p&gt;" type="integer" variable="$received">
            <type>integer</type>
          </tag>
          <tag name="return" line="109" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="109" description=""/>
          <tag name="since" line="109" description="1.0.0"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$received</name>
          <default>null</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="126" package="Haldayne">
        <name>notUploaded</name>
        <full_name>\Haldayne\Customs\UploadError::notUploaded()</full_name>
        <docblock line="126">
          <description>Is the error because no file was uploaded?</description>
          <long-description></long-description>
          <tag name="return" line="126" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="126" description=""/>
          <tag name="since" line="126" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="53" package="Haldayne">
        <name>getHtmlName</name>
        <full_name>\Haldayne\Customs\HtmlNameAccessorTrait::getHtmlName()</full_name>
        <docblock line="53">
          <description>Get the HTML variable name.</description>
          <long-description></long-description>
          <tag name="return" line="53" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="api" line="53" description=""/>
          <tag name="since" line="53" description="1.0.0"/>
        </docblock>
        <inherited_from>\Haldayne\Customs\HtmlNameAccessorTrait</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>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</source>
  </file>
  <file path="customs/src/UploadConfig.php" generated-path="customs.src.UploadConfig.html" hash="f732617d06412bf30d670148033538e6" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Customs" line="12" package="Haldayne">
      <extends/>
      <name>UploadConfig</name>
      <full_name>\Haldayne\Customs\UploadConfig</full_name>
      <docblock line="12">
        <description>Return information about the upload configuration.</description>
        <long-description>Some values come directly from the PHP configuration. Others are calculated
using the PHP configuration and run-time information.</long-description>
        <tag name="see" line="12" description="" link="http://php.net/manual/en/ini.core.php#ini.sect.file-uploads"/>
        <tag name="package" line="12" description="Haldayne"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Haldayne\Customs" line="23" package="Haldayne">
        <name>isEnabled</name>
        <full_name>\Haldayne\Customs\UploadConfig::isEnabled()</full_name>
        <docblock line="23">
          <description>Are file uploads enabled?</description>
          <long-description>Specified at the system level by the `file_uploads` ini directive.</long-description>
          <tag name="return" line="23" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="23" description=""/>
          <tag name="since" line="23" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Haldayne\Customs" line="40" package="Haldayne">
        <name>uploadWorkingPath</name>
        <full_name>\Haldayne\Customs\UploadConfig::uploadWorkingPath()</full_name>
        <docblock line="40">
          <description>In what directory will uploads be held for processing?</description>
          <long-description>Specified at the system level by the `upload_tmp_dir` ini directive.
If that directory isn't writeable, then PHP falls back to the system
temporary directory, which is specified at the system level by the
`sys_temp_dir` ini directive (and we can just ask `sys_get_temp_dir`).</long-description>
          <tag name="return" line="40" description="" type="string|null">
            <type>string</type>
            <type>null</type>
          </tag>
          <tag name="api" line="40" description=""/>
          <tag name="since" line="40" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Haldayne\Customs" line="65" package="Haldayne">
        <name>systemMaxUploadBytes</name>
        <full_name>\Haldayne\Customs\UploadConfig::systemMaxUploadBytes()</full_name>
        <docblock line="65">
          <description>What is the maximum file size supported system-wide?</description>
          <long-description>Controlled by the system-level directive `upload_max_filesize`, but
also constrained by the system-level directive `post_max_size`. The
*lower* of the two values defines the *upper* limit of the maximum
file size.

If the number of returned bytes equals `PHP_INT_MAX`, there is
effectively no limit.</long-description>
          <tag name="return" line="65" description="Bytes" type="integer">
            <type>integer</type>
          </tag>
          <tag name="api" line="65" description=""/>
          <tag name="since" line="65" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Haldayne\Customs" line="88" package="Haldayne">
        <name>formMaxUploadBytes</name>
        <full_name>\Haldayne\Customs\UploadConfig::formMaxUploadBytes()</full_name>
        <docblock line="88">
          <description>What is the maximum file size reported for the submitted form?</description>
          <long-description>If you include a hidden input element named `MAX_FILE_SIZE` in your
form, then all file inputs that come *after* that hidden input element
will be limited to the number of bytes given in the `MAX_FILE_SIZE`.

If the number of returned bytes equals `PHP_INT_MAX`, there is
effectively no limit.</long-description>
          <tag name="return" line="88" description="Bytes" type="integer">
            <type>integer</type>
          </tag>
          <tag name="api" line="88" description=""/>
          <tag name="since" line="88" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Haldayne\Customs" line="107" package="Haldayne">
        <name>maxFileUploads</name>
        <full_name>\Haldayne\Customs\UploadConfig::maxFileUploads()</full_name>
        <docblock line="107">
          <description>How many simultaneous file uploads do we support?</description>
          <long-description>If the number of returned uploads equals `PHP_INT_MAX`, there is
effectively no limit.</long-description>
          <tag name="return" line="107" description="Number of uploads" type="integer">
            <type>integer</type>
          </tag>
          <tag name="api" line="107" description=""/>
          <tag name="since" line="107" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="Haldayne\Customs" line="128" package="Haldayne">
        <name>limit</name>
        <full_name>\Haldayne\Customs\UploadConfig::limit()</full_name>
        <docblock line="128">
          <description>Given two values which follow the "0 or fewer is unlimited" pattern,
return the limiting number or PHP_INT_MAX if neither would limit.</description>
          <long-description></long-description>
          <tag name="param" line="128" description="" type="integer" variable="$a">
            <type>integer</type>
          </tag>
          <tag name="param" line="128" description="" type="integer" variable="$b">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$a</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$b</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>eJzdV1tv2zYUfvevOOiCxjYcOXtNE7RZka4G1tZosnXYBTIlUTEXitR4ieNt+e87JCVZkuV26LqX+SFWKPI7t+98hz5/Xq7LkSAF1SVJKbwmPCNbQX95abWRhX42Gs2n0xFM4T01VglgIpeqIIZJASSR1oBZU7AllySDVIqc3VrlX0d4yh28lgWFe8It1bgBnzOmaGr4FnIlC398+XrZOwvvcF1pIIpCSnhqOTE0c3BWM3E7fAqIyEBZcWIYmml5WrvyQlMKa2PKs/kc444ENfOCCEv4nIo5EyxKpaIRvvrK/aPRzShnnJ6E+DRizEcpJ1rD937lpTc/+nME+PGJcp8pXKLb7mCVGA1UkITT7Hm1od53XdKU5YxmQEIi9VYbWgCn95RDsvVrK4cUV0grjItVKWT3NKqR6u8XKtQpkZI3a6RkzTOmD+v8dXQanVZrc/9d2oSzFLTBjKWQW5H6lDJ9FVwfT/y2EKr7VIbGztIEnYpvqRkft309njzzux9H/fwsBGzWGHKIQ6otbBjnTbYSrBLlGWABoVQypdoV/fOSFzBjU5QxWjuUvkWOuzsOMS2ODWwUM9TFP3NownMuJ5yjjyS9AyNbhmssfCylIojRoM0wXJauERT0P/C6Rlrhu9jBDbgOY8f2jWsPAb9htwLRd+EEFmJ3ahL10lYzRBuFSf1LWP5FiBLy/EGqO0RdErPeI8wRugMX0FClW5maLO7Dchgz7VbH7tAEnj7F1MVNMcLqpIXdIqR7t4OquNd638/Q+CBLPzhGYMlclQrywApbhK7W7A/8Y0ssM6pSVcGTDcton6MoEEZJjv1TE7LaHMq9q2bNU7QTOxvOxGoGiTU1FOFaOr3DuhEmPg1YSm08nIeK4GbHqymXG6qmIHOPYDayFuiM5ogdQp5igG4XZwUz9d4qDzVSk44+yxZhu7BFQpU7HLLv3TZogP6OqqthhQ0VL97exG8uf1z5HkPlZLpGoXkewsFpIWTw5BCfmTDwjcP+EmwOSX1DHoLOe9w9Qs/ngERCqTXr4BrOKx3i25G+LgM+B+67bMVGxn7fuOmGTrmOJ61uONpR4+MQAxTyQHsd4IM9O/M+jxsPZ21Ln9kUilY94aTbs9MmaKRaKfrtgSzZSosxpdxmFAisWZZRV8sSbxaU04JiVd31JIMVUiR+tfjuKr5e/HTl1NCdVQ0TEb4SadTn4JKH0UHZ/dVjSnLjKO1XhmzVaH4c4RjyKULjldDv6BxYfIvUdAhh1HQd/J91hMvvJ/rByTZRimzjO7qN6QPTRo+PO1k5RpLFy3fXN4fUG31GKRqHTT/3Dv/a6opHLJmmwyCtFLYnwTChX8sNEllskcCF5YYIKq3u3t4y6QZtJfgDHD5Q1+by959U9m1jsLmd/vsqY0e/wshDlQcVDxOxJjhfTBhGOPMUXNu1REMt0VuXleZBe+LXytS/IPozOoC0ZM6fqZajcCRyEEOnw5C62NO24MisA9+WxBCRn617YTlbXh3ie6Jakh7Wen52N7d9G1Zd/zVrgfUUdw7L94sfLm+u4HK52CPtt154WoM73C9zvGognR0fn5wCSnBOcdA7ubaikrInUBLUYyVmNVblnzvk97jfVzWbVbuXXIMLyhxxYSMtXtCHSVoSRQrP0SMytJh0majYPf6426NilSeCOUoGeIi++MHrfiFWoc3CUMKSuKFUzSj/riNRp3COjrk7pX9KDigR4tTWu3xpW27Suuvnpnn7UuVso93zC7SLxo8S/3jAekfCetal8Ha6UVejeDDqj2klHtyF2RyoqPg4+hsQmt7b</source>
  </file>
  <file path="customs/src/UploadIterator.php" generated-path="customs.src.UploadIterator.html" hash="0f5ab4db3acba375232cba1bf72176c6" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Customs" line="11" package="Haldayne">
      <extends/>
      <implements>\ArrayAccess</implements>
      <implements>\SeekableIterator</implements>
      <implements>\Countable</implements>
      <name>UploadIterator</name>
      <full_name>\Haldayne\Customs\UploadIterator</full_name>
      <docblock line="11">
        <description>Implements an iterator over the $_FILES super-global or an array of
similar structure.</description>
        <long-description>Abstracts differences in `$_FILES` format, throws exceptions when abnormal
situations arise, and provides objects to work with the uploaded file.</long-description>
        <tag name="package" line="11" description="Haldayne"/>
      </docblock>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="192" package="Haldayne">
        <name>$input</name>
        <full_name>\Haldayne\Customs\UploadIterator::input</full_name>
        <default></default>
        <docblock line="192">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="192" description="&lt;p&gt;The $_FILES or similar array provided in ctor&lt;/p&gt;" type="array" variable="$input">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="194" package="Haldayne">
        <name>$files</name>
        <full_name>\Haldayne\Customs\UploadIterator::files</full_name>
        <default></default>
        <docblock line="194">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="194" description="&lt;p&gt;The internal array holding processed upload entities&lt;/p&gt;" type="array" variable="$files">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="196" package="Haldayne">
        <name>$index</name>
        <full_name>\Haldayne\Customs\UploadIterator::index</full_name>
        <default></default>
        <docblock line="196">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="196" description="&lt;p&gt;The pointer to the current index in the internal array&lt;/p&gt;" type="integer" variable="$index">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="26" package="Haldayne">
        <name>__construct</name>
        <full_name>\Haldayne\Customs\UploadIterator::__construct()</full_name>
        <docblock line="26">
          <description>Create a new UploadIterator.</description>
          <long-description>With no arguments, creates an iterator over the $_FILES super-global.
You may instead pass your own array having the same format as $_FILES.
If any of the files indicate a security concern or a server problem
that prevented their storage, then the constructor throws an exception.</long-description>
          <tag name="param" line="26" description="&lt;p&gt;An alternate $_FILES-like array to iterate over.&lt;/p&gt;" type="array" variable="$input">
            <type>array</type>
          </tag>
          <tag name="throws" line="26" description="" type="\Haldayne\Customs\UploadException">
            <type>\Haldayne\Customs\UploadException</type>
          </tag>
          <tag name="api" line="26" description=""/>
          <tag name="since" line="26" description="1.0.0"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$input</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="104" package="Haldayne">
        <name>current</name>
        <full_name>\Haldayne\Customs\UploadIterator::current()</full_name>
        <docblock line="104">
          <description>Returns the current upload entity within the iterator.</description>
          <long-description></long-description>
          <tag name="return" line="104" description="" type="\Haldayne\Customs\UploadFile|\Haldayne\Customs\UploadError">
            <type>\Haldayne\Customs\UploadFile</type>
            <type>\Haldayne\Customs\UploadError</type>
          </tag>
          <tag name="api" line="104" description=""/>
          <tag name="since" line="104" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="116" package="Haldayne">
        <name>key</name>
        <full_name>\Haldayne\Customs\UploadIterator::key()</full_name>
        <docblock line="116">
          <description>Returns the key of the current upload entity within the iterator.</description>
          <long-description></long-description>
          <tag name="return" line="116" description="" type="integer">
            <type>integer</type>
          </tag>
          <tag name="api" line="116" description=""/>
          <tag name="since" line="116" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="128" package="Haldayne">
        <name>next</name>
        <full_name>\Haldayne\Customs\UploadIterator::next()</full_name>
        <docblock line="128">
          <description>Advance the iterator to the next upload entity.</description>
          <long-description></long-description>
          <tag name="return" line="128" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="api" line="128" description=""/>
          <tag name="since" line="128" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="140" package="Haldayne">
        <name>rewind</name>
        <full_name>\Haldayne\Customs\UploadIterator::rewind()</full_name>
        <docblock line="140">
          <description>Rewind to the first element of the iterator.</description>
          <long-description></long-description>
          <tag name="return" line="140" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="api" line="140" description=""/>
          <tag name="since" line="140" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="152" package="Haldayne">
        <name>valid</name>
        <full_name>\Haldayne\Customs\UploadIterator::valid()</full_name>
        <docblock line="152">
          <description>Check if the current position within the iterator is valid.</description>
          <long-description></long-description>
          <tag name="return" line="152" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="152" description=""/>
          <tag name="since" line="152" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="166" package="Haldayne">
        <name>seek</name>
        <full_name>\Haldayne\Customs\UploadIterator::seek()</full_name>
        <docblock line="166">
          <description>Arbitrarily move the current position within the iterator.</description>
          <long-description></long-description>
          <tag name="param" line="166" description="&lt;p&gt;The position to access.&lt;/p&gt;" type="integer" variable="$position">
            <type>integer</type>
          </tag>
          <tag name="return" line="166" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="throws" line="166" description="" type="\OutOfBoundsException">
            <type>\OutOfBoundsException</type>
          </tag>
          <tag name="api" line="166" description=""/>
          <tag name="since" line="166" description="1.0.0"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$position</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="184" package="Haldayne">
        <name>count</name>
        <full_name>\Haldayne\Customs\UploadIterator::count()</full_name>
        <docblock line="184">
          <description>Return a count of upload entities within the iterator.</description>
          <long-description></long-description>
          <tag name="return" line="184" description="" type="integer">
            <type>integer</type>
          </tag>
          <tag name="api" line="184" description=""/>
          <tag name="since" line="184" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Customs" line="203" package="Haldayne">
        <name>import</name>
        <full_name>\Haldayne\Customs\UploadIterator::import()</full_name>
        <docblock line="203">
          <description>Import a structure purporting to be a valid $_FILES format into a flat
array of UploadFile or UploadError. Resolve all recursive structure and
reconstitue the HTML form name.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Customs" line="226" package="Haldayne">
        <name>names</name>
        <full_name>\Haldayne\Customs\UploadIterator::names()</full_name>
        <docblock line="226">
          <description>Using the "name" key in the input as a model, figure out all the
HTML names given in the original input.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Customs" line="262" package="Haldayne">
        <name>reducer</name>
        <full_name>\Haldayne\Customs\UploadIterator::reducer()</full_name>
        <docblock line="262">
          <description>Helper to `names`, which recursively traverses the iterator appending
new keys onto the base-so-far.</description>
          <long-description></long-description>
          <tag name="param" line="262" description="" type="\RecursiveArrayIterator" variable="$it">
            <type>\RecursiveArrayIterator</type>
          </tag>
          <tag name="param" line="262" description="" type="string" variable="$base">
            <type>string</type>
          </tag>
          <tag name="param" line="262" description="" type="array" variable="$names">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$it</name>
          <default></default>
          <type>\RecursiveArrayIterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$base</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$names</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Customs" line="282" package="Haldayne">
        <name>gather</name>
        <full_name>\Haldayne\Customs\UploadIterator::gather()</full_name>
        <docblock line="282">
          <description>Given an HTML name, gather all its information into a standard
info structure.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Customs" line="313" package="Haldayne">
        <name>wrap</name>
        <full_name>\Haldayne\Customs\UploadIterator::wrap()</full_name>
        <docblock line="313">
          <description>Wrap the file upload information in an appropriate object class, raising
an exception if one would be warranted by the error.</description>
          <long-description></long-description>
          <tag name="param" line="313" description="&lt;p&gt;The HTML form element name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="313" description="&lt;p&gt;The file upload information&lt;/p&gt;" type="array" variable="$info">
            <type>array</type>
          </tag>
          <tag name="return" line="313" description="" type="\Haldayne\Customs\UploadFile|\Haldayne\Customs\UploadError">
            <type>\Haldayne\Customs\UploadFile</type>
            <type>\Haldayne\Customs\UploadError</type>
          </tag>
          <tag name="throws" line="313" description="" type="\Haldayne\Customs\UploadException">
            <type>\Haldayne\Customs\UploadException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$info</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>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</source>
  </file>
  <file path="boost/src/functions/bytes.php" generated-path="boost.src.functions.bytes.html" hash="cd88e37dcbb860416d5a3cf0b72d5b0f" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <function namespace="Haldayne\Boost" line="28" package="Haldayne">
      <name>bytes</name>
      <full_name>\Haldayne\Boost\bytes()</full_name>
      <docblock line="28">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="28" description="Haldayne"/>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$string</name>
        <default></default>
        <type/>
      </argument>
    </function>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="28" code="PPC:ERR-50015">Argument $string is missing from the Docblock of bytes</error>
      <error line="28" code="PPC:ERR-50011">No summary for function \Haldayne\Boost\bytes()</error>
    </parse_markers>
    <source>eJyVk01r3DAQhu/+FXMo3fV2Y0OhoWQLLaWHHEPppRBYyfLsWsQeLfpoupT8944ka52UQqkultE7z7wzI334eBpOFckJ3UkqhFs59vJMeP/ZGOd3VdVuNhVsQGjy0J09urXzVtOxFnAFX9EHS+AHBApThxbMIatAE0jI0oYBkXF3ewe9UWFC8o6DpE+RglUjkoBDIOW1IbAJ6/7GjZznaPg2aE7GWhtwC4FGdDlQTF3WCMCfHslF8iATwfxAa3XfIy3ZvZnz/pFWDdJK5dG6Usd3E0BJAtSstBw1noFL0mljcrxIbp/VxKbPJlhQpmefxsa/CIugSbqHFNUFPforlmZT8MgZFkRwCOvYxHfN9Zv6ZnYjhIiftmXMA5ZIdhzkyH6UCWVyW7Z6lLZPLeLKHgdMBZRGzZilW9zW2KnRyH4+jhZeXpH7PG7p5sy7xVPcfXKIMHh/umlbvmkNoW8nSeytRWpLaU2ObVgBXy43pIzm35xSQVPsZpJ2KjjH7i4tLOeMbCt9gPVbeM2j0fsj+vXqgon6fdGu6hp+VcDrgskP4dX8EubTuOYbNHX77L1otrB632m/qndJ+lQ9AY7cy//kvoQusOo3dMVFvg==</source>
  </file>
  <file path="boost/src/functions/ini_size_to_bytes.php" generated-path="boost.src.functions.ini_size_to_bytes.html" hash="539c1ec1633e433c12d1b02ee093a2c4" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <function namespace="Haldayne\Boost" line="23" package="Haldayne">
      <name>ini_size_to_bytes</name>
      <full_name>\Haldayne\Boost\ini_size_to_bytes()</full_name>
      <docblock line="23">
        <description>`int ini_size_to_bytes(string)` - Convert a short-hand bytes specification
into integer bytes.</description>
        <long-description>Some PHP ini values (like `upload_max_filesize`) allow you to specify the
number of bytes in a short-hand, like "10M" or "1G". But, when you call
`ini_get` you'll get these actual short-hand values, instead of the byte
equivalent (which usually you want).

This function converts a super-set of documented short-hand into bytes:
  * An optional leading +
  * Number specification in hex, octal, or decimal
  * Kilo-, Mega-, Giga-, and Tera-bytes expressed using single or double
    characters in either lower or upper case: "k", "kB", "G", "Pb", etc.</long-description>
        <tag name="package" line="23" description="Haldayne"/>
        <tag name="param" line="23" description="&lt;p&gt;A value from an &lt;code&gt;ini_get&lt;/code&gt; call to process&lt;/p&gt;" type="string" variable="$string">
          <type>string</type>
        </tag>
        <tag name="return" line="23" description="Number of bytes the short-hand string represents" type="integer">
          <type>integer</type>
        </tag>
        <tag name="see" line="23" description="Documents the short-hand" link="http://php.net/manual/en/faq.using.php#faq.using.shorthandbytes"/>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$string</name>
        <default></default>
        <type>string</type>
      </argument>
    </function>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>eJyNVG2P2kYQ/u5fMaKVDBeDj/RyXKCozbXSRapSndR8jARrM+DVrXedfQmQKP+9M2vDAYnSInltdmeeZ+aZmf31t6ZqEi1qdI0oEd4KtRJ7jR/ujXF+liT51VUCV7CU2oPUcuHkZ1x4syj2Hl3feSv1ZrCEIfxh9Ce0HgS4ylg/rIReQbQC12Ap17IUXhrNaARmeMEN2tZmRNt88o+pER7fPjIXfBIqkHtfySeEZWiUEatFLXaLtVTIgSwHIJQyW9ibAATZEu3BV8hgOtQFEZh1F4fUZ9FlEIF74+t3PTCWPh56I7gPPoNthTqCloTf5S8XG/RL3k2VAvpmGocgSh+EOs26jTsjPudRrDgAMo1BMBZ+DJJMkBTtbytZVhAcIah9ZNwK7QcHOd5X0sE66JKVg7KV2HEWoUE7dBQEga9MGWqCw9VpFFHkmPiUoYCeNxpMw1AUr6LIqHbw4nD4d6vWWbFYsgp3GZjSC5WxSis6roU6eP0llRlm8A43gl4PMr6Y/j1aMWx1x11j0TkKLzim5EVhBDOhUNhiAZSVsKQm2lgqlCSaBSov19BCaChlKojDKfSeehkt97w+8PJY0Iq+PAj3e0NQNbT9CT937zdtaWBtTU1BnlSV68wd1FhTUqgRwqIPliXwB22OncTlPJG6g7fIeVIhWn+HCJX3zTTPachGGn1eC02VzlHna/FxFNUY0dlPz/8iKoO2RH92pb2kJII8OTbGt4PZZTxIviSsbJ4DKllLLTxSG9WNwp30+ylsDE9QK3K0PEg156S8iQdHNLoPOrQtUu106kk4SyNQmECTr/fHrkpfpFwz3vJWSBX3ijSDlTUN51JfsCn6qA9EGfsT27mJvTAp0pOAutmAgvoj7sk19K9hPo+JNMadOF7v0sEAWmUiRXdRzLnW1CHPpuPbLoqvpB/N+o9A/y/m3Tnkf7sc7I+51kF52dB9wcnS9aJBCeefxyfaua30dLX0XSgI5pl+OD6Lk+cJUp9Oj/RXcxhfv379ajy+fTmZTG5nUFgUT7MLl82ly+SXyc347uXNjG2+61JfutzcvWL89vddl6dLlw7/G5dOnW5mO5dZ8jX5F2EoJi0=</source>
  </file>
  <file path="boost/src/functions/remote_ip.php" generated-path="boost.src.functions.remote_ip.html" hash="f0f22bf522d6fbb72b3ba34b3b3a6c8c" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <function namespace="Haldayne\Boost" line="20" package="Haldayne">
      <name>remote_ip</name>
      <full_name>\Haldayne\Boost\remote_ip()</full_name>
      <docblock line="20">
        <description>Return the IPv4 or v6 address of the connecting client.</description>
        <long-description>The connecting client might be a proxy. If you care to know the IP of the
client using the proxy, you must rely upon proxy-provided headers: **which
can be spoofed**.

If you want a reliable IP that may not uniquely represent the actual
connecting client, use this function. But if you want a less reliable,
though often more accurate proxy-client IP address, use the `header_ip`
function.</long-description>
        <tag name="package" line="20" description="Haldayne"/>
        <tag name="return" line="20" description="The connecting client IP, up to 45 ASCII characters&#10;long or null if using the CLI SAPI." type="null|string">
          <type>null</type>
          <type>string</type>
        </tag>
        <tag name="see" line="20" description="" link="http://stackoverflow.com/a/3003233/2908724"/>
      </docblock>
    </function>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>eJxtku1r2zAQxr/7r7gPg24mjUOSvbWDNW0DM2wsOGVftpGq8jkSlXWaXpKZdv/7JMfZ2KjBBnO65/ndc3r33giTadaiM4wjfGCqZp3Gb5dEzp9nWZHnGeRQoQ9WgxcI5Wo3B7KwewWsri06B9T0FU5aI/dSb4EridqPY2vqvnmqCK3cCg93CAyMpZ/dGMoGOgrAmUXwBPea9oPlYJHEhu7gklSq9s2jvrMNzoNF1UEwpA+V0/jdyRprEMhqtO4M8nwvJBe9GtMJwRmiBus8PyIPKHsWrViSlOxO9SResMjOOtAUKbT8EZKfRROjSGAJiXEfmOr1/x97FMnjdEI6aIKOFdJjuAwe5D+OKuV6tB0lJS8obEUMwqOGlmxy4cEyPyRwOgQTEYe9HK0Qbg+jb6S5TVJ/jNNPei/sYb86KPXovE24Ty+tXEVVk7YzfwmL9VVZAhfMxoFjsklKUTwcr0eSSjP93dPVxxLWi1XZu144RBDem7OicJ7xe9qhbRTtx5zaghWzyWQ2nc2K6dvJm9fTeWwpsiN2zKUlj3Ga5y+yhwziM/A/26yX1Zdl9fWkWn76fLPcLK6vq5Pv59mv7DcHu/dE</source>
  </file>
  <file path="boost/src/Map.php" generated-path="boost.src.Map.html" hash="e62864a27bb56f87ad4066e36f858067" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <namespace-alias name="Arrayable">\Haldayne\Boost\Contract\Arrayable</namespace-alias>
    <namespace-alias name="Jsonable">\Haldayne\Boost\Contract\Jsonable</namespace-alias>
    <class final="false" abstract="false" namespace="Haldayne\Boost" line="35" package="Haldayne">
      <extends/>
      <implements>\Countable</implements>
      <implements>\Haldayne\Boost\Contract\Arrayable</implements>
      <implements>\Haldayne\Boost\Contract\Jsonable</implements>
      <implements>\ArrayAccess</implements>
      <implements>\IteratorAggregate</implements>
      <name>Map</name>
      <full_name>\Haldayne\Boost\Map</full_name>
      <docblock line="35">
        <description>An improvement on PHP associative arrays.</description>
        <long-description>Sports a fluent interface accepting callables to drive array operations,
similar in spirit to jQuery. Supports keys of any type: scalars, even
arrays and objects!  Used in place of `array ()` and `[]`, your code will
be easier to write *and* read.

In the API, a formal variable named `$collection` must be one of:
  - Haldayne\Boost\Map
  - Haldayne\Boost\Contract\Arrayable
  - Haldayne\Boost\Contract\Jsonable
  - \Traversable
  - object
  - array

In the API, a formal variable named `$code` must be either a callable or
a string representing actual PHP code. When giving a string, be mindful:
user-supplied string code is a security risk, and string code you write is
checked only at run-time. Also, be mindful that these strings can contain
`$v` and `$k`, which represent the value and key being passed in.

In the API, a formal variable named `$key` may be of *any* type.

As much as possible, method names were chosen to reflect synonymous usage in
the PHP engine itself. When not possible or relevant, the names may reflect
usage from Laravel.</long-description>
        <tag name="package" line="35" description="Haldayne"/>
      </docblock>
      <constant namespace="Haldayne\Boost" line="42" package="Haldayne">
        <name>LOOSE</name>
        <full_name>\Haldayne\Boost\Map::LOOSE</full_name>
        <value>true</value>
        <docblock line="42">
          <description>Should the comparison be made loosely?</description>
          <long-description></long-description>
          <tag name="see" line="42" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="42" description="" link="\Haldayne\Boost\Map::intersect"/>
        </docblock>
      </constant>
      <constant namespace="Haldayne\Boost" line="49" package="Haldayne">
        <name>STRICT</name>
        <full_name>\Haldayne\Boost\Map::STRICT</full_name>
        <value>false</value>
        <docblock line="49">
          <description>Should the comparison be made strictly?</description>
          <long-description></long-description>
          <tag name="see" line="49" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="49" description="" link="\Haldayne\Boost\Map::intersect"/>
        </docblock>
      </constant>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="497" package="Haldayne">
        <name>$array</name>
        <full_name>\Haldayne\Boost\Map::array</full_name>
        <default>array()</default>
        <docblock line="497">
          <description>The internal array representation of the map.</description>
          <long-description></long-description>
          <tag name="var" line="497" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="503" package="Haldayne">
        <name>$guard</name>
        <full_name>\Haldayne\Boost\Map::guard</full_name>
        <default>null</default>
        <docblock line="503">
          <description>The guard code protecting sets.</description>
          <long-description></long-description>
          <tag name="var" line="503" description="" type="callable|string|null" variable="">
            <type>callable</type>
            <type>string</type>
            <type>null</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="509" package="Haldayne">
        <name>$map_code_to_callable</name>
        <full_name>\Haldayne\Boost\Map::map_code_to_callable</full_name>
        <default>array()</default>
        <docblock line="509">
          <description>Track string code we've made into callables.</description>
          <long-description></long-description>
          <tag name="var" line="509" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="515" package="Haldayne">
        <name>$map_key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::map_key_to_hash</full_name>
        <default>array()</default>
        <docblock line="515">
          <description>Track hashes we've created for non-string keys.</description>
          <long-description></long-description>
          <tag name="var" line="515" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="63" package="Haldayne">
        <name>__construct</name>
        <full_name>\Haldayne\Boost\Map::__construct()</full_name>
        <docblock line="63">
          <description>Create a new map.</description>
          <long-description>Initialize the map with the given collection, if any. Accepts any kind
of collection: array, object, Traversable, another Map, etc. Optionally,
wrap every key,value sets into the map with the given guard code: if the
guard code fails, the set will throw an exception.</long-description>
          <tag name="param" line="63" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="63" description="" type="callable" variable="$guard">
            <type>callable</type>
          </tag>
          <tag name="throws" line="63" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default>null</default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$guard</name>
          <default>null</default>
          <type>callable</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="91" package="Haldayne">
        <name>find</name>
        <full_name>\Haldayne\Boost\Map::find()</full_name>
        <docblock line="91">
          <description>Return a new map containing only members of this map that pass the callable.</description>
          <long-description>An all-purpose "grep". You give a function deciding whether an element is
in or out, and this returns a new map of those that are in. Ex, find the
odd numbers:

```
$nums = new Map(range(0, 3));
$odds = $m-&gt;find('return 1 == ($v % 2);');
```</long-description>
          <tag name="param" line="91" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="91" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="110" package="Haldayne">
        <name>first</name>
        <full_name>\Haldayne\Boost\Map::first()</full_name>
        <docblock line="110">
          <description>Return a new map containing the first N elements matching the callable.</description>
          <long-description>Like `grep`, but stop after finding N elements.

```
$nums = new Map(range(0, 3));
$odds = $m-&gt;all('return 1 == ($v % 2);');
```</long-description>
          <tag name="param" line="110" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="110" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="110" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="132" package="Haldayne">
        <name>last</name>
        <full_name>\Haldayne\Boost\Map::last()</full_name>
        <docblock line="132">
          <description>Return a new map containing the last N elements matching the callable.</description>
          <long-description>Like `grep`, but stop after finding N elements.

```
$nums = new Map(range(0, 3));
$odds = $m-&gt;all('return 1 == ($v % 2);');
```</long-description>
          <tag name="param" line="132" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="132" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="132" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="145" package="Haldayne">
        <name>every</name>
        <full_name>\Haldayne\Boost\Map::every()</full_name>
        <docblock line="145">
          <description>Test if every element satisfies the callable.</description>
          <long-description></long-description>
          <tag name="bool" line="145" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="155" package="Haldayne">
        <name>some</name>
        <full_name>\Haldayne\Boost\Map::some()</full_name>
        <docblock line="155">
          <description>Test if at least one element satisfies the callable.</description>
          <long-description></long-description>
          <tag name="bool" line="155" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="165" package="Haldayne">
        <name>none</name>
        <full_name>\Haldayne\Boost\Map::none()</full_name>
        <docblock line="165">
          <description>Test if no element satisifes the callable.</description>
          <long-description></long-description>
          <tag name="bool" line="165" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="178" package="Haldayne">
        <name>contains</name>
        <full_name>\Haldayne\Boost\Map::contains()</full_name>
        <docblock line="178">
          <description>Determine if a key exists the map.</description>
          <long-description>This is the object method equivalent of the magic isset($map[$key]);</long-description>
          <tag name="param" line="178" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="178" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="194" package="Haldayne">
        <name>get</name>
        <full_name>\Haldayne\Boost\Map::get()</full_name>
        <docblock line="194">
          <description>Get the value corresponding to the given key.</description>
          <long-description>If the key does not exist in the map, return the default.

This is the object method equivalent of the magic $map[$key].</long-description>
          <tag name="param" line="194" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="194" description="" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="194" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="211" package="Haldayne">
        <name>set</name>
        <full_name>\Haldayne\Boost\Map::set()</full_name>
        <docblock line="211">
          <description>Set a key and its corresponding value into the map.</description>
          <long-description>This is the object method equivalent of the magic $map[$key] = 'foo'.</long-description>
          <tag name="param" line="211" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="211" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="211" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="225" package="Haldayne">
        <name>forget</name>
        <full_name>\Haldayne\Boost\Map::forget()</full_name>
        <docblock line="225">
          <description>Remove a key and its corresponding value from the map.</description>
          <long-description>This is the object method equivalent of the magic unset($map[$key]);</long-description>
          <tag name="param" line="225" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="225" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="236" package="Haldayne">
        <name>isEmpty</name>
        <full_name>\Haldayne\Boost\Map::isEmpty()</full_name>
        <docblock line="236">
          <description>Determine if any key and their values have been set into the map.</description>
          <long-description></long-description>
          <tag name="return" line="236" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="253" package="Haldayne">
        <name>diff</name>
        <full_name>\Haldayne\Boost\Map::diff()</full_name>
        <docblock line="253">
          <description>Return a new map containing those keys and values that are not present in
the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose values match will
be removed.  Otherwise, comparison is strict, and elements whose keys
and values match will be removed.</long-description>
          <tag name="param" line="253" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="253" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="253" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="273" package="Haldayne">
        <name>intersect</name>
        <full_name>\Haldayne\Boost\Map::intersect()</full_name>
        <docblock line="273">
          <description>Return a new map containing those keys and values that are present in
the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose value match will
be included.  Otherise, comparison is strict, and elements whose keys &amp;
values match will be included.</long-description>
          <tag name="param" line="273" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="273" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="273" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="298" package="Haldayne">
        <name>walk</name>
        <full_name>\Haldayne\Boost\Map::walk()</full_name>
        <docblock line="298">
          <description>Execute the given code over each element of the map. The code receives
the value and then the key as formal parameters.</description>
          <long-description>The items are walked in the order they exist in the map. If the code
returns boolean false, then the iteration halts. Values can be modified
from within the callback, but not keys.

Example:
```
$map-&gt;each(function (&amp;$value, $key) { $value++; return true; })-&gt;sum();
$map-&gt;each('$v++; return true;')-&gt;sum();
```</long-description>
          <tag name="param" line="298" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="298" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="315" package="Haldayne">
        <name>walk_backward</name>
        <full_name>\Haldayne\Boost\Map::walk_backward()</full_name>
        <docblock line="315">
          <description>Like `walk`, except walk from the end toward the front.</description>
          <long-description></long-description>
          <tag name="param" line="315" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="315" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="342" package="Haldayne">
        <name>partition</name>
        <full_name>\Haldayne\Boost\Map::partition()</full_name>
        <docblock line="342">
          <description>Returns a new map, where elements from this map have been placed into
new map elements. The return value of the code determines the key for
each new bucket.</description>
          <long-description>The code is called for each item in the map. The code receives the value
and key, respectively.  The code may return a scalar key and that scalar
becomes the key for a new map, into which that element is placed. If the
code returns a non-scalar, it explodes.</long-description>
          <tag name="param" line="342" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="342" description="" type="\Haldayne\Boost\MapOfMaps">
            <type>\Haldayne\Boost\MapOfMaps</type>
          </tag>
          <tag name="throws" line="342" description="" type="\UnexpectedValueException">
            <type>\UnexpectedValueException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="368" package="Haldayne">
        <name>count</name>
        <full_name>\Haldayne\Boost\Map::count()</full_name>
        <docblock line="368">
          <description>Count the number of items in the map.</description>
          <long-description></long-description>
          <tag name="return" line="368" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="380" package="Haldayne">
        <name>toArray</name>
        <full_name>\Haldayne\Boost\Map::toArray()</full_name>
        <docblock line="380">
          <description>Copy this map into an array, recursing as necessary to convert contained
collections into arrays.</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Arrayable::toArray()" refers="\Haldayne\Boost\Contract\Arrayable::toArray()" link="/classes/Haldayne.Boost.Contract.Arrayable.html#method_toArray"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="395" package="Haldayne">
        <name>toJson</name>
        <full_name>\Haldayne\Boost\Map::toJson()</full_name>
        <docblock line="395">
          <description>Return a JSON representation of the object.</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Jsonable::toJson()" refers="\Haldayne\Boost\Contract\Jsonable::toJson()" link="/classes/Haldayne.Boost.Contract.Jsonable.html#method_toJson"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="409" package="Haldayne">
        <name>offsetExists</name>
        <full_name>\Haldayne\Boost\Map::offsetExists()</full_name>
        <docblock line="409">
          <description>Determine if a value exists at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="409" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="409" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="421" package="Haldayne">
        <name>offsetGet</name>
        <full_name>\Haldayne\Boost\Map::offsetGet()</full_name>
        <docblock line="421">
          <description>Get a value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="421" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="421" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="439" package="Haldayne">
        <name>offsetSet</name>
        <full_name>\Haldayne\Boost\Map::offsetSet()</full_name>
        <docblock line="439">
          <description>Set the value at a given key.</description>
          <long-description>If key is null, the value is appended to the array using numeric indexes.
If the map was constructed with a set guard, then pass the value to the
guard. If the guard fails, the set throws an exception.</long-description>
          <tag name="param" line="439" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="439" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="439" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="throws" line="439" description="" type="\UnexpectedValueException">
            <type>\UnexpectedValueException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="471" package="Haldayne">
        <name>offsetUnset</name>
        <full_name>\Haldayne\Boost\Map::offsetUnset()</full_name>
        <docblock line="471">
          <description>Unset the value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="471" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="471" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="484" package="Haldayne">
        <name>getIterator</name>
        <full_name>\Haldayne\Boost\Map::getIterator()</full_name>
        <docblock line="484">
          <description>Get an iterator for a copy of the map.</description>
          <long-description></long-description>
          <tag name="return" line="484" description="" type="\ArrayIterator">
            <type>\ArrayIterator</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="525" package="Haldayne">
        <name>collection_to_array</name>
        <full_name>\Haldayne\Boost\Map::collection_to_array()</full_name>
        <docblock line="525">
          <description>Give me a native PHP array, regardless of what kind of collection-like
structure is given.</description>
          <long-description></long-description>
          <tag name="param" line="525" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Traversable|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|object|array" variable="$items">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="return" line="525" description="" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="525" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="558" package="Haldayne">
        <name>call</name>
        <full_name>\Haldayne\Boost\Map::call()</full_name>
        <docblock line="558">
          <description>Calls the given code with the given value and key as first &amp; second argument.</description>
          <long-description></long-description>
          <tag name="param" line="558" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="558" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="param" line="558" description="" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="throws" line="558" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="578" package="Haldayne">
        <name>code_to_callable</name>
        <full_name>\Haldayne\Boost\Map::code_to_callable()</full_name>
        <docblock line="578">
          <description>Return a callable from the given code, if possible.</description>
          <long-description>When you give a callable, this returns immediately. When you give a
string, caches and returns an anonymous function created from that
string code. Otherwise, it explodes.

If given a string, then the value is passed in by-reference, allowing
that code to update the value.  Updating keys would induce undefined
behavior on iterations, so we don't allow that.</long-description>
          <tag name="param" line="578" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="throws" line="578" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="603" package="Haldayne">
        <name>passes</name>
        <full_name>\Haldayne\Boost\Map::passes()</full_name>
        <docblock line="603">
          <description>Decide if the given value is considered "passing" or "failing".</description>
          <long-description></long-description>
          <tag name="param" line="603" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="603" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="615" package="Haldayne">
        <name>key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::key_to_hash()</full_name>
        <docblock line="615">
          <description>Lookup the hash for the given key. If a hash does not yet exist, one is
created.</description>
          <long-description></long-description>
          <tag name="param" line="615" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="615" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="650" package="Haldayne">
        <name>hash_to_key</name>
        <full_name>\Haldayne\Boost\Map::hash_to_key()</full_name>
        <docblock line="650">
          <description>Lookup the key for the given hash.</description>
          <long-description></long-description>
          <tag name="param" line="650" description="" type="string" variable="$hash">
            <type>string</type>
          </tag>
          <tag name="return" line="650" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$hash</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="676" package="Haldayne">
        <name>grep</name>
        <full_name>\Haldayne\Boost\Map::grep()</full_name>
        <docblock line="676">
          <description>Finds elements for which the given code passes, optionally limited to a
maximum count.</description>
          <long-description>If limit is null, no limit on number of matches. If limit is positive,
return that many from the front of the array. If limit is negative,
return that many from the end of the array.</long-description>
          <tag name="param" line="676" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="676" description="" type="integer|null" variable="$limit">
            <type>integer</type>
            <type>null</type>
          </tag>
          <tag name="return" line="676" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$limit</name>
          <default>null</default>
          <type>integer|null</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="145" code="PPC:ERR-50015">Argument $code is missing from the Docblock of every</error>
      <error line="155" code="PPC:ERR-50015">Argument $code is missing from the Docblock of some</error>
      <error line="165" code="PPC:ERR-50015">Argument $code is missing from the Docblock of none</error>
      <error line="395" code="PPC:ERR-50015">Argument $options is missing from the Docblock of toJson</error>
    </parse_markers>
    <source>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</source>
  </file>
  <file path="boost/src/MapOfMaps.php" generated-path="boost.src.MapOfMaps.html" hash="c0c03832600acd76a691f3d0860b91d9" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Boost" line="7" package="Haldayne">
      <extends>\Haldayne\Boost\Map</extends>
      <name>MapOfMaps</name>
      <full_name>\Haldayne\Boost\MapOfMaps</full_name>
      <docblock line="7">
        <description>Implements a map of maps.</description>
        <long-description>Sports a fluent interface accepting callables to drive array operations,
similar in spirit to jQuery. Supports keys of any type: scalars, even
arrays and objects!  Used in place of `array ()` and `[]`, your code will
be easier to write *and* read.

In the API, a formal variable named `$collection` must be one of:
  - Haldayne\Boost\Map
  - Haldayne\Boost\Contract\Arrayable
  - Haldayne\Boost\Contract\Jsonable
  - \Traversable
  - object
  - array

In the API, a formal variable named `$code` must be either a callable or
a string representing actual PHP code. When giving a string, be mindful:
user-supplied string code is a security risk, and string code you write is
checked only at run-time. Also, be mindful that these strings can contain
`$v` and `$k`, which represent the value and key being passed in.

In the API, a formal variable named `$key` may be of *any* type.

As much as possible, method names were chosen to reflect synonymous usage in
the PHP engine itself. When not possible or relevant, the names may reflect
usage from Laravel.</long-description>
        <tag name="package" line="7" description="Haldayne"/>
        <tag name="inherited_from" description="\Haldayne\Boost\Map" refers="\Haldayne\Boost\Map" link="/classes/Haldayne.Boost.Map.html"/>
      </docblock>
      <constant namespace="Haldayne\Boost" line="42" package="Haldayne">
        <name>LOOSE</name>
        <full_name>\Haldayne\Boost\Map::LOOSE</full_name>
        <value>true</value>
        <docblock line="42">
          <description>Should the comparison be made loosely?</description>
          <long-description></long-description>
          <tag name="see" line="42" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="42" description="" link="\Haldayne\Boost\Map::intersect"/>
        </docblock>
      </constant>
      <constant namespace="Haldayne\Boost" line="49" package="Haldayne">
        <name>STRICT</name>
        <full_name>\Haldayne\Boost\Map::STRICT</full_name>
        <value>false</value>
        <docblock line="49">
          <description>Should the comparison be made strictly?</description>
          <long-description></long-description>
          <tag name="see" line="49" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="49" description="" link="\Haldayne\Boost\Map::intersect"/>
        </docblock>
      </constant>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="497" package="Haldayne">
        <name>$array</name>
        <full_name>\Haldayne\Boost\Map::array</full_name>
        <default>array()</default>
        <docblock line="497">
          <description>The internal array representation of the map.</description>
          <long-description></long-description>
          <tag name="var" line="497" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="503" package="Haldayne">
        <name>$guard</name>
        <full_name>\Haldayne\Boost\Map::guard</full_name>
        <default>null</default>
        <docblock line="503">
          <description>The guard code protecting sets.</description>
          <long-description></long-description>
          <tag name="var" line="503" description="" type="callable|string|null" variable="">
            <type>callable</type>
            <type>string</type>
            <type>null</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="509" package="Haldayne">
        <name>$map_code_to_callable</name>
        <full_name>\Haldayne\Boost\Map::map_code_to_callable</full_name>
        <default>array()</default>
        <docblock line="509">
          <description>Track string code we've made into callables.</description>
          <long-description></long-description>
          <tag name="var" line="509" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="515" package="Haldayne">
        <name>$map_key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::map_key_to_hash</full_name>
        <default>array()</default>
        <docblock line="515">
          <description>Track hashes we've created for non-string keys.</description>
          <long-description></long-description>
          <tag name="var" line="515" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="12" package="Haldayne">
        <name>__construct</name>
        <full_name>\Haldayne\Boost\MapOfMaps::__construct()</full_name>
        <docblock line="12">
          <description>Create a new map of maps.</description>
          <long-description>Initialize the map with the given collection, if any. Accepts any kind
of collection: array, object, Traversable, another Map, etc. Optionally,
wrap every key,value sets into the map with the given guard code: if the
guard code fails, the set will throw an exception.</long-description>
          <tag name="inherited_from" description="\Haldayne\Boost\Map::__construct()" refers="\Haldayne\Boost\Map::__construct()" link="/classes/Haldayne.Boost.Map.html#method___construct"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default>null</default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="23" package="Haldayne">
        <name>guard</name>
        <full_name>\Haldayne\Boost\MapOfMaps::guard()</full_name>
        <docblock line="23">
          <description>Ensure the given thing is a Map.</description>
          <long-description></long-description>
          <tag name="param" line="23" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="23" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="63" package="Haldayne">
        <name>__construct</name>
        <full_name>\Haldayne\Boost\Map::__construct()</full_name>
        <docblock line="63">
          <description>Create a new map.</description>
          <long-description>Initialize the map with the given collection, if any. Accepts any kind
of collection: array, object, Traversable, another Map, etc. Optionally,
wrap every key,value sets into the map with the given guard code: if the
guard code fails, the set will throw an exception.</long-description>
          <tag name="param" line="63" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="63" description="" type="callable" variable="$guard">
            <type>callable</type>
          </tag>
          <tag name="throws" line="63" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default>null</default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$guard</name>
          <default>null</default>
          <type>callable</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="91" package="Haldayne">
        <name>find</name>
        <full_name>\Haldayne\Boost\Map::find()</full_name>
        <docblock line="91">
          <description>Return a new map containing only members of this map that pass the callable.</description>
          <long-description>An all-purpose "grep". You give a function deciding whether an element is
in or out, and this returns a new map of those that are in. Ex, find the
odd numbers:

```
$nums = new Map(range(0, 3));
$odds = $m-&gt;find('return 1 == ($v % 2);');
```</long-description>
          <tag name="param" line="91" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="91" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="110" package="Haldayne">
        <name>first</name>
        <full_name>\Haldayne\Boost\Map::first()</full_name>
        <docblock line="110">
          <description>Return a new map containing the first N elements matching the callable.</description>
          <long-description>Like `grep`, but stop after finding N elements.

```
$nums = new Map(range(0, 3));
$odds = $m-&gt;all('return 1 == ($v % 2);');
```</long-description>
          <tag name="param" line="110" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="110" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="110" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="132" package="Haldayne">
        <name>last</name>
        <full_name>\Haldayne\Boost\Map::last()</full_name>
        <docblock line="132">
          <description>Return a new map containing the last N elements matching the callable.</description>
          <long-description>Like `grep`, but stop after finding N elements.

```
$nums = new Map(range(0, 3));
$odds = $m-&gt;all('return 1 == ($v % 2);');
```</long-description>
          <tag name="param" line="132" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="132" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="132" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="145" package="Haldayne">
        <name>every</name>
        <full_name>\Haldayne\Boost\Map::every()</full_name>
        <docblock line="145">
          <description>Test if every element satisfies the callable.</description>
          <long-description></long-description>
          <tag name="bool" line="145" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="155" package="Haldayne">
        <name>some</name>
        <full_name>\Haldayne\Boost\Map::some()</full_name>
        <docblock line="155">
          <description>Test if at least one element satisfies the callable.</description>
          <long-description></long-description>
          <tag name="bool" line="155" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="165" package="Haldayne">
        <name>none</name>
        <full_name>\Haldayne\Boost\Map::none()</full_name>
        <docblock line="165">
          <description>Test if no element satisifes the callable.</description>
          <long-description></long-description>
          <tag name="bool" line="165" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="178" package="Haldayne">
        <name>contains</name>
        <full_name>\Haldayne\Boost\Map::contains()</full_name>
        <docblock line="178">
          <description>Determine if a key exists the map.</description>
          <long-description>This is the object method equivalent of the magic isset($map[$key]);</long-description>
          <tag name="param" line="178" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="178" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="194" package="Haldayne">
        <name>get</name>
        <full_name>\Haldayne\Boost\Map::get()</full_name>
        <docblock line="194">
          <description>Get the value corresponding to the given key.</description>
          <long-description>If the key does not exist in the map, return the default.

This is the object method equivalent of the magic $map[$key].</long-description>
          <tag name="param" line="194" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="194" description="" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="194" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="211" package="Haldayne">
        <name>set</name>
        <full_name>\Haldayne\Boost\Map::set()</full_name>
        <docblock line="211">
          <description>Set a key and its corresponding value into the map.</description>
          <long-description>This is the object method equivalent of the magic $map[$key] = 'foo'.</long-description>
          <tag name="param" line="211" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="211" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="211" description="" type="\Haldayne\Boost\MapOfMaps">
            <type>\Haldayne\Boost\MapOfMaps</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="225" package="Haldayne">
        <name>forget</name>
        <full_name>\Haldayne\Boost\Map::forget()</full_name>
        <docblock line="225">
          <description>Remove a key and its corresponding value from the map.</description>
          <long-description>This is the object method equivalent of the magic unset($map[$key]);</long-description>
          <tag name="param" line="225" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="225" description="" type="\Haldayne\Boost\MapOfMaps">
            <type>\Haldayne\Boost\MapOfMaps</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="236" package="Haldayne">
        <name>isEmpty</name>
        <full_name>\Haldayne\Boost\Map::isEmpty()</full_name>
        <docblock line="236">
          <description>Determine if any key and their values have been set into the map.</description>
          <long-description></long-description>
          <tag name="return" line="236" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="253" package="Haldayne">
        <name>diff</name>
        <full_name>\Haldayne\Boost\Map::diff()</full_name>
        <docblock line="253">
          <description>Return a new map containing those keys and values that are not present in
the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose values match will
be removed.  Otherwise, comparison is strict, and elements whose keys
and values match will be removed.</long-description>
          <tag name="param" line="253" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="253" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="253" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="273" package="Haldayne">
        <name>intersect</name>
        <full_name>\Haldayne\Boost\Map::intersect()</full_name>
        <docblock line="273">
          <description>Return a new map containing those keys and values that are present in
the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose value match will
be included.  Otherise, comparison is strict, and elements whose keys &amp;
values match will be included.</long-description>
          <tag name="param" line="273" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="273" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="273" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="298" package="Haldayne">
        <name>walk</name>
        <full_name>\Haldayne\Boost\Map::walk()</full_name>
        <docblock line="298">
          <description>Execute the given code over each element of the map. The code receives
the value and then the key as formal parameters.</description>
          <long-description>The items are walked in the order they exist in the map. If the code
returns boolean false, then the iteration halts. Values can be modified
from within the callback, but not keys.

Example:
```
$map-&gt;each(function (&amp;$value, $key) { $value++; return true; })-&gt;sum();
$map-&gt;each('$v++; return true;')-&gt;sum();
```</long-description>
          <tag name="param" line="298" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="298" description="" type="\Haldayne\Boost\MapOfMaps">
            <type>\Haldayne\Boost\MapOfMaps</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="315" package="Haldayne">
        <name>walk_backward</name>
        <full_name>\Haldayne\Boost\Map::walk_backward()</full_name>
        <docblock line="315">
          <description>Like `walk`, except walk from the end toward the front.</description>
          <long-description></long-description>
          <tag name="param" line="315" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="315" description="" type="\Haldayne\Boost\MapOfMaps">
            <type>\Haldayne\Boost\MapOfMaps</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="342" package="Haldayne">
        <name>partition</name>
        <full_name>\Haldayne\Boost\Map::partition()</full_name>
        <docblock line="342">
          <description>Returns a new map, where elements from this map have been placed into
new map elements. The return value of the code determines the key for
each new bucket.</description>
          <long-description>The code is called for each item in the map. The code receives the value
and key, respectively.  The code may return a scalar key and that scalar
becomes the key for a new map, into which that element is placed. If the
code returns a non-scalar, it explodes.</long-description>
          <tag name="param" line="342" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="342" description="" type="\Haldayne\Boost\MapOfMaps">
            <type>\Haldayne\Boost\MapOfMaps</type>
          </tag>
          <tag name="throws" line="342" description="" type="\UnexpectedValueException">
            <type>\UnexpectedValueException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="368" package="Haldayne">
        <name>count</name>
        <full_name>\Haldayne\Boost\Map::count()</full_name>
        <docblock line="368">
          <description>Count the number of items in the map.</description>
          <long-description></long-description>
          <tag name="return" line="368" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="380" package="Haldayne">
        <name>toArray</name>
        <full_name>\Haldayne\Boost\Map::toArray()</full_name>
        <docblock line="380">
          <description>Copy this map into an array, recursing as necessary to convert contained
collections into arrays.</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Arrayable::toArray()" refers="\Haldayne\Boost\Contract\Arrayable::toArray()" link="/classes/Haldayne.Boost.Contract.Arrayable.html#method_toArray"/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="395" package="Haldayne">
        <name>toJson</name>
        <full_name>\Haldayne\Boost\Map::toJson()</full_name>
        <docblock line="395">
          <description>Return a JSON representation of the object.</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Jsonable::toJson()" refers="\Haldayne\Boost\Contract\Jsonable::toJson()" link="/classes/Haldayne.Boost.Contract.Jsonable.html#method_toJson"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>0</default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="409" package="Haldayne">
        <name>offsetExists</name>
        <full_name>\Haldayne\Boost\Map::offsetExists()</full_name>
        <docblock line="409">
          <description>Determine if a value exists at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="409" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="409" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="421" package="Haldayne">
        <name>offsetGet</name>
        <full_name>\Haldayne\Boost\Map::offsetGet()</full_name>
        <docblock line="421">
          <description>Get a value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="421" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="421" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="439" package="Haldayne">
        <name>offsetSet</name>
        <full_name>\Haldayne\Boost\Map::offsetSet()</full_name>
        <docblock line="439">
          <description>Set the value at a given key.</description>
          <long-description>If key is null, the value is appended to the array using numeric indexes.
If the map was constructed with a set guard, then pass the value to the
guard. If the guard fails, the set throws an exception.</long-description>
          <tag name="param" line="439" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="439" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="439" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="throws" line="439" description="" type="\UnexpectedValueException">
            <type>\UnexpectedValueException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="471" package="Haldayne">
        <name>offsetUnset</name>
        <full_name>\Haldayne\Boost\Map::offsetUnset()</full_name>
        <docblock line="471">
          <description>Unset the value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="471" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="471" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="484" package="Haldayne">
        <name>getIterator</name>
        <full_name>\Haldayne\Boost\Map::getIterator()</full_name>
        <docblock line="484">
          <description>Get an iterator for a copy of the map.</description>
          <long-description></long-description>
          <tag name="return" line="484" description="" type="\ArrayIterator">
            <type>\ArrayIterator</type>
          </tag>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="525" package="Haldayne">
        <name>collection_to_array</name>
        <full_name>\Haldayne\Boost\Map::collection_to_array()</full_name>
        <docblock line="525">
          <description>Give me a native PHP array, regardless of what kind of collection-like
structure is given.</description>
          <long-description></long-description>
          <tag name="param" line="525" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Traversable|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|object|array" variable="$items">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="return" line="525" description="" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="525" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="558" package="Haldayne">
        <name>call</name>
        <full_name>\Haldayne\Boost\Map::call()</full_name>
        <docblock line="558">
          <description>Calls the given code with the given value and key as first &amp; second argument.</description>
          <long-description></long-description>
          <tag name="param" line="558" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="558" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="param" line="558" description="" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="throws" line="558" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="578" package="Haldayne">
        <name>code_to_callable</name>
        <full_name>\Haldayne\Boost\Map::code_to_callable()</full_name>
        <docblock line="578">
          <description>Return a callable from the given code, if possible.</description>
          <long-description>When you give a callable, this returns immediately. When you give a
string, caches and returns an anonymous function created from that
string code. Otherwise, it explodes.

If given a string, then the value is passed in by-reference, allowing
that code to update the value.  Updating keys would induce undefined
behavior on iterations, so we don't allow that.</long-description>
          <tag name="param" line="578" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="throws" line="578" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="603" package="Haldayne">
        <name>passes</name>
        <full_name>\Haldayne\Boost\Map::passes()</full_name>
        <docblock line="603">
          <description>Decide if the given value is considered "passing" or "failing".</description>
          <long-description></long-description>
          <tag name="param" line="603" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="603" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="615" package="Haldayne">
        <name>key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::key_to_hash()</full_name>
        <docblock line="615">
          <description>Lookup the hash for the given key. If a hash does not yet exist, one is
created.</description>
          <long-description></long-description>
          <tag name="param" line="615" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="615" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="650" package="Haldayne">
        <name>hash_to_key</name>
        <full_name>\Haldayne\Boost\Map::hash_to_key()</full_name>
        <docblock line="650">
          <description>Lookup the key for the given hash.</description>
          <long-description></long-description>
          <tag name="param" line="650" description="" type="string" variable="$hash">
            <type>string</type>
          </tag>
          <tag name="return" line="650" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$hash</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="676" package="Haldayne">
        <name>grep</name>
        <full_name>\Haldayne\Boost\Map::grep()</full_name>
        <docblock line="676">
          <description>Finds elements for which the given code passes, optionally limited to a
maximum count.</description>
          <long-description>If limit is null, no limit on number of matches. If limit is positive,
return that many from the front of the array. If limit is negative,
return that many from the end of the array.</long-description>
          <tag name="param" line="676" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="676" description="" type="integer|null" variable="$limit">
            <type>integer</type>
            <type>null</type>
          </tag>
          <tag name="return" line="676" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$limit</name>
          <default>null</default>
          <type>integer|null</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="12" code="PPC:ERR-50015">Argument $collection is missing from the Docblock of __construct</error>
    </parse_markers>
    <source>eJx9UE1PwzAMvedX+DBpWzXR+wZiAiHBAfEDAE1e6raREifKxxhC+++kKeVQCXyII9vv+T1f37reCUZDwaEkeETd4CfT2521Ie6EqKtKQAVPxmkyxDEAgkEHth1SuMrNWkiNIcAzupc2PwHoHImbUhFfAnIUmiEquPeEkTIN08eMqgzUJbt01EpCm1hGZRkOB2k5RJ9kXC2k1ZrG+g1w0npdMOOqgkaftW63f6A28AqL2KuwgWWX0DdLeF/vCvoi5nofOCRPEHuCTp2I809xB2q4RDY4yZ7G93k3GjDqTA0sTqgT/bY8xeQZjtZqQv7Xb5G1GvFzdz80YxNUNogsKZ8xy5lcXMQ36NOLAQ==</source>
  </file>
  <file path="boost/src/Lambda/Factory.php" generated-path="boost.src.Lambda.Factory.html" hash="3ebaf349e05913491be3686df1d548c3" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Boost\Lambda" line="49" package="Haldayne">
      <extends/>
      <name>Factory</name>
      <full_name>\Haldayne\Boost\Lambda\Factory</full_name>
      <docblock line="49">
        <description>Manufactures a lambda from a string.</description>
        <long-description>In PHP, a callable can be a function name (as a string), a class or object
method specification (as an array [object|string, string], an anonymous
function (via create_function), or a closure (function () { ... }). Sadly,
the syntax for these callable methods may dwarf the meat of the code to
run:

```
uasort($array, '$_0 &lt;=&gt; $_1');
// vs.
uasort($array, function ($a, $b) { return $a &lt;=&gt; $b; });
```

This class makes possible wrapping expressions in anonymous functions in a
reasonably performant manner. Libraries wanting to support concise
expressions as arguments to their functions can then use this class to
produce that effect:

```
use Haldayne\Boost\Lambda\Factory;
class Collection {
    // callable|string $expression
    public function filter($expression) {
        $fn = Factory::fromExpression($expression);
        return $this-&gt;filterByCallable($fn);
    }
}

$c = new Collection(['bee', 'bear', 'goose']);
var_dump(
   $c-&gt;filter('strlen($_0) &lt; 4'),
   $c-&gt;filter(function ($x) { return strlen($x) &lt; 4; })
   // same results, just different compactness
);
```</long-description>
        <tag name="see" line="49" description="" link="http://php.net/manual/en/language.types.callable.php"/>
        <tag name="see" line="49" description="" link="https://linepogl.wordpress.com/2011/07/09/on-the-syntax-of-closures-in-php/"/>
        <tag name="see" line="49" description="" link="http://justafewlines.com/2009/10/whats-wrong-with-php-closures/"/>
        <tag name="see" line="49" description="" link="https://wiki.php.net/rfc/short_closures"/>
        <tag name="see" line="49" description="" link="http://docs.hhvm.com/manual/en/hack.lambda.php"/>
        <tag name="see" line="49" description="" link="https://linepogl.wordpress.com/2011/08/04/short-closures-for-php-an-implementation/"/>
        <tag name="package" line="49" description="Haldayne"/>
      </docblock>
      <property static="true" visibility="private" namespace="Haldayne\Boost\Lambda" line="95" package="Haldayne">
        <name>$map</name>
        <full_name>\Haldayne\Boost\Lambda\Factory::map</full_name>
        <default>array()</default>
        <docblock line="95">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Haldayne\Boost\Lambda" line="70" package="Haldayne">
        <name>fromExpression</name>
        <full_name>\Haldayne\Boost\Lambda\Factory::fromExpression()</full_name>
        <docblock line="70">
          <description>Creates a callable returning the given expression.</description>
          <long-description>If the expression is already callable, returns it untouched. If the
expression is a string, a closure will be wrapped around the string
returning it as a single line. In this case, the first nine positional
arguments are available as $_0, $_1, ... $_9.

```
$lt = Factory::fromExpression('$_0 &lt; $_1');
var_dump($lt(0, 1)); // true
var_dump($lt(1, 0)); // false
var_dump($lt());     // false (null not less than null)
var_dump($lt(-1));   // true (-1 is less than null)
```</long-description>
          <tag name="param" line="70" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="throws" line="70" description="When $expression not of expected type" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="95" code="PPC:ERR-50007">No summary for property $map</error>
    </parse_markers>
    <source>eJyVVm1v2zYQ/u5fcQM0WA5kyem6tU3abm3RoQE6INiK7UNSuLRE2WwoUiApO0aX/747Um+xkwLTF1P03XN3z73p5a/1pp4oVnFbs5zDByYLtlf8+q3W1l1/ZNWqYOeTSXZyMoET+IOppmS5awy3wED6v6E0usI364xQ6xTlSPRCweWHywTvcyYlW0mOBwUrjjdlo3IntAIyDDGzvfbMK0hmLWgDevWV547QKu42ugBb81yUImde2ysqYMawPVwF4X8DTtLifU68hNJqX+nGElRvPN4KtGU4c3zZXaJ9tEsuaItBQjxIz+AbpGkKd7MU/mKF3CeE5jYc7F45dgslauKr5UPEwW0LFTpY7JgpvXyFJkGHc64LDk4TlGnUWUvely9f6KdhVhsXRz7CBKbRcgEvX72GaHk6nZ2TRJbB1qYPyA5+RyyBaEXeG46JUxCxALI6x1jOB3N0+rQRtuW/YjeY5FpbKyiUnWF1jYwCv60x+xaxLYgRt73JcO0j4uiUQib2UHOD/FRMOQRWipsUPoqVYUagkR1eE7TTYJu6xjiQF5ULywllbJAybtZNxZWzJI4UCjOyTCWGdwoaTIMbggkM10YXTU5/YAJ4WWK9HDJuH+mB69+x7LXZe74C5jstJQ8kf6NbejAfXfLbSoRo8L+TqpuVFPmQo1JIx008kpwNkPREpYJX0LpwdkYN976Xvad3PlbrEk5EzF8HK2/371oHY0Qd5O/ocNeyEeVoTvHdKMb4arrifIpVuOLM0O8a6eHTzwFiy8yyaKo6bvGivDMYT5EIydHN5WIGL+HpdJYcC43q9XZUq53qrdekgm1VkWhLwwPjbqSzCXxtrINCYFINFgfWT4UDzSmkhTQO6/w3yzlsnKvPsgwnYKq4y7AuGyYzrjLJ1Lpha566fc1t2mU0pVk5VraoLYXitV7LdKdN4dOQou3syeL0NFs8yxYvMq3mWJLzMCXmupy3w8XOhZojZHboEIXCSr4j6A4NcU4X2Q4L1853Rqv1fCfchtR7uOzIt524EWkXninzzG6wt5adwqHdQuc23Wy2lbc50LFh+U0aZv3/p+B5tnga7A5x4yTwnjM1F1UtObWzH+kUQjYJ7dVW+wQbgfJNC4ieE3jnR7Ydb5ZQLX6E4Exdiy1OgKEp0lazA7gIo3cQAJwTTCJsse8xkxYUp5mDRjnd5BtepK1yB3WAAd32GTbITkhJW8/PT17g+NKNKsLe8MId1BADGgwrEV8wOKI3pX0a5hmz6Bupl8JgyaMGpyktiD8mO7RhSjJ0gm2ZCEwhMPZhQisk8essWr445Me3SThG0n1n8ISF1K+joNJPAtSN0dLpbHZO7epMwx+UQUcWrUzJpH1YiATavvdCEKsGiVXageQ04Dc4+elq9qD6/DQAtH4AXlDCHlEdEdD9/lYzw6rvD/dW0m2M3lm4vlBbJkXxps3E+9uc137E/UMLaqTpo8DvAbzBWYs1QmOnhcsmo4VhqUvGe+PxPeDVQuvQI0qIhV3m/egfic5GcuOtMYjgB2D35x1wYr/FCyx8F40kfwjfaMsbvl/yW2GdHaskbVxnZ1HF6iMAesYCVyPVz1icB19w8ZEyPVSpryjHvvL705P+9FN/ehpOU0gfQ/q5l/2lPz3rT8/70wt/gikkDyO1RMdo6l45pIDtND3S6Vqsy8RDSXuUqOMU3mfZF61f+Y/WbWxrzLYrjxmedrL3wojpExcrGX60M6hoPffzGr+UQ+lMj6lZc0dax9Xc8zAiIpBwF4LD5r788+LvN5/ew5vLi3CHLm+xPLrWIV6wZq6Qj7vJfyyr/EE=</source>
  </file>
  <package name="Default" full_name="Default"/>
  <package name="Haldayne" full_name="Haldayne"/>
  <package name="global" full_name="global"/>
  <namespace name="Haldayne" full_name="Haldayne">
    <namespace name="Boost" full_name="Haldayne\Boost">
      <namespace name="Contract" full_name="Haldayne\Boost\Contract"/>
      <namespace name="Lambda" full_name="Haldayne\Boost\Lambda"/>
    </namespace>
    <namespace name="Customs" full_name="Haldayne\Customs"/>
  </namespace>
  <deprecated count="0"/>
</project>
