<?xml version="1.0" encoding="utf-8"?>
<project title="Haldayne PHP Componentry" version="2.8.5">
  <partials/>
  <file path="customs/src/UploadException.php" generated-path="customs.src.UploadException.html" hash="8e792e362b7e7230be6f8e65edcdcf66" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Customs" line="4" package="Default">
      <extends>\RuntimeException</extends>
      <name>UploadException</name>
      <full_name>\Haldayne\Customs\UploadException</full_name>
      <docblock line="4">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="4" description="Default"/>
      </docblock>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="4" code="PPC:ERR-50005">No summary for class \Haldayne\Customs\UploadException</error>
    </parse_markers>
    <source>eJw9yTEKgDAMAMA9r8g/FBxEcBbcuoQ2YKFNA0mhIv7dzVtvXvRSEKpsSpFxp5LoFg5rN2/VJoBYyAxPLY3SNiKr5ybIw1mSYTi6eK78Dzzwwgd5kx/k</source>
  </file>
  <file path="boost/src/Arrayable.php" generated-path="boost.src.Arrayable.html" hash="e64f162d7869faba45837c236c8466cc" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>eJyzsS/IKODKS8xNLS5ITE5V8EjMSUmszEuNcUksSQwuKSpNLiktSrXm4srMK0ktSgMq4QIA4kcScg==</source>
  </file>
  <file path="boost/src/Contract/Arrayable.php" generated-path="boost.src.Contract.Arrayable.html" hash="7f7c51100037144d3e52566dd96cb54e" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <interface namespace="Haldayne\Boost\Contract" line="4" package="Default">
      <name>Arrayable</name>
      <full_name>\Haldayne\Boost\Contract\Arrayable</full_name>
      <docblock line="4">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="4" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost\Contract" line="9" package="Default">
        <name>toArray</name>
        <full_name>\Haldayne\Boost\Contract\Arrayable::toArray()</full_name>
        <docblock line="9">
          <description>Return a native PHP array representation of the object.</description>
          <long-description></long-description>
        </docblock>
      </method>
    </interface>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="4" code="PPC:ERR-50009">No summary for interface ""</error>
    </parse_markers>
    <source>eJwtjbEOgkAQRPv9ii2VQj4AE6M2lISaZjmXgMHdy95iQoz/Llyc5hXzJnO+xDGC0ItTpMBY0/ygVbi7qSbv7ipuFLwCmMTZht25mtFK/czwAdxSFkUmFtiyLyZIKOTTm7GpG6RdR+NonFh8K1RQB/SRUfsnBz/952VmXPp5CjgsErLqmg8Pxwq+8AMxFDjF</source>
  </file>
  <file path="boost/src/Contract/Jsonable.php" generated-path="boost.src.Contract.Jsonable.html" hash="9d44ae119de918bed5ae503ebcfaa745" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <interface namespace="Haldayne\Boost\Contract" line="4" package="Default">
      <name>Jsonable</name>
      <full_name>\Haldayne\Boost\Contract\Jsonable</full_name>
      <docblock line="4">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="4" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost\Contract" line="9" package="Default">
        <name>toJson</name>
        <full_name>\Haldayne\Boost\Contract\Jsonable::toJson()</full_name>
        <docblock line="9">
          <description>Return a JSON representation of the object.</description>
          <long-description></long-description>
        </docblock>
      </method>
    </interface>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="4" code="PPC:ERR-50009">No summary for interface ""</error>
    </parse_markers>
    <source>eJwtjTEOwjAMRXefwiNkoAcoEhIsqAOVYO3iBEcNKnaUuANC3B1a8Ze3vKe/P+Qxg9CTa6bAeKbpTi/h4ahabTipWKFgLUAS4xIXp6sq5CeGN+BvjXMr0eGVbS6ChN2tv2DhXLiyGFlSQY1oI6P6Bwfb/ZNmZZ79lALGWcKqmi4fm20LH/gC88czZw==</source>
  </file>
  <file path="customs/src/UploadFile.php" generated-path="customs.src.UploadFile.html" hash="dd0110d45cecbae5f843aa373c143974" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <namespace-alias name="Mime">\Haldayne\Mime</namespace-alias>
    <class final="false" abstract="false" namespace="Haldayne\Customs" line="9" package="Haldayne">
      <extends>\Haldayne\Customs\AbstractUploadEntity</extends>
      <name>UploadFile</name>
      <full_name>\Haldayne\Customs\UploadFile</full_name>
      <docblock line="9">
        <description>Represents a file that has been successfully uploaded.</description>
        <long-description></long-description>
        <tag name="package" line="9" description="Haldayne"/>
        <tag name="inherited_from" description="\Haldayne\Customs\AbstractUploadEntity" refers="\Haldayne\Customs\AbstractUploadEntity" link="/classes/Haldayne.Customs.AbstractUploadEntity.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="Haldayne\Customs" line="58" package="Haldayne">
        <name>$name</name>
        <full_name>\Haldayne\Customs\UploadFile::name</full_name>
        <default></default>
        <docblock line="58">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="Haldayne\Customs" line="59" package="Haldayne">
        <name>$file</name>
        <full_name>\Haldayne\Customs\UploadFile::file</full_name>
        <default></default>
        <docblock line="59">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="Haldayne\Customs" line="37" package="Haldayne">
        <name>$htmlName</name>
        <full_name>\Haldayne\Customs\AbstractUploadEntity::htmlName</full_name>
        <default></default>
        <docblock line="37">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="32" package="Haldayne">
        <name>getClientFilename</name>
        <full_name>\Haldayne\Customs\UploadFile::getClientFilename()</full_name>
        <docblock line="32">
          <description>Get the file name the client gave us for this file, if any.</description>
          <long-description>Do not rely on this file name for anything but display, because you
cannot trust that it contains safe characters.</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="43" package="Haldayne">
        <name>getServerFile</name>
        <full_name>\Haldayne\Customs\UploadFile::getServerFile()</full_name>
        <docblock line="43">
          <description>Get the temporary file holding this upload. You must move this file
before the request ends to keep the upload.</description>
          <long-description></long-description>
          <tag name="see" line="43" description="" link="\Haldayne\Customs\UploadFile::moveTo"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="51" package="Haldayne">
        <name>getMimeAnalyzer</name>
        <full_name>\Haldayne\Customs\UploadFile::getMimeAnalyzer()</full_name>
        <docblock line="51">
          <description>Get the MIME analyzer for the file</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="9" package="Haldayne">
        <name>__construct</name>
        <full_name>\Haldayne\Customs\AbstractUploadEntity::__construct()</full_name>
        <docblock line="9">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$htmlName</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Customs\AbstractUploadEntity</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="30" package="Haldayne">
        <name>getHtmlName</name>
        <full_name>\Haldayne\Customs\AbstractUploadEntity::getHtmlName()</full_name>
        <docblock line="30">
          <description>Get the HTML variable name for this upload.</description>
          <long-description>This name approximates the originally given name, like:
  &lt;input type='file' name='file[a]' /&gt;

But in some cases the exact name cannot be returned.  First, because
PHP mangles HTML names containing '.' or ' ', these will map:
  * foo.bar returned as "foo_bar"
  * foo bar returned as "foo_bar"
  * foo_bar returned as "foo_bar"
  * foo[bar.baz] returned as "foo[bar.baz]"

Second, if the auto-append syntax was given:
  * foo[] returned as "foo[0]", etc.</long-description>
        </docblock>
        <inherited_from>\Haldayne\Customs\AbstractUploadEntity</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="58" code="PPC:ERR-50007">No summary for property $name</error>
      <error line="59" code="PPC:ERR-50007">No summary for property $file</error>
    </parse_markers>
    <source>eJyFVE1vEzEQve+vmEMPbRSSe0qBKg1QiUBFwwGpUjW7mWQNXtv4I7BA/ztjO5tsAyV7WWk8897M8xs/f2lqUyhsyBmsCN6iXGKr6G4anNeNOy+K4HrhuWiIY+PBoIABfCRjyZHyDhBWQhL4Gj3U6KAkUuBCVZFzqyBlC8FIjUtajrhyXFQSnYNPKfY6VtIPT2rp4LJ03mLl89FMeeHb4lcB/CXW+A1gagk9Maui76DLL1R5sF03Qq35ZNBnH+zoU5+jLU4H98qgxQaYOdae1L6R71kTWNQ8+2L+DjZoBZbcZpQKKm2ZyWi1jOle89jCPQLuEBWT/+5gVQeprVgLhTJrFsNDYM3WYsOilS3DMYcUPMohXgeVCiOUp8Zoi7YFR3ZDNkMa9PUTfQnlyTL3NjBOfxNKKSpYBVV5oRXc31daMVeo/OlOjWGeYJjZz1JhvpgEgZb7nUz+WXp2vss7iT09e5G0uMiIfx2mGS7S3d7dGhn9ca1W+jQT5/SH4tATb8gn5Xai9nSENW4IAouh7V6VIYgVoGoP7XClQeloKLYtq7HLz6gRgos4yjdRBg9L4YzEdsimrzCuS6tDB1WhilCsh/N5O4Rn/yiPQjlwuOIOa4yGJ+tG/72UNflpGibqETs5PbwDSz5Y1Zf4mFZ7+6T5ai2zpePEeWNG8FkHaGL7jd7QXowOqiQWJGtt6VsgTkyLzPb7SmTSwRbqcOscUe8JmEwiwUIfE+E2GT1WHBEgdnlMgPn1fMa3ibL9GZcnuYP68z3ZRnwKL7eFTzUSHRzz7vaJjxsaw83HD4vZdDG7gsub6xw1Vnt+0Pit6q1HL5jneij+ADDjw/0=</source>
  </file>
  <file path="customs/src/UploadError.php" generated-path="customs.src.UploadError.html" hash="ba85560108e188117aa57f1238caf14e" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Customs" line="14" package="Haldayne">
      <extends>\Haldayne\Customs\AbstractdUploadEntity</extends>
      <name>UploadError</name>
      <full_name>\Haldayne\Customs\UploadError</full_name>
      <docblock line="14">
        <description>Represents a file that did not successfully upload.</description>
        <long-description>Errors occur when the client did something wrong. The possible causes are:
- The client did not upload a file.
- The client uploaded a partial, incomplete file.
- The client sent more bytes than either the form or the server allowed.</long-description>
        <tag name="see" line="14" description="which occurs when the server went wrong or a the client is breaking in" link="\Haldayne\Customs\UploadException"/>
        <tag name="package" line="14" description="Haldayne"/>
      </docblock>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="132" package="Haldayne">
        <name>$code</name>
        <full_name>\Haldayne\Customs\UploadError::code</full_name>
        <default></default>
        <docblock line="132">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="132" description="&lt;p&gt;The error code.&lt;/p&gt;" type="integer" variable="$code">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="135" package="Haldayne">
        <name>$size</name>
        <full_name>\Haldayne\Customs\UploadError::size</full_name>
        <default></default>
        <docblock line="135">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="135" description="&lt;p&gt;The size of the file uploaded.&lt;/p&gt;" type="integer" variable="$size">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="Haldayne\Customs" line="140" package="Haldayne">
        <name>$messages</name>
        <full_name>\Haldayne\Customs\UploadError::messages</full_name>
        <default>array(UPLOAD_ERR_INI_SIZE =&gt; 'The file size exceeds the server-allowed limit.', UPLOAD_ERR_FORM_SIZE =&gt; 'The file size exceeds the form-allowed upload limit.', UPLOAD_ERR_PARTIAL =&gt; 'The file was only partially uploaded.', UPLOAD_ERR_NO_FILE =&gt; 'No file was uploaded.')</default>
        <docblock line="140">
          <description>The possible failure codes and an English description.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Haldayne\Customs" line="52" package="Haldayne">
        <name>changeErrorMessage</name>
        <full_name>\Haldayne\Customs\UploadError::changeErrorMessage()</full_name>
        <docblock line="52">
          <description>Change the text associated with a PHP upload error code.</description>
          <long-description>You may want to localize or otherwise change the generic error
associated with one of the upload error codes. You may only change
messages for the following upload error codes:

- UPLOAD_ERR_INI_SIZE (1) : The upload exceeds the `upload_max_filesize`
  directive.
- UPLOAD_ERR_FORM_SIZE (2) : The upload exceeds the `MAX_FILE_SIZE`
  directive in the HTML form.
- UPLOAD_ERR_PARTIAL (3) : The upload was incomplete.
- UPLOAD_ERR_NO_FILE (4) : No file was uploaded.</long-description>
          <tag name="param" line="52" description="&lt;p&gt;The code whose message you want to change.&lt;/p&gt;" type="integer" variable="$code">
            <type>integer</type>
          </tag>
          <tag name="param" line="52" description="&lt;p&gt;The new message for that code.&lt;/p&gt;" type="string" variable="$message">
            <type>string</type>
          </tag>
          <tag name="throws" line="52" description="If the given code does not have a message" type="\OutOfBoundsException">
            <type>\OutOfBoundsException</type>
          </tag>
          <tag name="api" line="52" description=""/>
          <tag name="since" line="52" description="1.0.0"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="68" package="Haldayne">
        <name>getErrorMessage</name>
        <full_name>\Haldayne\Customs\UploadError::getErrorMessage()</full_name>
        <docblock line="68">
          <description>Return a description of why the error occurred.</description>
          <long-description></long-description>
          <tag name="see" line="68" description="To adjust the message globally." link="\Haldayne\Customs\UploadError::changeErrorMessage"/>
          <tag name="api" line="68" description=""/>
          <tag name="since" line="68" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="86" package="Haldayne">
        <name>isTooBig</name>
        <full_name>\Haldayne\Customs\UploadError::isTooBig()</full_name>
        <docblock line="86">
          <description>Is the error because the uploaded file was too big?</description>
          <long-description>An upload may exceed either the `upload_max_filesize` setting or the
`MAX_FILE_SIZE` input. This method handles both cases and returns true
if either of these limits was reached. In such a case, the optional
pass-by-reference `$maximum` will indicate the maximum possible size.</long-description>
          <tag name="param" line="86" description="&lt;p&gt;The server or form allowed maximum file size, in bytes.&lt;/p&gt;" type="integer" variable="$maximum">
            <type>integer</type>
          </tag>
          <tag name="return" line="86" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="86" description=""/>
          <tag name="since" line="86" description="1.0.0"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$maximum</name>
          <default>null</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="107" package="Haldayne">
        <name>isPartial</name>
        <full_name>\Haldayne\Customs\UploadError::isPartial()</full_name>
        <docblock line="107">
          <description>Is the error because the uploaded file was only partially received?</description>
          <long-description></long-description>
          <tag name="param" line="107" description="&lt;p&gt;The number of bytes received.&lt;/p&gt;" type="integer" variable="$received">
            <type>integer</type>
          </tag>
          <tag name="return" line="107" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="107" description=""/>
          <tag name="since" line="107" description="1.0.0"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$received</name>
          <default>null</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="124" package="Haldayne">
        <name>notUploaded</name>
        <full_name>\Haldayne\Customs\UploadError::notUploaded()</full_name>
        <docblock line="124">
          <description>Is the error because no file was uploaded?</description>
          <long-description></long-description>
          <tag name="return" line="124" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="124" description=""/>
          <tag name="since" line="124" description="1.0.0"/>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>eJzFV21v2zYQ/u5fcR+C2QkSp932yV3auJmLGMiL4TrDtjRwKIm22VKkQFJ2vCL/fUdSlGVZSVNsw/wljnX33Ptzp1/eZYusJUhKdUZiCueEJ2Qt6KezXBuZ6jet1vHBQQsOYEwzRTUVRgOBGeMUzIIYSFgCQhrQeRxTrWc552vIMy5J0kU1qzlQSioNMo5zBasFFahJIeYMwZy+lik1CybmsFJSzLswweeZ1JpFaCYmuaZoVNGeRTtyTyva1ro3WDjW3RHzj6kVyIgyjPBDYCKWacapoU8o2VghlYpCtDboAIYrgDL0XbkAZlKlIP13TdUSfyacyxUtAz/VlMKNsz14iGlmmBSYABYvfDL0JhsFwMradEmwyKSaKKYhUpR8sWliAuGPWzEnWgcDNslAHwwViYZ+pI0isUmKh8Iws259bQF+XD3t5wDOEBDjJyDoKuSQOiAZfaax6RaCQf4Us0dSQGzrxd7CpPwKW8dl7XxyeQG2kWxi0HH0lzqz3Zo2w2D2Ypl4tdH5qDBpf2qU1ewvL+u+yJnLSlnSoniFGipQJQiHodCGoH2ML8ECFlka4lNipAoKx+5vlkecxTDLRexKNJ3GEtVVHptOGeShd/rQ+7PvFH1CHQS2pzC9XqPqPk5RENyzmTl66+I/sfEtCe84ZJSqCbl4N0LOrhd6bO2UErtzTl1qDHYBYGfI2Ee/wp7FGttMb9W4mvAA84fMISVrWGHuwEjgMibcpR17wrb+imlsyY2xORVUYfIcZECpG5eiVreKB7pbGpUCucNjByTkJU3mOH0zGabOzphtv12kXi2YI7gZXVz3f50OxuPp8Go4/Tj8cwCd1/vQc/0UEHA2aaId/L3/bZqSh6ntLJvz+4AHyDcKx4ItNx23ZePD9fiyMPLjc0Yu+79PPwwvBk62CR5r7iTdUFmiabY36o8nw/4FdH6qWVsRXSG4ZuWra+cDdH62ylfSk7rVDLP1xPhvD7D7slpIbIuiWLDGeoYG8uWsz3VgkKBhgSwHhf99tXG9bJOCWSi50vDpOjfXs/cyR6rbEOvQN9gc0ye8V4nExrHrYUGWluUK9BKOZKz8rjFdFF53X3VfNXEDkompUoQPy5HupUftBHoorNQZgs2gQ5Qi6+kXup7SB6aNDjoevdcLunp/v6JpPzsSt071Dukh/LShj0egHMuxjeBy55LcmL5O++yZlLUr5PT4BAONqcmVQB2cxFgxXxSc+tVi7QpTLBa7+FRDb1V2pRXs9XZTDBMJJPmMl4kDDM0y5zLCzVtZNN9R2LKic2q2ylmvn/LhNRRiw+h3T7HzUFdSEFF30uyuMTd8RkqI2PxdLT99EWbbMqVnk+o10khceFYYw/wxgUIBq8Y/ONBZbuzVhTvbXmIywfKLBEEgQtLHC8wdYCIpkoBOqrxEw8Yu/PAUj5FxljK8E204eGHECyw3LmR7I9pFZOEOndPSNQnhASrDxXEUrY8UnVHcp1i3+z0MiKV5eo+bhHN0NWGxvVlcA/hHm1PRBv0caQWFyebiwsy4Q6443UpMVw+LZy9FfwFu+qvohUhK/o96jumJlO/ZvPND6doJCDyhm8ijaZednJxUL4o6a1RQmWBTbPFOu6FPqtNdaXVb5B1SqXmy2Xgvd2VvOrr+OLltb3Vh++7lPnxtkpwRfPRtlvqOSXTnSPG+gN9wNVPcLUl9MqsNFmT8QsvTyE+Ff4EID/+LPhp5N7GRShde1EnhgvhW9SqoleP0fyyZaLhXdirzb+UXF+JNYeOpvdBpuKzqSd3eDscwGg9/608G0B8Ny6DhdElU7cSqnOulh4otLQ06oTdN2o1vTS5l5Xm3A+ZrWs//1tv4jDCeK3/2+Z2Ab8UDMedML6qbv/aGVVgozqhyeWI73ZaZbCI4OHkL7Unw3IVSvaQ9iR8F8nZ7p9s+bIKsMNWzkHYblIDFyn0ON0xQzdUGAinz3gwUusYDNd7jhSJS5WPrb+NMUvc=</source>
  </file>
  <file path="customs/src/AbstractUploadEntity.php" generated-path="customs.src.AbstractUploadEntity.html" hash="bda036dfba0f14cc6a94cab0eb41358d" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="true" namespace="Haldayne\Customs" line="7" package="Haldayne">
      <extends/>
      <name>AbstractUploadEntity</name>
      <full_name>\Haldayne\Customs\AbstractUploadEntity</full_name>
      <docblock line="7">
        <description>Common methods shared amongst uploaded files.</description>
        <long-description></long-description>
        <tag name="package" line="7" description="Haldayne"/>
      </docblock>
      <property static="false" visibility="protected" namespace="Haldayne\Customs" line="37" package="Haldayne">
        <name>$htmlName</name>
        <full_name>\Haldayne\Customs\AbstractUploadEntity::htmlName</full_name>
        <default></default>
        <docblock line="37">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="9" package="Haldayne">
        <name>__construct</name>
        <full_name>\Haldayne\Customs\AbstractUploadEntity::__construct()</full_name>
        <docblock line="9">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$htmlName</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="30" package="Haldayne">
        <name>getHtmlName</name>
        <full_name>\Haldayne\Customs\AbstractUploadEntity::getHtmlName()</full_name>
        <docblock line="30">
          <description>Get the HTML variable name for this upload.</description>
          <long-description>This name approximates the originally given name, like:
  &lt;input type='file' name='file[a]' /&gt;

But in some cases the exact name cannot be returned.  First, because
PHP mangles HTML names containing '.' or ' ', these will map:
  * foo.bar returned as "foo_bar"
  * foo bar returned as "foo_bar"
  * foo_bar returned as "foo_bar"
  * foo[bar.baz] returned as "foo[bar.baz]"

Second, if the auto-append syntax was given:
  * foo[] returned as "foo[0]", etc.</long-description>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="9" code="PPC:ERR-50015">Argument $htmlName is missing from the Docblock of __construct</error>
      <error line="9" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="37" code="PPC:ERR-50007">No summary for property $htmlName</error>
    </parse_markers>
    <source>eJyNUstu2zAQvOsrBkYApYZj99w8itR16wJ9GK17cg1jTdESUYoUxFVip8i/d0U/kKo5hBeJy9mdnd25elsVVeKo1KEipTElm9HO6V/jJrAvw2WSjPr9BH2MfVl6h1Jz4bOAUFCtM5DE8sBoKuspk8DGWB2GkjBKaB24JsVQlkLA7eH6M0Injg3vkj8J5FTN2hqFTeMUGyFZrZR3gm4Un58VXNqv0uCrCN0ntOeMCxMubo7PuMYJehlBj0n8xP7b08dHzeBCVM6/fMYd1YbWVqNVj42v0RY8KBkeUo6Z8/YpAqmqar81JbEOsZivTW4cWbtDbu60i7ABrPmt3xzTgSvjqkbYd5W+TtshpRG3/1/QMsXopsP5TvDGIXhhVRQOdHrbjjS2osg5z1hr1Jqb2ulsCHwwdeCBBBU1QR9rzaYzlORyWc5efVw5ZMxMxhmXIx2mIgUp0kHLEzTujbWSVD1R0Zc5+eGa6hMjKKAnwZUEex0gXgpcvRS4kJjQPyz/Q59eep0p/tAiMhvAbOL4qGF/ITvULkPYifot7qVE3FxX6OIZmtfL3gCa1dEgo2cNnGueHrx43vXtvmTXvv9adoTZ92/zyXg+eY/b2ad9VHzHWrE088Toj8lfiGwiow==</source>
  </file>
  <file path="customs/src/UploadIterator.php" generated-path="customs.src.UploadIterator.html" hash="afff277e960b33af743ad6916ee7a304" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Customs" line="7" package="Haldayne">
      <extends/>
      <implements>\ArrayAccess</implements>
      <implements>\SeekableIterator</implements>
      <implements>\Countable</implements>
      <name>UploadIterator</name>
      <full_name>\Haldayne\Customs\UploadIterator</full_name>
      <docblock line="7">
        <description>Iterate over the $_FILES super-global, or an array in that same format.</description>
        <long-description></long-description>
        <tag name="package" line="7" description="Haldayne"/>
      </docblock>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="187" package="Haldayne">
        <name>$input</name>
        <full_name>\Haldayne\Customs\UploadIterator::input</full_name>
        <default></default>
        <docblock line="187">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="187" description="&lt;p&gt;The $_FILES or similar array provided in ctor&lt;/p&gt;" type="array" variable="$input">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="189" package="Haldayne">
        <name>$files</name>
        <full_name>\Haldayne\Customs\UploadIterator::files</full_name>
        <default></default>
        <docblock line="189">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="189" description="&lt;p&gt;The internal array holding processed upload entities&lt;/p&gt;" type="array" variable="$files">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="191" package="Haldayne">
        <name>$index</name>
        <full_name>\Haldayne\Customs\UploadIterator::index</full_name>
        <default></default>
        <docblock line="191">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="191" description="&lt;p&gt;The pointer to the current index in the internal array&lt;/p&gt;" type="integer" variable="$index">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="22" package="Haldayne">
        <name>__construct</name>
        <full_name>\Haldayne\Customs\UploadIterator::__construct()</full_name>
        <docblock line="22">
          <description>Create a new UploadIterator.</description>
          <long-description>With no arguments, creates an iterator over the $_FILES super-global.
You may instead pass your own array having the same format as $_FILES.
If any of the files indicate a security concern or a server problem
that prevented their storage, then the constructor throws an exception.</long-description>
          <tag name="param" line="22" description="&lt;p&gt;An alternate $_FILES-like array to iterate over.&lt;/p&gt;" type="array" variable="$input">
            <type>array</type>
          </tag>
          <tag name="throws" line="22" description="" type="\Haldayne\Customs\UploadException">
            <type>\Haldayne\Customs\UploadException</type>
          </tag>
          <tag name="api" line="22" description=""/>
          <tag name="since" line="22" description="1.0.0"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$input</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="100" package="Haldayne">
        <name>current</name>
        <full_name>\Haldayne\Customs\UploadIterator::current()</full_name>
        <docblock line="100">
          <description>Returns the current upload entity within the iterator.</description>
          <long-description></long-description>
          <tag name="return" line="100" description="" type="\Haldayne\Customs\UploadFile|\Haldayne\Customs\UploadError">
            <type>\Haldayne\Customs\UploadFile</type>
            <type>\Haldayne\Customs\UploadError</type>
          </tag>
          <tag name="api" line="100" description=""/>
          <tag name="since" line="100" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="112" package="Haldayne">
        <name>key</name>
        <full_name>\Haldayne\Customs\UploadIterator::key()</full_name>
        <docblock line="112">
          <description>Returns the key of the current upload entity within the iterator.</description>
          <long-description></long-description>
          <tag name="return" line="112" description="" type="integer">
            <type>integer</type>
          </tag>
          <tag name="api" line="112" description=""/>
          <tag name="since" line="112" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="124" package="Haldayne">
        <name>next</name>
        <full_name>\Haldayne\Customs\UploadIterator::next()</full_name>
        <docblock line="124">
          <description>Advance the iterator to the next upload entity.</description>
          <long-description></long-description>
          <tag name="return" line="124" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="api" line="124" description=""/>
          <tag name="since" line="124" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="136" package="Haldayne">
        <name>rewind</name>
        <full_name>\Haldayne\Customs\UploadIterator::rewind()</full_name>
        <docblock line="136">
          <description>Rewind to the first element of the iterator.</description>
          <long-description></long-description>
          <tag name="return" line="136" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="api" line="136" description=""/>
          <tag name="since" line="136" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="148" package="Haldayne">
        <name>valid</name>
        <full_name>\Haldayne\Customs\UploadIterator::valid()</full_name>
        <docblock line="148">
          <description>Check if the current position within the iterator is valid.</description>
          <long-description></long-description>
          <tag name="return" line="148" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="148" description=""/>
          <tag name="since" line="148" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="161" package="Haldayne">
        <name>seek</name>
        <full_name>\Haldayne\Customs\UploadIterator::seek()</full_name>
        <docblock line="161">
          <description>Arbitrarily move the current position within the iterator.</description>
          <long-description></long-description>
          <tag name="return" line="161" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="throws" line="161" description="" type="\OutOfBoundsException">
            <type>\OutOfBoundsException</type>
          </tag>
          <tag name="api" line="161" description=""/>
          <tag name="since" line="161" description="1.0.0"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$position</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="179" package="Haldayne">
        <name>count</name>
        <full_name>\Haldayne\Customs\UploadIterator::count()</full_name>
        <docblock line="179">
          <description>Return a count of upload entities within the iterator.</description>
          <long-description></long-description>
          <tag name="return" line="179" description="" type="integer">
            <type>integer</type>
          </tag>
          <tag name="api" line="179" description=""/>
          <tag name="since" line="179" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Customs" line="198" package="Haldayne">
        <name>import</name>
        <full_name>\Haldayne\Customs\UploadIterator::import()</full_name>
        <docblock line="198">
          <description>Import a structure purporting to be a valid $_FILES format into a flat
array of UploadFile or UploadError. Resolve all recursive structure and
reconstitue the HTML form name.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Customs" line="221" package="Haldayne">
        <name>names</name>
        <full_name>\Haldayne\Customs\UploadIterator::names()</full_name>
        <docblock line="221">
          <description>Using the "name" key in the input as a model, figure out all the
HTML names given in the original input.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Customs" line="253" package="Haldayne">
        <name>reducer</name>
        <full_name>\Haldayne\Customs\UploadIterator::reducer()</full_name>
        <docblock line="253">
          <description>Helper to `names`, which recursively traverses the iterator,
appending new keys onto the base-so-far.</description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$it</name>
          <default></default>
          <type>\RecursiveArrayIterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$base</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="true">
          <name>$names</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Customs" line="270" package="Haldayne">
        <name>gather</name>
        <full_name>\Haldayne\Customs\UploadIterator::gather()</full_name>
        <docblock line="270">
          <description>Given an HTML name, gather all its information into a standard
info structure.</description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Customs" line="301" package="Haldayne">
        <name>wrap</name>
        <full_name>\Haldayne\Customs\UploadIterator::wrap()</full_name>
        <docblock line="301">
          <description>Wrap the file upload information in an appropriate object class, raising
an exception if one would be warranted by the error.</description>
          <long-description></long-description>
          <tag name="param" line="301" description="&lt;p&gt;The HTML form element name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="301" description="&lt;p&gt;The file upload information&lt;/p&gt;" type="array" variable="$info">
            <type>array</type>
          </tag>
          <tag name="return" line="301" description="" type="\Haldayne\Customs\UploadFile|\Haldayne\Customs\UploadError">
            <type>\Haldayne\Customs\UploadFile</type>
            <type>\Haldayne\Customs\UploadError</type>
          </tag>
          <tag name="throws" line="301" description="" type="\Haldayne\Customs\UploadException">
            <type>\Haldayne\Customs\UploadException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$info</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="161" code="PPC:ERR-50015">Argument $position is missing from the Docblock of seek</error>
      <error line="253" code="PPC:ERR-50015">Argument $it is missing from the Docblock of reducer</error>
      <error line="253" code="PPC:ERR-50015">Argument $base is missing from the Docblock of reducer</error>
      <error line="253" code="PPC:ERR-50015">Argument $names is missing from the Docblock of reducer</error>
      <error line="270" code="PPC:ERR-50015">Argument $name is missing from the Docblock of gather</error>
    </parse_markers>
    <source>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</source>
  </file>
  <file path="boost/src/functions/bytes.php" generated-path="boost.src.functions.bytes.html" hash="cd88e37dcbb860416d5a3cf0b72d5b0f" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <function namespace="Haldayne\Boost" line="28" package="Haldayne">
      <name>bytes</name>
      <full_name>\Haldayne\Boost\bytes()</full_name>
      <docblock line="28">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="28" description="Haldayne"/>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$string</name>
        <default></default>
        <type/>
      </argument>
    </function>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="28" code="PPC:ERR-50015">Argument $string is missing from the Docblock of bytes</error>
      <error line="28" code="PPC:ERR-50011">No summary for function \Haldayne\Boost\bytes()</error>
    </parse_markers>
    <source>eJyVk01r3DAQhu/+FXMo3fV2Y0OhoWQLLaWHHEPppRBYyfLsWsQeLfpoupT8944ka52UQqkultE7z7wzI334eBpOFckJ3UkqhFs59vJMeP/ZGOd3VdVuNhVsQGjy0J09urXzVtOxFnAFX9EHS+AHBApThxbMIatAE0jI0oYBkXF3ewe9UWFC8o6DpE+RglUjkoBDIOW1IbAJ6/7GjZznaPg2aE7GWhtwC4FGdDlQTF3WCMCfHslF8iATwfxAa3XfIy3ZvZnz/pFWDdJK5dG6Usd3E0BJAtSstBw1noFL0mljcrxIbp/VxKbPJlhQpmefxsa/CIugSbqHFNUFPforlmZT8MgZFkRwCOvYxHfN9Zv6ZnYjhIiftmXMA5ZIdhzkyH6UCWVyW7Z6lLZPLeLKHgdMBZRGzZilW9zW2KnRyH4+jhZeXpH7PG7p5sy7xVPcfXKIMHh/umlbvmkNoW8nSeytRWpLaU2ObVgBXy43pIzm35xSQVPsZpJ2KjjH7i4tLOeMbCt9gPVbeM2j0fsj+vXqgon6fdGu6hp+VcDrgskP4dX8EubTuOYbNHX77L1otrB632m/qndJ+lQ9AY7cy//kvoQusOo3dMVFvg==</source>
  </file>
  <file path="boost/src/functions/ini_size_to_bytes.php" generated-path="boost.src.functions.ini_size_to_bytes.html" hash="f8b51cf1d348af60aab41d14d8e6504b" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <function namespace="Haldayne\Boost" line="21" package="Haldayne">
      <name>ini_size_to_bytes</name>
      <full_name>\Haldayne\Boost\ini_size_to_bytes()</full_name>
      <docblock line="21">
        <description>`int ini_size_to_bytes(string)` - Convert a short-hand bytes specification
into integer bytes.</description>
        <long-description>Some PHP ini values (like `upload_max_filesize`) allow you to specify the
number of bytes in a short-hand, like "10M" or "1G". But, when you call
`ini_get` you'll get these actual short-hand values, instead of the byte
equivalent (which usually you want).

This function converts a super-set of documented short-hand into bytes:
  * An optional leading +
  * Number specification in hex, octal, or decimal
  * Kilo-, Mega-, Giga-, and Tera-bytes expressed using single or double
    characters in either lower or upper case: "k", "kB", "G", "Pb", etc.</long-description>
        <tag name="package" line="21" description="Haldayne"/>
        <tag name="see" line="21" description="Documents the short-hand" link="http://php.net/manual/en/faq.using.php#faq.using.shorthandbytes"/>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$string</name>
        <default></default>
        <type/>
      </argument>
    </function>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="21" code="PPC:ERR-50015">Argument $string is missing from the Docblock of ini_size_to_bytes</error>
    </parse_markers>
    <source>eJyNU++PGjcQ/b5/xYhEWrgs7JFejgsUtb1UukhVopOaj5XAuwysdV574x8BWuV/74x3gYNEbZAwxp55780bz8+/NFWTaFGja0SJ8F6oldhr/OveGOdnSZJfXSVwBUupPUgtF07+jQtvFsXeo+s7b6XeDJYwhHdGf0HrQYCrjPXDSugVxChwDZZyLUvhpdGMRmCGF9ygbWNGdMw3f5oa4fH9I3PBF6ECpfeVfEJYhkYZsVrUYrdYS4UsZDkAoZTZwt4EIMiWaA++QgbToS6IwKw7HVKfqcsgAvfG1x96YCxtHnojuA8+g22FOoKWhN/VLxcb9Es+TZUC2jONQxClD0I9r7rVnRGf8yhWLIBCowjGws9BUgiSo/1tJcsKgiMEtY+MW6H94GDHp0o6WAddsnNQthY7riI0aIeORBD4ypShJjhcPVcRTY6FTxkK6PubBtMwFOlVpIx6B68Olx9bt86axZZVuMvAlF6ojF1a0XUt1CHrD6nMMIMPuBH08yDjD9N/QiuGre+4ayw6R/KCY0peFEYwEwqFLRZAWQlLbqKNrUJJplmg9nIPLYSGSqaGOJxC76mX0XLP6wMvjwWt6MuDcb86RKi8b6Z5Ti98pNHntdBkc446X4vPoyhlRHcvTv+ie2xeq/v3zlcX23eylgjy5NiVb6fiZTcWyT8Jl5XngErWUguP1MO6UbiTfj+FjeHn21YYI7tEmANtvIkXRzQaxg5ti2ScTj2ZYen9FSbQ2On9saXpq5QN4yNvhVTxrEgzWFnTcC31BZuiTX0gyjif2M5D7EVIkT4T1D1MKKg58UyuoX8N83kspDHuWeL1Lh0MoHUmUnRTOucHS2NxCh3fdiq+kn80aP8F+qOYd+eQ/59yiD/WWgflZUPDysXSbGtQwvnT241xbis9zXXfhYJgTvTD8ZlOfsyQ+nR6pL+aw/j67ds34/Ht68lkcjuDwqJ4ml2kbC5TJj9NbsZ3r29mHPPdlPoy5ebuDeO3n++mPF2mdPjfpHTuWPTB6kPKLPma/As65/eq</source>
  </file>
  <file path="boost/src/Map.php" generated-path="boost.src.Map.html" hash="45924a737ff130f87a0dd2eb70320765" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <namespace-alias name="Arrayable">\Haldayne\Boost\Contract\Arrayable</namespace-alias>
    <namespace-alias name="Jsonable">\Haldayne\Boost\Contract\Jsonable</namespace-alias>
    <class final="false" abstract="false" namespace="Haldayne\Boost" line="35" package="Haldayne">
      <extends/>
      <implements>\Countable</implements>
      <implements>\Haldayne\Boost\Contract\Arrayable</implements>
      <implements>\Haldayne\Boost\Contract\Jsonable</implements>
      <implements>\ArrayAccess</implements>
      <implements>\IteratorAggregate</implements>
      <name>Map</name>
      <full_name>\Haldayne\Boost\Map</full_name>
      <docblock line="35">
        <description>An improvement on PHP associative arrays.</description>
        <long-description>Sports a fluent interface accepting callables to drive array operations,
similar in spirit to jQuery. Supports keys of any type: scalars, even
arrays and objects!  Used in place of `array ()` and `[]`, your code will
be easier to write *and* read.

In the API, a formal variable named `$collection` must be one of:
  - Haldayne\Boost\Map
  - Haldayne\Boost\Contract\Arrayable
  - Haldayne\Boost\Contract\Jsonable
  - \Traversable
  - object
  - array

In the API, a formal variable named `$code` must be either a callable or
a string representing actual PHP code. When giving a string, be mindful:
user-supplied string code is a security risk, and string code you write is
checked only at run-time. Also, be mindful that these strings can contain
`$v` and `$k`, which represent the value and key being passed in.

In the API, a formal variable named `$key` may be of *any* type.

As much as possible, method names were chosen to reflect synonymous usage in
the PHP engine itself. When not possible or relevant, the names may reflect
usage from Laravel.</long-description>
        <tag name="package" line="35" description="Haldayne"/>
      </docblock>
      <constant namespace="Haldayne\Boost" line="42" package="Haldayne">
        <name>LOOSE</name>
        <full_name>\Haldayne\Boost\Map::LOOSE</full_name>
        <value>true</value>
        <docblock line="42">
          <description>Should the comparison be made loosely?</description>
          <long-description></long-description>
          <tag name="see" line="42" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="42" description="" link="\Haldayne\Boost\Map::intersect"/>
        </docblock>
      </constant>
      <constant namespace="Haldayne\Boost" line="49" package="Haldayne">
        <name>STRICT</name>
        <full_name>\Haldayne\Boost\Map::STRICT</full_name>
        <value>false</value>
        <docblock line="49">
          <description>Should the comparison be made strictly?</description>
          <long-description></long-description>
          <tag name="see" line="49" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="49" description="" link="\Haldayne\Boost\Map::intersect"/>
        </docblock>
      </constant>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="467" package="Haldayne">
        <name>$array</name>
        <full_name>\Haldayne\Boost\Map::array</full_name>
        <default>array()</default>
        <docblock line="467">
          <description>The internal array representation of the map.</description>
          <long-description></long-description>
          <tag name="var" line="467" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="473" package="Haldayne">
        <name>$guard</name>
        <full_name>\Haldayne\Boost\Map::guard</full_name>
        <default>null</default>
        <docblock line="473">
          <description>The guard code protecting sets.</description>
          <long-description></long-description>
          <tag name="var" line="473" description="" type="callable|string|null" variable="">
            <type>callable</type>
            <type>string</type>
            <type>null</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="479" package="Haldayne">
        <name>$map_code_to_callable</name>
        <full_name>\Haldayne\Boost\Map::map_code_to_callable</full_name>
        <default>array()</default>
        <docblock line="479">
          <description>Track string code we've made into callables.</description>
          <long-description></long-description>
          <tag name="var" line="479" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="485" package="Haldayne">
        <name>$map_key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::map_key_to_hash</full_name>
        <default>array()</default>
        <docblock line="485">
          <description>Track hashes we've created for non-string keys.</description>
          <long-description></long-description>
          <tag name="var" line="485" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="63" package="Haldayne">
        <name>__construct</name>
        <full_name>\Haldayne\Boost\Map::__construct()</full_name>
        <docblock line="63">
          <description>Create a new map.</description>
          <long-description>Initialize the map with the given collection, if any. Accepts any kind
of collection: array, object, Traversable, another Map, etc. Optionally,
wrap every key,value sets into the map with the given guard code: if the
guard code fails, the set will throw an exception.</long-description>
          <tag name="param" line="63" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="63" description="" type="callable" variable="$guard">
            <type>callable</type>
          </tag>
          <tag name="throws" line="63" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default>null</default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$guard</name>
          <default>null</default>
          <type>callable</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="91" package="Haldayne">
        <name>find</name>
        <full_name>\Haldayne\Boost\Map::find()</full_name>
        <docblock line="91">
          <description>Return a new map containing only members of this map that pass the callable.</description>
          <long-description>An all-purpose "grep". You give a function deciding whether an element is
in or out, and this returns a new map of those that are in. Ex, find the
odd numbers:

```
$nums = new Map(range(0, 3));
$odds = $m-&gt;find('return 1 == ($v % 2);');
```</long-description>
          <tag name="param" line="91" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="91" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="110" package="Haldayne">
        <name>first</name>
        <full_name>\Haldayne\Boost\Map::first()</full_name>
        <docblock line="110">
          <description>Return a new map containing the first N elements matching the callable.</description>
          <long-description>Like `grep`, but stop after finding N elements.

```
$nums = new Map(range(0, 3));
$odds = $m-&gt;all('return 1 == ($v % 2);');
```</long-description>
          <tag name="param" line="110" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="110" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="110" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="132" package="Haldayne">
        <name>last</name>
        <full_name>\Haldayne\Boost\Map::last()</full_name>
        <docblock line="132">
          <description>Return a new map containing the last N elements matching the callable.</description>
          <long-description>Like `grep`, but stop after finding N elements.

```
$nums = new Map(range(0, 3));
$odds = $m-&gt;all('return 1 == ($v % 2);');
```</long-description>
          <tag name="param" line="132" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="132" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="132" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="148" package="Haldayne">
        <name>contains</name>
        <full_name>\Haldayne\Boost\Map::contains()</full_name>
        <docblock line="148">
          <description>Determine if a key exists the map.</description>
          <long-description>This is the object method equivalent of the magic isset($map[$key]);</long-description>
          <tag name="param" line="148" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="148" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="164" package="Haldayne">
        <name>get</name>
        <full_name>\Haldayne\Boost\Map::get()</full_name>
        <docblock line="164">
          <description>Get the value corresponding to the given key.</description>
          <long-description>If the key does not exist in the map, return the default.

This is the object method equivalent of the magic $map[$key].</long-description>
          <tag name="param" line="164" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="164" description="" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="164" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="181" package="Haldayne">
        <name>set</name>
        <full_name>\Haldayne\Boost\Map::set()</full_name>
        <docblock line="181">
          <description>Set a key and its corresponding value into the map.</description>
          <long-description>This is the object method equivalent of the magic $map[$key] = 'foo'.</long-description>
          <tag name="param" line="181" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="181" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="181" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="195" package="Haldayne">
        <name>forget</name>
        <full_name>\Haldayne\Boost\Map::forget()</full_name>
        <docblock line="195">
          <description>Remove a key and its corresponding value from the map.</description>
          <long-description>This is the object method equivalent of the magic unset($map[$key]);</long-description>
          <tag name="param" line="195" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="195" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="206" package="Haldayne">
        <name>isEmpty</name>
        <full_name>\Haldayne\Boost\Map::isEmpty()</full_name>
        <docblock line="206">
          <description>Determine if any key and their values have been set into the map.</description>
          <long-description></long-description>
          <tag name="return" line="206" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="223" package="Haldayne">
        <name>diff</name>
        <full_name>\Haldayne\Boost\Map::diff()</full_name>
        <docblock line="223">
          <description>Return a new map containing those keys and values that are not present in
the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose values match will
be removed.  Otherwise, comparison is strict, and elements whose keys
and values match will be removed.</long-description>
          <tag name="param" line="223" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="223" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="223" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="243" package="Haldayne">
        <name>intersect</name>
        <full_name>\Haldayne\Boost\Map::intersect()</full_name>
        <docblock line="243">
          <description>Return a new map containing those keys and values that are present in
the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose value match will
be included.  Otherise, comparison is strict, and elements whose keys &amp;
values match will be included.</long-description>
          <tag name="param" line="243" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="243" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="243" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="268" package="Haldayne">
        <name>walk</name>
        <full_name>\Haldayne\Boost\Map::walk()</full_name>
        <docblock line="268">
          <description>Execute the given code over each element of the map. The code receives
the value and then the key as formal parameters.</description>
          <long-description>The items are walked in the order they exist in the map. If the code
returns boolean false, then the iteration halts. Values can be modified
from within the callback, but not keys.

Example:
```
$map-&gt;each(function (&amp;$value, $key) { $value++; return true; })-&gt;sum();
$map-&gt;each('$v++; return true;')-&gt;sum();
```</long-description>
          <tag name="param" line="268" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="268" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="285" package="Haldayne">
        <name>walk_backward</name>
        <full_name>\Haldayne\Boost\Map::walk_backward()</full_name>
        <docblock line="285">
          <description>Like `walk`, except walk from the end toward the front.</description>
          <long-description></long-description>
          <tag name="param" line="285" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="285" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="312" package="Haldayne">
        <name>partition</name>
        <full_name>\Haldayne\Boost\Map::partition()</full_name>
        <docblock line="312">
          <description>Returns a new map, where elements from this map have been placed into
new map elements. The return value of the code determines the key for
each new bucket.</description>
          <long-description>The code is called for each item in the map. The code receives the value
and key, respectively.  The code may return a scalar key and that scalar
becomes the key for a new map, into which that element is placed. If the
code returns a non-scalar, it explodes.</long-description>
          <tag name="param" line="312" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="312" description="" type="\Haldayne\Boost\MapOfMaps">
            <type>\Haldayne\Boost\MapOfMaps</type>
          </tag>
          <tag name="throws" line="312" description="" type="\UnexpectedValueException">
            <type>\UnexpectedValueException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="338" package="Haldayne">
        <name>count</name>
        <full_name>\Haldayne\Boost\Map::count()</full_name>
        <docblock line="338">
          <description>Count the number of items in the map.</description>
          <long-description></long-description>
          <tag name="return" line="338" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="350" package="Haldayne">
        <name>toArray</name>
        <full_name>\Haldayne\Boost\Map::toArray()</full_name>
        <docblock line="350">
          <description>Copy this map into an array, recursing as necessary to convert contained
collections into arrays.</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Arrayable::toArray()" refers="\Haldayne\Boost\Contract\Arrayable::toArray()" link="/classes/Haldayne.Boost.Contract.Arrayable.html#method_toArray"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="365" package="Haldayne">
        <name>toJson</name>
        <full_name>\Haldayne\Boost\Map::toJson()</full_name>
        <docblock line="365">
          <description>Return a JSON representation of the object.</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Jsonable::toJson()" refers="\Haldayne\Boost\Contract\Jsonable::toJson()" link="/classes/Haldayne.Boost.Contract.Jsonable.html#method_toJson"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="379" package="Haldayne">
        <name>offsetExists</name>
        <full_name>\Haldayne\Boost\Map::offsetExists()</full_name>
        <docblock line="379">
          <description>Determine if a value exists at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="379" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="379" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="391" package="Haldayne">
        <name>offsetGet</name>
        <full_name>\Haldayne\Boost\Map::offsetGet()</full_name>
        <docblock line="391">
          <description>Get a value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="391" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="391" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="409" package="Haldayne">
        <name>offsetSet</name>
        <full_name>\Haldayne\Boost\Map::offsetSet()</full_name>
        <docblock line="409">
          <description>Set the value at a given key.</description>
          <long-description>If key is null, the value is appended to the array using numeric indexes.
If the map was constructed with a set guard, then pass the value to the
guard. If the guard fails, the set throws an exception.</long-description>
          <tag name="param" line="409" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="409" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="409" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="throws" line="409" description="" type="\UnexpectedValueException">
            <type>\UnexpectedValueException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="441" package="Haldayne">
        <name>offsetUnset</name>
        <full_name>\Haldayne\Boost\Map::offsetUnset()</full_name>
        <docblock line="441">
          <description>Unset the value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="441" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="441" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="454" package="Haldayne">
        <name>getIterator</name>
        <full_name>\Haldayne\Boost\Map::getIterator()</full_name>
        <docblock line="454">
          <description>Get an iterator for a copy of the map.</description>
          <long-description></long-description>
          <tag name="return" line="454" description="" type="\ArrayIterator">
            <type>\ArrayIterator</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="495" package="Haldayne">
        <name>collection_to_array</name>
        <full_name>\Haldayne\Boost\Map::collection_to_array()</full_name>
        <docblock line="495">
          <description>Give me a native PHP array, regardless of what kind of collection-like
structure is given.</description>
          <long-description></long-description>
          <tag name="param" line="495" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Traversable|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|object|array" variable="$items">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="return" line="495" description="" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="495" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="528" package="Haldayne">
        <name>call</name>
        <full_name>\Haldayne\Boost\Map::call()</full_name>
        <docblock line="528">
          <description>Calls the given code with the given value and key as first &amp; second argument.</description>
          <long-description></long-description>
          <tag name="param" line="528" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="528" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="param" line="528" description="" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="throws" line="528" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="548" package="Haldayne">
        <name>code_to_callable</name>
        <full_name>\Haldayne\Boost\Map::code_to_callable()</full_name>
        <docblock line="548">
          <description>Return a callable from the given code, if possible.</description>
          <long-description>When you give a callable, this returns immediately. When you give a
string, caches and returns an anonymous function created from that
string code. Otherwise, it explodes.

If given a string, then the value is passed in by-reference, allowing
that code to update the value.  Updating keys would induce undefined
behavior on iterations, so we don't allow that.</long-description>
          <tag name="param" line="548" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="throws" line="548" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="573" package="Haldayne">
        <name>passes</name>
        <full_name>\Haldayne\Boost\Map::passes()</full_name>
        <docblock line="573">
          <description>Decide if the given value is considered "passing" or "failing".</description>
          <long-description></long-description>
          <tag name="param" line="573" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="573" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="585" package="Haldayne">
        <name>key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::key_to_hash()</full_name>
        <docblock line="585">
          <description>Lookup the hash for the given key. If a hash does not yet exist, one is
created.</description>
          <long-description></long-description>
          <tag name="param" line="585" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="585" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="620" package="Haldayne">
        <name>hash_to_key</name>
        <full_name>\Haldayne\Boost\Map::hash_to_key()</full_name>
        <docblock line="620">
          <description>Lookup the key for the given hash.</description>
          <long-description></long-description>
          <tag name="param" line="620" description="" type="string" variable="$hash">
            <type>string</type>
          </tag>
          <tag name="return" line="620" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$hash</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="646" package="Haldayne">
        <name>grep</name>
        <full_name>\Haldayne\Boost\Map::grep()</full_name>
        <docblock line="646">
          <description>Finds elements for which the given code passes, optionally limited to a
maximum count.</description>
          <long-description>If limit is null, no limit on number of matches. If limit is positive,
return that many from the front of the array. If limit is negative,
return that many from the end of the array.</long-description>
          <tag name="param" line="646" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="646" description="" type="integer|null" variable="$limit">
            <type>integer</type>
            <type>null</type>
          </tag>
          <tag name="return" line="646" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$limit</name>
          <default>null</default>
          <type>integer|null</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="365" code="PPC:ERR-50015">Argument $options is missing from the Docblock of toJson</error>
    </parse_markers>
    <source>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</source>
  </file>
  <file path="boost/src/MapOfMaps.php" generated-path="boost.src.MapOfMaps.html" hash="608a8379434e4b3468b5a954e63de974" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Boost" line="7" package="Haldayne">
      <extends>\Haldayne\Boost\Map</extends>
      <name>MapOfMaps</name>
      <full_name>\Haldayne\Boost\MapOfMaps</full_name>
      <docblock line="7">
        <description>Implements a map of maps.</description>
        <long-description>Sports a fluent interface accepting callables to drive array operations,
similar in spirit to jQuery. Supports keys of any type: scalars, even
arrays and objects!  Used in place of `array ()` and `[]`, your code will
be easier to write *and* read.

In the API, a formal variable named `$collection` must be one of:
  - Haldayne\Boost\Map
  - Haldayne\Boost\Contract\Arrayable
  - Haldayne\Boost\Contract\Jsonable
  - \Traversable
  - object
  - array

In the API, a formal variable named `$code` must be either a callable or
a string representing actual PHP code. When giving a string, be mindful:
user-supplied string code is a security risk, and string code you write is
checked only at run-time. Also, be mindful that these strings can contain
`$v` and `$k`, which represent the value and key being passed in.

In the API, a formal variable named `$key` may be of *any* type.

As much as possible, method names were chosen to reflect synonymous usage in
the PHP engine itself. When not possible or relevant, the names may reflect
usage from Laravel.</long-description>
        <tag name="package" line="7" description="Haldayne"/>
        <tag name="inherited_from" description="\Haldayne\Boost\Map" refers="\Haldayne\Boost\Map" link="/classes/Haldayne.Boost.Map.html"/>
      </docblock>
      <constant namespace="Haldayne\Boost" line="42" package="Haldayne">
        <name>LOOSE</name>
        <full_name>\Haldayne\Boost\Map::LOOSE</full_name>
        <value>true</value>
        <docblock line="42">
          <description>Should the comparison be made loosely?</description>
          <long-description></long-description>
          <tag name="see" line="42" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="42" description="" link="\Haldayne\Boost\Map::intersect"/>
        </docblock>
      </constant>
      <constant namespace="Haldayne\Boost" line="49" package="Haldayne">
        <name>STRICT</name>
        <full_name>\Haldayne\Boost\Map::STRICT</full_name>
        <value>false</value>
        <docblock line="49">
          <description>Should the comparison be made strictly?</description>
          <long-description></long-description>
          <tag name="see" line="49" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="49" description="" link="\Haldayne\Boost\Map::intersect"/>
        </docblock>
      </constant>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="467" package="Haldayne">
        <name>$array</name>
        <full_name>\Haldayne\Boost\Map::array</full_name>
        <default>array()</default>
        <docblock line="467">
          <description>The internal array representation of the map.</description>
          <long-description></long-description>
          <tag name="var" line="467" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="473" package="Haldayne">
        <name>$guard</name>
        <full_name>\Haldayne\Boost\Map::guard</full_name>
        <default>null</default>
        <docblock line="473">
          <description>The guard code protecting sets.</description>
          <long-description></long-description>
          <tag name="var" line="473" description="" type="callable|string|null" variable="">
            <type>callable</type>
            <type>string</type>
            <type>null</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="479" package="Haldayne">
        <name>$map_code_to_callable</name>
        <full_name>\Haldayne\Boost\Map::map_code_to_callable</full_name>
        <default>array()</default>
        <docblock line="479">
          <description>Track string code we've made into callables.</description>
          <long-description></long-description>
          <tag name="var" line="479" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="485" package="Haldayne">
        <name>$map_key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::map_key_to_hash</full_name>
        <default>array()</default>
        <docblock line="485">
          <description>Track hashes we've created for non-string keys.</description>
          <long-description></long-description>
          <tag name="var" line="485" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="12" package="Haldayne">
        <name>__construct</name>
        <full_name>\Haldayne\Boost\MapOfMaps::__construct()</full_name>
        <docblock line="12">
          <description>Create a new map of maps.</description>
          <long-description>Initialize the map with the given collection, if any. Accepts any kind
of collection: array, object, Traversable, another Map, etc. Optionally,
wrap every key,value sets into the map with the given guard code: if the
guard code fails, the set will throw an exception.</long-description>
          <tag name="inherited_from" description="\Haldayne\Boost\Map::__construct()" refers="\Haldayne\Boost\Map::__construct()" link="/classes/Haldayne.Boost.Map.html#method___construct"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default>null</default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="23" package="Haldayne">
        <name>guard</name>
        <full_name>\Haldayne\Boost\MapOfMaps::guard()</full_name>
        <docblock line="23">
          <description>Ensure the given thing is a Map.</description>
          <long-description></long-description>
          <tag name="param" line="23" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="23" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="63" package="Haldayne">
        <name>__construct</name>
        <full_name>\Haldayne\Boost\Map::__construct()</full_name>
        <docblock line="63">
          <description>Create a new map.</description>
          <long-description>Initialize the map with the given collection, if any. Accepts any kind
of collection: array, object, Traversable, another Map, etc. Optionally,
wrap every key,value sets into the map with the given guard code: if the
guard code fails, the set will throw an exception.</long-description>
          <tag name="param" line="63" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="63" description="" type="callable" variable="$guard">
            <type>callable</type>
          </tag>
          <tag name="throws" line="63" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default>null</default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$guard</name>
          <default>null</default>
          <type>callable</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="91" package="Haldayne">
        <name>find</name>
        <full_name>\Haldayne\Boost\Map::find()</full_name>
        <docblock line="91">
          <description>Return a new map containing only members of this map that pass the callable.</description>
          <long-description>An all-purpose "grep". You give a function deciding whether an element is
in or out, and this returns a new map of those that are in. Ex, find the
odd numbers:

```
$nums = new Map(range(0, 3));
$odds = $m-&gt;find('return 1 == ($v % 2);');
```</long-description>
          <tag name="param" line="91" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="91" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="110" package="Haldayne">
        <name>first</name>
        <full_name>\Haldayne\Boost\Map::first()</full_name>
        <docblock line="110">
          <description>Return a new map containing the first N elements matching the callable.</description>
          <long-description>Like `grep`, but stop after finding N elements.

```
$nums = new Map(range(0, 3));
$odds = $m-&gt;all('return 1 == ($v % 2);');
```</long-description>
          <tag name="param" line="110" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="110" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="110" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="132" package="Haldayne">
        <name>last</name>
        <full_name>\Haldayne\Boost\Map::last()</full_name>
        <docblock line="132">
          <description>Return a new map containing the last N elements matching the callable.</description>
          <long-description>Like `grep`, but stop after finding N elements.

```
$nums = new Map(range(0, 3));
$odds = $m-&gt;all('return 1 == ($v % 2);');
```</long-description>
          <tag name="param" line="132" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="132" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="132" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="148" package="Haldayne">
        <name>contains</name>
        <full_name>\Haldayne\Boost\Map::contains()</full_name>
        <docblock line="148">
          <description>Determine if a key exists the map.</description>
          <long-description>This is the object method equivalent of the magic isset($map[$key]);</long-description>
          <tag name="param" line="148" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="148" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="164" package="Haldayne">
        <name>get</name>
        <full_name>\Haldayne\Boost\Map::get()</full_name>
        <docblock line="164">
          <description>Get the value corresponding to the given key.</description>
          <long-description>If the key does not exist in the map, return the default.

This is the object method equivalent of the magic $map[$key].</long-description>
          <tag name="param" line="164" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="164" description="" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="164" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="181" package="Haldayne">
        <name>set</name>
        <full_name>\Haldayne\Boost\Map::set()</full_name>
        <docblock line="181">
          <description>Set a key and its corresponding value into the map.</description>
          <long-description>This is the object method equivalent of the magic $map[$key] = 'foo'.</long-description>
          <tag name="param" line="181" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="181" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="181" description="" type="\Haldayne\Boost\MapOfMaps">
            <type>\Haldayne\Boost\MapOfMaps</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="195" package="Haldayne">
        <name>forget</name>
        <full_name>\Haldayne\Boost\Map::forget()</full_name>
        <docblock line="195">
          <description>Remove a key and its corresponding value from the map.</description>
          <long-description>This is the object method equivalent of the magic unset($map[$key]);</long-description>
          <tag name="param" line="195" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="195" description="" type="\Haldayne\Boost\MapOfMaps">
            <type>\Haldayne\Boost\MapOfMaps</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="206" package="Haldayne">
        <name>isEmpty</name>
        <full_name>\Haldayne\Boost\Map::isEmpty()</full_name>
        <docblock line="206">
          <description>Determine if any key and their values have been set into the map.</description>
          <long-description></long-description>
          <tag name="return" line="206" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="223" package="Haldayne">
        <name>diff</name>
        <full_name>\Haldayne\Boost\Map::diff()</full_name>
        <docblock line="223">
          <description>Return a new map containing those keys and values that are not present in
the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose values match will
be removed.  Otherwise, comparison is strict, and elements whose keys
and values match will be removed.</long-description>
          <tag name="param" line="223" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="223" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="223" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="243" package="Haldayne">
        <name>intersect</name>
        <full_name>\Haldayne\Boost\Map::intersect()</full_name>
        <docblock line="243">
          <description>Return a new map containing those keys and values that are present in
the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose value match will
be included.  Otherise, comparison is strict, and elements whose keys &amp;
values match will be included.</long-description>
          <tag name="param" line="243" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="243" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="243" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="268" package="Haldayne">
        <name>walk</name>
        <full_name>\Haldayne\Boost\Map::walk()</full_name>
        <docblock line="268">
          <description>Execute the given code over each element of the map. The code receives
the value and then the key as formal parameters.</description>
          <long-description>The items are walked in the order they exist in the map. If the code
returns boolean false, then the iteration halts. Values can be modified
from within the callback, but not keys.

Example:
```
$map-&gt;each(function (&amp;$value, $key) { $value++; return true; })-&gt;sum();
$map-&gt;each('$v++; return true;')-&gt;sum();
```</long-description>
          <tag name="param" line="268" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="268" description="" type="\Haldayne\Boost\MapOfMaps">
            <type>\Haldayne\Boost\MapOfMaps</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="285" package="Haldayne">
        <name>walk_backward</name>
        <full_name>\Haldayne\Boost\Map::walk_backward()</full_name>
        <docblock line="285">
          <description>Like `walk`, except walk from the end toward the front.</description>
          <long-description></long-description>
          <tag name="param" line="285" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="285" description="" type="\Haldayne\Boost\MapOfMaps">
            <type>\Haldayne\Boost\MapOfMaps</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="312" package="Haldayne">
        <name>partition</name>
        <full_name>\Haldayne\Boost\Map::partition()</full_name>
        <docblock line="312">
          <description>Returns a new map, where elements from this map have been placed into
new map elements. The return value of the code determines the key for
each new bucket.</description>
          <long-description>The code is called for each item in the map. The code receives the value
and key, respectively.  The code may return a scalar key and that scalar
becomes the key for a new map, into which that element is placed. If the
code returns a non-scalar, it explodes.</long-description>
          <tag name="param" line="312" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="312" description="" type="\Haldayne\Boost\MapOfMaps">
            <type>\Haldayne\Boost\MapOfMaps</type>
          </tag>
          <tag name="throws" line="312" description="" type="\UnexpectedValueException">
            <type>\UnexpectedValueException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="338" package="Haldayne">
        <name>count</name>
        <full_name>\Haldayne\Boost\Map::count()</full_name>
        <docblock line="338">
          <description>Count the number of items in the map.</description>
          <long-description></long-description>
          <tag name="return" line="338" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="350" package="Haldayne">
        <name>toArray</name>
        <full_name>\Haldayne\Boost\Map::toArray()</full_name>
        <docblock line="350">
          <description>Copy this map into an array, recursing as necessary to convert contained
collections into arrays.</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Arrayable::toArray()" refers="\Haldayne\Boost\Contract\Arrayable::toArray()" link="/classes/Haldayne.Boost.Contract.Arrayable.html#method_toArray"/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="365" package="Haldayne">
        <name>toJson</name>
        <full_name>\Haldayne\Boost\Map::toJson()</full_name>
        <docblock line="365">
          <description>Return a JSON representation of the object.</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Jsonable::toJson()" refers="\Haldayne\Boost\Contract\Jsonable::toJson()" link="/classes/Haldayne.Boost.Contract.Jsonable.html#method_toJson"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>0</default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="379" package="Haldayne">
        <name>offsetExists</name>
        <full_name>\Haldayne\Boost\Map::offsetExists()</full_name>
        <docblock line="379">
          <description>Determine if a value exists at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="379" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="379" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="391" package="Haldayne">
        <name>offsetGet</name>
        <full_name>\Haldayne\Boost\Map::offsetGet()</full_name>
        <docblock line="391">
          <description>Get a value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="391" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="391" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="409" package="Haldayne">
        <name>offsetSet</name>
        <full_name>\Haldayne\Boost\Map::offsetSet()</full_name>
        <docblock line="409">
          <description>Set the value at a given key.</description>
          <long-description>If key is null, the value is appended to the array using numeric indexes.
If the map was constructed with a set guard, then pass the value to the
guard. If the guard fails, the set throws an exception.</long-description>
          <tag name="param" line="409" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="409" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="409" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="throws" line="409" description="" type="\UnexpectedValueException">
            <type>\UnexpectedValueException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="441" package="Haldayne">
        <name>offsetUnset</name>
        <full_name>\Haldayne\Boost\Map::offsetUnset()</full_name>
        <docblock line="441">
          <description>Unset the value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="441" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="441" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="454" package="Haldayne">
        <name>getIterator</name>
        <full_name>\Haldayne\Boost\Map::getIterator()</full_name>
        <docblock line="454">
          <description>Get an iterator for a copy of the map.</description>
          <long-description></long-description>
          <tag name="return" line="454" description="" type="\ArrayIterator">
            <type>\ArrayIterator</type>
          </tag>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="495" package="Haldayne">
        <name>collection_to_array</name>
        <full_name>\Haldayne\Boost\Map::collection_to_array()</full_name>
        <docblock line="495">
          <description>Give me a native PHP array, regardless of what kind of collection-like
structure is given.</description>
          <long-description></long-description>
          <tag name="param" line="495" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Traversable|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|object|array" variable="$items">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="return" line="495" description="" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="495" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="528" package="Haldayne">
        <name>call</name>
        <full_name>\Haldayne\Boost\Map::call()</full_name>
        <docblock line="528">
          <description>Calls the given code with the given value and key as first &amp; second argument.</description>
          <long-description></long-description>
          <tag name="param" line="528" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="528" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="param" line="528" description="" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="throws" line="528" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="548" package="Haldayne">
        <name>code_to_callable</name>
        <full_name>\Haldayne\Boost\Map::code_to_callable()</full_name>
        <docblock line="548">
          <description>Return a callable from the given code, if possible.</description>
          <long-description>When you give a callable, this returns immediately. When you give a
string, caches and returns an anonymous function created from that
string code. Otherwise, it explodes.

If given a string, then the value is passed in by-reference, allowing
that code to update the value.  Updating keys would induce undefined
behavior on iterations, so we don't allow that.</long-description>
          <tag name="param" line="548" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="throws" line="548" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="573" package="Haldayne">
        <name>passes</name>
        <full_name>\Haldayne\Boost\Map::passes()</full_name>
        <docblock line="573">
          <description>Decide if the given value is considered "passing" or "failing".</description>
          <long-description></long-description>
          <tag name="param" line="573" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="573" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="585" package="Haldayne">
        <name>key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::key_to_hash()</full_name>
        <docblock line="585">
          <description>Lookup the hash for the given key. If a hash does not yet exist, one is
created.</description>
          <long-description></long-description>
          <tag name="param" line="585" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="585" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="620" package="Haldayne">
        <name>hash_to_key</name>
        <full_name>\Haldayne\Boost\Map::hash_to_key()</full_name>
        <docblock line="620">
          <description>Lookup the key for the given hash.</description>
          <long-description></long-description>
          <tag name="param" line="620" description="" type="string" variable="$hash">
            <type>string</type>
          </tag>
          <tag name="return" line="620" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$hash</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="646" package="Haldayne">
        <name>grep</name>
        <full_name>\Haldayne\Boost\Map::grep()</full_name>
        <docblock line="646">
          <description>Finds elements for which the given code passes, optionally limited to a
maximum count.</description>
          <long-description>If limit is null, no limit on number of matches. If limit is positive,
return that many from the front of the array. If limit is negative,
return that many from the end of the array.</long-description>
          <tag name="param" line="646" description="" type="callable|string" variable="$code">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="646" description="" type="integer|null" variable="$limit">
            <type>integer</type>
            <type>null</type>
          </tag>
          <tag name="return" line="646" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$limit</name>
          <default>null</default>
          <type>integer|null</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="12" code="PPC:ERR-50015">Argument $collection is missing from the Docblock of __construct</error>
    </parse_markers>
    <source>eJx9UE1PwzAMvedX+DBpWzXR+wYCgRBwQPwAQJOXum2kxInyMYbQ/jtpSjlUAh/iyPZ7fs+X1653gtFQcCgJHlE3+Mn0dmttiDsh6qoSUMGTcZoMcQyAYNCBbYcULnKzFlJjCPCM7qXNTwA6ReKmVMSXgByFZogK7jxhpEzD9DGjKgN1yS4dtJLQJpZRWYb9XloO0ScZVwtptaaxfgWctF4XzLiqoNFnrdvtH6gNvMIi9ipsYNkl9M0S3te7gj6Lud57DskTxJ6gU0fi/FPcgRoukQ1Osqfxm7wbDRh1ogYWR9SJflueYvIMB2s1If/rt8hajfi5ux+asQkqG0SWlM/4MIAmH2fxDQTsi9Y=</source>
  </file>
  <package name="Default" full_name="Default"/>
  <package name="Haldayne" full_name="Haldayne"/>
  <package name="global" full_name="global"/>
  <namespace name="Haldayne" full_name="Haldayne">
    <namespace name="Boost" full_name="Haldayne\Boost">
      <namespace name="Contract" full_name="Haldayne\Boost\Contract"/>
    </namespace>
    <namespace name="Customs" full_name="Haldayne\Customs"/>
  </namespace>
  <deprecated count="0"/>
</project>
