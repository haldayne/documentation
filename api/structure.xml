<?xml version="1.0" encoding="utf-8"?>
<project title="Haldayne PHP Componentry" version="2.8.5">
  <partials/>
  <file path="boost/src/MapOfStrings.php" generated-path="boost.src.MapOfStrings.html" hash="99f29ecb101a8abc4b85723b72f2e10b" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Boost" line="8" package="Haldayne">
      <extends>\Haldayne\Boost\GuardedMapAbstract</extends>
      <name>MapOfStrings</name>
      <full_name>\Haldayne\Boost\MapOfStrings</full_name>
      <docblock line="8">
        <description>Implements a map of strings, that is a Map whose values must all pass the
`is_string` test.</description>
        <long-description>Methods accepting a `$collection` may receive any of these types:
  - array
  - object
  - \Traversable
  - \Haldayne\Boost\Map
  - \Haldayne\Boost\Contract\Arrayable
  - \Haldayne\Boost\Contract\Jsonable

Methods accept a `$key` may be of any type: boolean, integer, float,
string, array, object, closure, or resource.

Methods accepting an `$expression` may receive a [PHP callable][1] or a
string. When given a string, the library wraps an anonymous function around
the string code body and returns the result. By way of example, these
are equivalent and both acceptable as an `$expression`:
  - `$_0 &lt; $_1`
  - `function ($_0, $_1) { return $_0 &lt; $_1; }

Expressions lets you write extremely compact code for filtering, at the
one-time run-time cost of converting the string to the body of an anonymous
function.

Expressions, whether given as a callable or a string, receive two formal
arguments: the current value and the current key.  Note that, inside string
expressions, these are represented by `$_0` and `$_1` respectively.</long-description>
        <tag name="package" line="8" description="Haldayne"/>
        <tag name="inherited_from" description="\Haldayne\Boost\GuardedMapAbstract" refers="\Haldayne\Boost\GuardedMapAbstract" link="/classes/Haldayne.Boost.GuardedMapAbstract.html"/>
      </docblock>
      <constant namespace="Haldayne\Boost" line="46" package="Haldayne">
        <name>LOOSE</name>
        <full_name>\Haldayne\Boost\Map::LOOSE</full_name>
        <value>true</value>
        <docblock line="46">
          <description>Should the comparison be made loosely?</description>
          <long-description></long-description>
          <tag name="see" line="46" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="46" description="" link="\Haldayne\Boost\Map::intersect"/>
          <tag name="api" line="46" description=""/>
        </docblock>
      </constant>
      <constant namespace="Haldayne\Boost" line="54" package="Haldayne">
        <name>STRICT</name>
        <full_name>\Haldayne\Boost\Map::STRICT</full_name>
        <value>false</value>
        <docblock line="54">
          <description>Should the comparison be made strictly?</description>
          <long-description></long-description>
          <tag name="see" line="54" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="54" description="" link="\Haldayne\Boost\Map::intersect"/>
          <tag name="api" line="54" description=""/>
        </docblock>
      </constant>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="961" package="Haldayne">
        <name>$array</name>
        <full_name>\Haldayne\Boost\Map::array</full_name>
        <default>array()</default>
        <docblock line="961">
          <description>The internal array representation of the map.</description>
          <long-description></long-description>
          <tag name="var" line="961" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="967" package="Haldayne">
        <name>$map_key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::map_key_to_hash</full_name>
        <default>array()</default>
        <docblock line="967">
          <description>Track hashes we've created for non-string keys.</description>
          <long-description></long-description>
          <tag name="var" line="967" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="17" package="Haldayne">
        <name>join</name>
        <full_name>\Haldayne\Boost\MapOfStrings::join()</full_name>
        <docblock line="17">
          <description>Join all the strings in this map with the separator between them.</description>
          <long-description></long-description>
          <tag name="param" line="17" description="" type="string" variable="$separator">
            <type>string</type>
          </tag>
          <tag name="return" line="17" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="api" line="17" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$separator</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="37" package="Haldayne">
        <name>letter_frequency</name>
        <full_name>\Haldayne\Boost\MapOfStrings::letter_frequency()</full_name>
        <docblock line="37">
          <description>Calculate frequency of letters in all strings.</description>
          <long-description>Counts how many times each letter occurs within every string in this
map.  Returns a new Map of letter to number of occurrences.  Only
letters that appear will be in the resulting map.</long-description>
          <tag name="return" line="37" description="" type="\Haldayne\Boost\MapOfIntegers">
            <type>\Haldayne\Boost\MapOfIntegers</type>
          </tag>
          <tag name="api" line="37" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="59" package="Haldayne">
        <name>allowed</name>
        <full_name>\Haldayne\Boost\MapOfStrings::allowed()</full_name>
        <docblock line="59">
          <description>Decides if the given element should be allowed into the map.</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\Haldayne\Boost\GuardedMapAbstract::allowed()" refers="\Haldayne\Boost\GuardedMapAbstract::allowed()" link="/classes/Haldayne.Boost.GuardedMapAbstract.html#method_allowed"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="Haldayne\Boost" line="16" package="Haldayne">
        <name>allowed</name>
        <full_name>\Haldayne\Boost\GuardedMapAbstract::allowed()</full_name>
        <docblock line="16">
          <description>Decides if the given element should be allowed into the map.</description>
          <long-description></long-description>
          <tag name="param" line="16" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="16" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\GuardedMapAbstract</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="741" package="Haldayne">
        <name>offsetSet</name>
        <full_name>\Haldayne\Boost\Map::offsetSet()</full_name>
        <docblock line="741">
          <description>Set the value at a given key.</description>
          <long-description>If key is null, the value is appended to the array using numeric
indexes, just like native PHP. Unlike native-PHP, $key can be of any
type: boolean, int, float, string, array, object, closure, resource.</long-description>
          <tag name="param" line="741" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="741" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="741" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="49" package="Haldayne">
        <name>normalize</name>
        <full_name>\Haldayne\Boost\GuardedMapAbstract::normalize()</full_name>
        <docblock line="49">
          <description>Normalize the value before storing.</description>
          <long-description>This default implementation does nothing.</long-description>
          <tag name="param" line="49" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="49" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\GuardedMapAbstract</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="67" package="Haldayne">
        <name>__construct</name>
        <full_name>\Haldayne\Boost\Map::__construct()</full_name>
        <docblock line="67">
          <description>Create a new map.</description>
          <long-description>Initialize the map with the given collection, which can be any type
that is "collection-like": array, object, Traversable, another Map,
etc.</long-description>
          <tag name="param" line="67" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="throws" line="67" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="api" line="67" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default>null</default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="96" package="Haldayne">
        <name>all</name>
        <full_name>\Haldayne\Boost\Map::all()</full_name>
        <docblock line="96">
          <description>Create a new map containing all members from this map whose elements
satisfy the expression.</description>
          <long-description>The expression decides whether an element is in or out. If the
expression returns boolean false, the element is out.  Otherwise, it's
in.

```
$nums = new Map(range(0, 9));
$even = $nums-&gt;all(function ($val, $key) { return 0 == $val % 2; });
$odds = $nums-&gt;all('$_0 &amp; 1');
```</long-description>
          <tag name="param" line="96" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="96" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="96" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="117" package="Haldayne">
        <name>filter</name>
        <full_name>\Haldayne\Boost\Map::filter()</full_name>
        <docblock line="117">
          <description>Apply the filter to every element, creating a new map with only those
elements from the original map that do not fail this filter.</description>
          <long-description>The filter expressions receives two arguments:
  - The current value
  - The current key

If the filter returns exactly boolean false, the element is not copied
into the new map.  Otherwise, it is.  Keys from the original map carry
into the new map.</long-description>
          <tag name="param" line="117" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="117" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="117" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="148" package="Haldayne">
        <name>first</name>
        <full_name>\Haldayne\Boost\Map::first()</full_name>
        <docblock line="148">
          <description>Return a new map containing the first N elements passing the
expression.</description>
          <long-description>Like `find`, but stop after finding N elements from the front. Defaults
to N = 1.

```
$nums = new Map(range(0, 9));
$odd3 = $nums-&gt;first('1 == ($_0 % 2)', 3); // first three odds
```</long-description>
          <tag name="param" line="148" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="148" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="148" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="148" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="172" package="Haldayne">
        <name>last</name>
        <full_name>\Haldayne\Boost\Map::last()</full_name>
        <docblock line="172">
          <description>Return a new map containing the last N elements passing the expression.</description>
          <long-description>Like `first`, but stop after finding N elements from the *end*.
Defaults to N = 1.

```
$nums = new Map(range(0, 9));
$odds = $nums-&gt;last('1 == ($_0 % 2)', 2); // last two odd numbers
```</long-description>
          <tag name="param" line="172" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="172" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="172" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="172" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="187" package="Haldayne">
        <name>every</name>
        <full_name>\Haldayne\Boost\Map::every()</full_name>
        <docblock line="187">
          <description>Test if every element passes the expression.</description>
          <long-description></long-description>
          <tag name="param" line="187" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="187" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="187" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="199" package="Haldayne">
        <name>some</name>
        <full_name>\Haldayne\Boost\Map::some()</full_name>
        <docblock line="199">
          <description>Test if at least one element passes the expression.</description>
          <long-description></long-description>
          <tag name="param" line="199" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="199" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="199" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="211" package="Haldayne">
        <name>none</name>
        <full_name>\Haldayne\Boost\Map::none()</full_name>
        <docblock line="211">
          <description>Test that no elements pass the expression.</description>
          <long-description></long-description>
          <tag name="param" line="211" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="211" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="211" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="225" package="Haldayne">
        <name>has</name>
        <full_name>\Haldayne\Boost\Map::has()</full_name>
        <docblock line="225">
          <description>Determine if a key exists the map.</description>
          <long-description>This is the object method equivalent of the magic isset($map[$key]);</long-description>
          <tag name="param" line="225" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="225" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="225" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="242" package="Haldayne">
        <name>get</name>
        <full_name>\Haldayne\Boost\Map::get()</full_name>
        <docblock line="242">
          <description>Get the value corresponding to the given key.</description>
          <long-description>If the key does not exist in the map, return the default.

This is the object method equivalent of the magic $map[$key].</long-description>
          <tag name="param" line="242" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="242" description="" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="242" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="242" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="260" package="Haldayne">
        <name>set</name>
        <full_name>\Haldayne\Boost\Map::set()</full_name>
        <docblock line="260">
          <description>Set a key and its corresponding value into the map.</description>
          <long-description>This is the object method equivalent of the magic $map[$key] = 'foo'.</long-description>
          <tag name="param" line="260" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="260" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="260" description="" type="\Haldayne\Boost\MapOfStrings">
            <type>\Haldayne\Boost\MapOfStrings</type>
          </tag>
          <tag name="api" line="260" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="275" package="Haldayne">
        <name>forget</name>
        <full_name>\Haldayne\Boost\Map::forget()</full_name>
        <docblock line="275">
          <description>Remove a key and its corresponding value from the map.</description>
          <long-description>This is the object method equivalent of the magic unset($map[$key]);</long-description>
          <tag name="param" line="275" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="275" description="" type="\Haldayne\Boost\MapOfStrings">
            <type>\Haldayne\Boost\MapOfStrings</type>
          </tag>
          <tag name="api" line="275" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="287" package="Haldayne">
        <name>isEmpty</name>
        <full_name>\Haldayne\Boost\Map::isEmpty()</full_name>
        <docblock line="287">
          <description>Determine if any key and their values have been set into the map.</description>
          <long-description></long-description>
          <tag name="return" line="287" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="287" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="305" package="Haldayne">
        <name>diff</name>
        <full_name>\Haldayne\Boost\Map::diff()</full_name>
        <docblock line="305">
          <description>Return a new map containing those keys and values that are not present
in the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose values match will
be removed.  Otherwise, comparison is strict, and elements whose keys
and values match will be removed.</long-description>
          <tag name="param" line="305" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="305" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="305" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="305" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="326" package="Haldayne">
        <name>intersect</name>
        <full_name>\Haldayne\Boost\Map::intersect()</full_name>
        <docblock line="326">
          <description>Return a new map containing those keys and values that are present in
the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose value match will
be included.  Otherise, comparison is strict, and elements whose keys &amp;
values match will be included.</long-description>
          <tag name="param" line="326" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="326" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="326" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="326" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="357" package="Haldayne">
        <name>partition</name>
        <full_name>\Haldayne\Boost\Map::partition()</full_name>
        <docblock line="357">
          <description>Groups elements of this map based on the result of an expression.</description>
          <long-description>Calls the expression for each element in this map. The expression
receives the value and key, respectively.  The expression may return
any value: this value is the grouping key and the element is put into
that group.

```
$nums = new Map(range(0, 9));
$part = $nums-&gt;partition(function ($value, $key) {
   return 0 == $value % 2 ? 'even' : 'odd';
});
var_dump(
    $part['odd']-&gt;count(), // 5
    array_sum($part['even']-&gt;toArray()) // 20
);
```</long-description>
          <tag name="param" line="357" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="357" description="" type="\Haldayne\Boost\MapOfCollections">
            <type>\Haldayne\Boost\MapOfCollections</type>
          </tag>
          <tag name="api" line="357" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="398" package="Haldayne">
        <name>map</name>
        <full_name>\Haldayne\Boost\Map::map()</full_name>
        <docblock line="398">
          <description>Walk the map, applying the expression to every element, transforming
them into a new map.</description>
          <long-description>```
$nums = new Map(range(0, 9));
$doubled = $nums-&gt;map('$_0 * 2');
```

The expression receives two arguments:
  - The current value in `$_0`
  - The current key in `$_1`

The keys in the resulting map will be the same as the keys in the
original map: only the values have (potentially) changed.

Recommended to use this method when you are mapping from one type to
the same type: int to int, string to string, etc. If you are changing
types, use the more powerful `transform` method.</long-description>
          <tag name="param" line="398" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="398" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="api" line="398" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="440" package="Haldayne">
        <name>reduce</name>
        <full_name>\Haldayne\Boost\Map::reduce()</full_name>
        <docblock line="440">
          <description>Walk the map, applying a reducing expression to every element, so as to
reduce the map to a single value.</description>
          <long-description>The `$reducer` expression receives three arguments:
  - The current reduction (`$_0`)
  - The current value (`$_1`)
  - The current key (`$_2`)

The initial value, if given or null if not, is passed as the current
reduction on the first invocation of `$reducer`. The return value from
`$reducer` then becomes the new, current reduced value.

```
$nums = new Map(range(0, 3));
$sum = $nums-&gt;reduce('$_0 + $_1');
// $sum == 6
```

If `$finisher` is a callable or string expression, then it will be
called last, after iterating over all elements. It will be passed
reduced value. The `$finisher` must return the new final value.</long-description>
          <tag name="param" line="440" description="" type="callable|string" variable="$reducer">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="440" description="" type="mixed" variable="$initial">
            <type>mixed</type>
          </tag>
          <tag name="param" line="440" description="" type="callable|string|null" variable="$finisher">
            <type>callable</type>
            <type>string</type>
            <type>null</type>
          </tag>
          <tag name="return" line="440" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="440" description=""/>
          <tag name="see" line="440" description="" link="http://php.net/manual/en/function.array-reduce.php"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$reducer</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$initial</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finisher</name>
          <default>null</default>
          <type>callable|string|null</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="467" package="Haldayne">
        <name>rekey</name>
        <full_name>\Haldayne\Boost\Map::rekey()</full_name>
        <docblock line="467">
          <description>Change the key for every element in the map using an expression to
calculate the new key.</description>
          <long-description>```
$keyed_by_bytecode = new Map(count_chars('war of the worlds', 1));
$keyed_by_letter   = $keyed_by_bytecode-&gt;rekey('chr($_1)');
```</long-description>
          <tag name="param" line="467" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="467" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="467" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="497" package="Haldayne">
        <name>merge</name>
        <full_name>\Haldayne\Boost\Map::merge()</full_name>
        <docblock line="497">
          <description>Merge the given collection into this map.</description>
          <long-description>The merger callable decides how to merge the current map's value with
the given collection's value.  The merger callable receives two
arguments:
  - This map's value at the given key
  - The collection's value at the given key

If the current map does not have a value for a key in the collection,
then the default value is assumed.</long-description>
          <tag name="param" line="497" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="497" description="" type="callable" variable="$merger">
            <type>callable</type>
          </tag>
          <tag name="param" line="497" description="" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="497" description="" type="\Haldayne\Boost\MapOfStrings">
            <type>\Haldayne\Boost\MapOfStrings</type>
          </tag>
          <tag name="api" line="497" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$merger</name>
          <default></default>
          <type>callable</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="577" package="Haldayne">
        <name>transform</name>
        <full_name>\Haldayne\Boost\Map::transform()</full_name>
        <docblock line="577">
          <description>Flexibly and thoroughly change this map into another map.</description>
          <long-description>```
// transform a word list into a map of word to frequency in the list
use Haldayne\Boost\Map;
$words   = new Map([ 'bear', 'bee', 'goose', 'bee' ]);
$lengths = $words-&gt;transform(
    function (Map $new, $word) {
        if ($new-&gt;has($word)) {
            $new-&gt;set($word, $new-&gt;get($word)+1);
        } else {
            $new-&gt;set($word, 1);
        }
    }
);
```

Sometimes you need to create one map from another using a strategy
that isn't one-to-one. You may need to change keys. You may need to
add multiple elements. You may need to delete elements. You may need
to change from a map to a number.

Whatever the case, the other simpler methods in Map don't quite fit the
problem. What you need, and what this method provides, is a complete
machine to transform this map into something else:

```
// convert a word list into a count of unique letters in those words
use Haldayne\Boost\Map;
$words   = new Map([ 'bear', 'bee', 'goose', 'bee' ]);
$letters = $words-&gt;transform(
    function ($frequencies, $word) {
        foreach (count_chars($word, 1) as $byte =&gt; $frequency) {
            $letter = chr($byte);
            if ($frequencies-&gt;has($letter)) {
                $new-&gt;set($letter, $frequencies-&gt;get($letter)+1);
            } else {
                $new-&gt;set($letter, 1);
            }
        }
    },
    function (Map $original) { return new MapOfIntegers(); },
    function (MapOfIntegers $new) { return $new-&gt;sum(); }
);
```

This method accepts three callables
1. `$creator`, which is called first with the current map, performs any
initialization needed.  The result of this callable will be passed to
all the other callables.  If no creator is given, then use a default
one that returns an empty Map.

2. `$transformer`, which is called for every element in this map and
receives the initialized value, the current value, and the current key
in that order. The transformer should modify the initialized value
appropriately. Often this means adding to a new map zero or more
tranformed values.

3. `$finisher`, which is called last, receives the initialized value
that was modified by the transformer calls. The finisher may transform
that value once more as needed. If no finisher given, then no finishing
step is made.</long-description>
          <tag name="param" line="577" description="" type="callable" variable="$tranformer">
            <type>callable</type>
          </tag>
          <tag name="param" line="577" description="" type="callable|null" variable="$creator">
            <type>callable</type>
            <type>null</type>
          </tag>
          <tag name="param" line="577" description="" type="callable|null" variable="$finisher">
            <type>callable</type>
            <type>null</type>
          </tag>
          <tag name="return" line="577" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="577" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$transformer</name>
          <default></default>
          <type>callable</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$creator</name>
          <default>null</default>
          <type>callable|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finisher</name>
          <default>null</default>
          <type>callable|null</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="613" package="Haldayne">
        <name>into</name>
        <full_name>\Haldayne\Boost\Map::into()</full_name>
        <docblock line="613">
          <description>Put all of this map's elements into the target and return the target.</description>
          <long-description>```
$words = new MapOfStrings([ 'foo', 'bar' ]);
$words-&gt;map('strlen($_0)')-&gt;into(new MapOfInts)-&gt;sum(); // 6
```

Use when you've mapped your elements into a different type, and you
want to fluently perform operations on the new type. In the example,
the sum of the words' lengths was calculated.</long-description>
          <tag name="return" line="613" description="" type="\Haldayne\Boost\$target">
            <type>\Haldayne\Boost\$target</type>
          </tag>
          <tag name="api" line="613" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$target</name>
          <default></default>
          <type>\Haldayne\Boost\Map</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="627" package="Haldayne">
        <name>push</name>
        <full_name>\Haldayne\Boost\Map::push()</full_name>
        <docblock line="627">
          <description>Treat the map as a stack and push an element onto its end.</description>
          <long-description></long-description>
          <tag name="return" line="627" description="" type="\Haldayne\Boost\MapOfStrings">
            <type>\Haldayne\Boost\MapOfStrings</type>
          </tag>
          <tag name="api" line="627" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$element</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="639" package="Haldayne">
        <name>pop</name>
        <full_name>\Haldayne\Boost\Map::pop()</full_name>
        <docblock line="639">
          <description>Treat the map as a stack and pop an element off its end.</description>
          <long-description></long-description>
          <tag name="return" line="639" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="639" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="662" package="Haldayne">
        <name>count</name>
        <full_name>\Haldayne\Boost\Map::count()</full_name>
        <docblock line="662">
          <description>Count the number of items in the map.</description>
          <long-description></long-description>
          <tag name="return" line="662" description="" type="integer">
            <type>integer</type>
          </tag>
          <tag name="api" line="662" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="676" package="Haldayne">
        <name>toArray</name>
        <full_name>\Haldayne\Boost\Map::toArray()</full_name>
        <docblock line="676">
          <description>Copy this map into an array, recursing as necessary to convert
contained collections into arrays.</description>
          <long-description></long-description>
          <tag name="api" line="676" description=""/>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Arrayable::toArray()" refers="\Haldayne\Boost\Contract\Arrayable::toArray()" link="/classes/Haldayne.Boost.Contract.Arrayable.html#method_toArray"/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="698" package="Haldayne">
        <name>toJson</name>
        <full_name>\Haldayne\Boost\Map::toJson()</full_name>
        <docblock line="698">
          <description>Return a JSON representation of the object.</description>
          <long-description></long-description>
          <tag name="api" line="698" description=""/>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Jsonable::toJson()" refers="\Haldayne\Boost\Contract\Jsonable::toJson()" link="/classes/Haldayne.Boost.Contract.Jsonable.html#method_toJson"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>0</default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="712" package="Haldayne">
        <name>offsetExists</name>
        <full_name>\Haldayne\Boost\Map::offsetExists()</full_name>
        <docblock line="712">
          <description>Determine if a value exists at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="712" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="712" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="724" package="Haldayne">
        <name>offsetGet</name>
        <full_name>\Haldayne\Boost\Map::offsetGet()</full_name>
        <docblock line="724">
          <description>Get a value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="724" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="724" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="768" package="Haldayne">
        <name>offsetUnset</name>
        <full_name>\Haldayne\Boost\Map::offsetUnset()</full_name>
        <docblock line="768">
          <description>Unset the value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="768" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="768" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="782" package="Haldayne">
        <name>getIterator</name>
        <full_name>\Haldayne\Boost\Map::getIterator()</full_name>
        <docblock line="782">
          <description>Get an iterator for a copy of the map.</description>
          <long-description></long-description>
          <tag name="return" line="782" description="" type="\ArrayIterator">
            <type>\ArrayIterator</type>
          </tag>
          <tag name="api" line="782" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="802" package="Haldayne">
        <name>passes</name>
        <full_name>\Haldayne\Boost\Map::passes()</full_name>
        <docblock line="802">
          <description>Decide if the given result is considered "passing" or "failing".</description>
          <long-description>This method provides a definitive reference for what this and all
derived classes consider passing:
  - if the result is strictly false, the result "failed"
  - otherwise, the result "succeeded"</long-description>
          <tag name="param" line="802" description="" type="mixed" variable="$result">
            <type>mixed</type>
          </tag>
          <tag name="return" line="802" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$result</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="813" package="Haldayne">
        <name>is_collection_like</name>
        <full_name>\Haldayne\Boost\Map::is_collection_like()</full_name>
        <docblock line="813">
          <description>Decide if the given value is considered collection-like.</description>
          <long-description></long-description>
          <tag name="param" line="813" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="813" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="843" package="Haldayne">
        <name>collection_to_array</name>
        <full_name>\Haldayne\Boost\Map::collection_to_array()</full_name>
        <docblock line="843">
          <description>Give me a native PHP array, regardless of what kind of collection-like
structure is given.</description>
          <long-description></long-description>
          <tag name="param" line="843" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Traversable|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|object|array" variable="$items">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="return" line="843" description="" type="array|boolean">
            <type>array</type>
            <type>boolean</type>
          </tag>
          <tag name="throws" line="843" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="880" package="Haldayne">
        <name>grep</name>
        <full_name>\Haldayne\Boost\Map::grep()</full_name>
        <docblock line="880">
          <description>Finds elements for which the given code passes, optionally limited to a
maximum count.</description>
          <long-description>If limit is null, no limit on number of matches. If limit is positive,
return that many from the front of the array. If limit is negative,
return that many from the end of the array.</long-description>
          <tag name="param" line="880" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="880" description="" type="integer|null" variable="$limit">
            <type>integer</type>
            <type>null</type>
          </tag>
          <tag name="return" line="880" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$limit</name>
          <default>null</default>
          <type>integer|null</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="925" package="Haldayne">
        <name>walk</name>
        <full_name>\Haldayne\Boost\Map::walk()</full_name>
        <docblock line="925">
          <description>Execute the given code over each element of the map. The code receives
the value by reference and then the key as formal parameters.</description>
          <long-description>The items are walked in the order they exist in the map. If the code
returns boolean false, then the iteration halts. Values can be modified
from within the callback, but not keys.

Example:
```
$map-&gt;each(function (&amp;$value, $key) { $value++; return true; })-&gt;sum();
```</long-description>
          <tag name="param" line="925" description="" type="callable" variable="$code">
            <type>callable</type>
          </tag>
          <tag name="return" line="925" description="" type="\Haldayne\Boost\MapOfStrings">
            <type>\Haldayne\Boost\MapOfStrings</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="942" package="Haldayne">
        <name>walk_backward</name>
        <full_name>\Haldayne\Boost\Map::walk_backward()</full_name>
        <docblock line="942">
          <description>Like `walk`, except walk from the end toward the front.</description>
          <long-description></long-description>
          <tag name="param" line="942" description="" type="callable" variable="$code">
            <type>callable</type>
          </tag>
          <tag name="return" line="942" description="" type="\Haldayne\Boost\MapOfStrings">
            <type>\Haldayne\Boost\MapOfStrings</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="977" package="Haldayne">
        <name>key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::key_to_hash()</full_name>
        <docblock line="977">
          <description>Lookup the hash for the given key. If a hash does not yet exist, one is
created.</description>
          <long-description></long-description>
          <tag name="param" line="977" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="977" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="throws" line="977" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="1015" package="Haldayne">
        <name>hash_to_key</name>
        <full_name>\Haldayne\Boost\Map::hash_to_key()</full_name>
        <docblock line="1015">
          <description>Lookup the key for the given hash.</description>
          <long-description></long-description>
          <tag name="param" line="1015" description="" type="string" variable="$hash">
            <type>string</type>
          </tag>
          <tag name="return" line="1015" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$hash</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="1035" package="Haldayne">
        <name>call</name>
        <full_name>\Haldayne\Boost\Map::call()</full_name>
        <docblock line="1035">
          <description>Call the expression with the arguments.</description>
          <long-description></long-description>
          <tag name="param" line="1035" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="throws" line="1035" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="59" code="PPC:ERR-50015">Argument $value is missing from the Docblock of allowed</error>
    </parse_markers>
    <source>eJydlU1v2zAMhu/+FTwYiJ2lCXpdln6sLbYOGFp0PRZoFZmONciSJ8nNjCH/fZT80SRtimG6JBaph2/El/Gn06qoIsVKtBXjCF+ZzFij8OGz1tbNo2g2HkcwhuuykliichYYlKwCnYN1RqiVnYArmAPhI98psi60RXhmskYLZW0dMCmhYtZSInrYk7CP7eEncGjdlDZnEZc+hQg3+Y+WDPjbocosfKmZyTCj2PmSDjLuoj8R0Arq/BrDNy1UqERFemlAW64gZV7xWriiDWLFDHPawBLdGtHnYDntQD3vzCeVHQni4dAQN+hqo7qEYZdVovs+C59VvZSCQ14r7oRW8JNkJi+0NCS1P8avDhp71UcnBrOaYzJE/RpISexZmE1IXNCQQk0Xvw3fAu8VSEYjWCwW0DHgFGjj4/A4hW3KtK8w38FtJjuPo9HwmLaJm2i/SRdM8loyh5Ab/FWj4o13kkTn0IR2+Q523dvvyIWuvf8KvaZ+qgacINcCMl50ANCc14TxnSYUPqNp+gZ2TuhZZIgpwF24DG9chetg3kEMOA2qLpeemrdgQ3LR0rEbJZse1EsPM8CqCpmh+vQjltjWRLpyW0vnRfiq+zbrGvKwO3kPYQ6ulcMV0f/ZXa2ax+Fyk/f9RaOkbK5NedBiPUkgzXm81iZ7y1SECG1IuG/RIy+YsUnInsBxCsxCvGyo6YsTGIjNWyC/4q4BC+CFScLBdP5mpsh3FR6dFIzqtufTQ/xQY+eURdefmuyFVi+h9MPxAR0bQEmT91/lDjJf7W7eG76XlnkXx9qIlVBM0h30Le8cHkxlk3S+xdsb1xnc3t3cX13cX13C+e31qyH+cyZUgUa4S803u3Y02iF39Acy6KF51mvMkji8EA7YcXgf9Gm9oE30F0qA31c=</source>
  </file>
  <file path="customs/src/UploadException.php" generated-path="customs.src.UploadException.html" hash="e9bac1b058cb70f9b48ed6e43e2c85ea" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Customs" line="13" package="Haldayne">
      <extends>\RuntimeException</extends>
      <name>UploadException</name>
      <full_name>\Haldayne\Customs\UploadException</full_name>
      <docblock line="13">
        <description>Represents an exception during upload.</description>
        <long-description>Occurs when the *server* had a problem, or the *client* appears to be
attempting to bypass the normal PHP file upload safeguards.</long-description>
        <tag name="see" line="13" description="which occurs when the client uploads anything other than a&#10;complete file." link="\Haldayne\Customs\UploadError"/>
        <tag name="package" line="13" description="Haldayne"/>
      </docblock>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="61" package="Haldayne">
        <name>$htmlName</name>
        <full_name>\Haldayne\Customs\HtmlNameAccessorTrait::htmlName</full_name>
        <default></default>
        <docblock line="61">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="61" description="&lt;p&gt;The HTML name we were given.&lt;/p&gt;" type="string" variable="$htmlName">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="53" package="Haldayne">
        <name>getHtmlName</name>
        <full_name>\Haldayne\Customs\HtmlNameAccessorTrait::getHtmlName()</full_name>
        <docblock line="53">
          <description>Get the HTML variable name.</description>
          <long-description></long-description>
          <tag name="return" line="53" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="api" line="53" description=""/>
          <tag name="since" line="53" description="1.0.0"/>
        </docblock>
        <inherited_from>\Haldayne\Customs\HtmlNameAccessorTrait</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>eJxdkU9rHDEMxe/+FDospBmS7D3pn5QQyKkNIb0tBK1HGxs8trHkzi4l373y7OxsqS8CS36/p+fP37LLJuJAnNESPGHo8RBp81BZ0sB3xqy7zkAHL5QLMUVhwAi0t5TFpwh9LT6+Q80hYX+jk234p7W1MIyOIogj6JjKbyodOOwBIZe0DTRcQSrHtg1elTvAnAn1oSTYUhNCERoUpIR2d8jIPD2JqQwY4PnpGXY+0MwHxh29Vyw9n6zcMxH8mrqPpShwdN46SP85PDqYZdqKB3GNmrTZTOrO2ORsGnIgoYnaGGtjQzM1I5ZcaC8UVWnzUqP4gZaO+WNAT2VNW4bwQ7P/bi0xp/Ja0ItG3vpT7O108FAIlYgQaTwtunzAzWnq3kehEjHMF+up5roN3sKuRjvZenuzKbKUauXTys38K1jZ1GvZnP2vaA9fINYQLieho+tJEotGdXv7r9TFq8ZEMCKfvxdGLw4OqZbZ9MXCUfHLu0VwpVHz9VcmOQVytjaPfZgP8xddvt8x</source>
  </file>
  <file path="fox/src/Y.php" generated-path="fox.src.Y.html" hash="85a196db58a6fcf0c71b3398dc97b281" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Fox" line="38" package="Haldayne">
      <extends/>
      <name>Y</name>
      <full_name>\Haldayne\Fox\Y</full_name>
      <docblock line="38">
        <description>Implements the Y-combinator.</description>
        <long-description>It's possible to express a "recursive" function -- like Fibonacci and
factorials -- without recursion or iteration. Using a surprising and
admittedly dark magic approach discovered by Haskell Curry called the Y-
combinator, you can use lambda functions to calculate fixed-points and
to solve around them:

```
// calculates n-th Fibonacci using two fixed points
// this version runs in exponential time
$fibonacci = new Y(function ($fibonacci) {
    return function ($n) use ($fibonacci) {
        switch ($n) {
        case 0:  return 0;
        case 1:  return 1;
        default: return $fibonacci($n-1) + $fibonacci($n-2);
        }
    }
});
var_dump($fibonacci(6));
```</long-description>
        <tag name="TODO" line="38" description="The recursive callable which we pass to the Y-combinator has exponential&#10;run-time. But, we can change that to linear time just by adding caching&#10;to the internal combinator. That's where this class comes in: it internally&#10;caches intermediary results, so that simple recursive definitions have&#10;optimal performance without having to implement their own caching."/>
        <tag name="see" line="38" description="" link="https://php100.wordpress.com/2009/04/13/php-y-combinator/"/>
        <tag name="see" line="38" description="" link="http://matt.might.net/articles/implementation-of-recursive-fixed-point-y-combinator-in-javascript-for-memoization/"/>
        <tag name="package" line="38" description="Haldayne"/>
      </docblock>
      <property static="false" visibility="private" namespace="Haldayne\Fox" line="55" package="Haldayne">
        <name>$code</name>
        <full_name>\Haldayne\Fox\Y::code</full_name>
        <default>null</default>
        <docblock line="55">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Fox" line="56" package="Haldayne">
        <name>$cache</name>
        <full_name>\Haldayne\Fox\Y::cache</full_name>
        <default>array()</default>
        <docblock line="56">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Fox" line="40" package="Haldayne">
        <name>__construct</name>
        <full_name>\Haldayne\Fox\Y::__construct()</full_name>
        <docblock line="40">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Fox" line="45" package="Haldayne">
        <name>__invoke</name>
        <full_name>\Haldayne\Fox\Y::__invoke()</full_name>
        <docblock line="45">
          <description></description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Fox" line="58" package="Haldayne">
        <name>combinator</name>
        <full_name>\Haldayne\Fox\Y::combinator()</full_name>
        <docblock line="58">
          <description></description>
          <long-description></long-description>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="40" code="PPC:ERR-50015">Argument $code is missing from the Docblock of __construct</error>
      <error line="40" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="45" code="PPC:ERR-50008">No summary for method __invoke()</error>
      <error line="58" code="PPC:ERR-50008">No summary for method combinator()</error>
      <error line="55" code="PPC:ERR-50007">No summary for property $code</error>
      <error line="56" code="PPC:ERR-50007">No summary for property $cache</error>
    </parse_markers>
    <source>eJx9VNuO4zYMfc9XEIsBmkzjOLMtCjTpZbeXRedpF8W0wKAtMozMxNqRJUOSk0mL/HtJOXHsLFq9+MLDI14O+c33dVmPLFYUalQEv6Ap8GDpz3fuZTka5be3I7iF+6o2VJGNAWJJ8JgpV621xej8jO0JEj8LULsQ9NoQRAf0UnsKARBeeVKND3pHr2DTWBW1s5BlYPQzwTu9dhaV0oC2EKINKqbVaIJg9jqWrolwomBH50FH8igsM/gtaLvlO0Lja6/bj5YHi0rHSIU5QIH+GSrcagVY196hKqHQQbkdeSpgfeC0wzMZAz823h9AoTH8v01VuC7pTuHgGgZYaAKBwWpdYJdUkLzZWTUGI8FGv1CR1U5L3U5RMSA4syNA7xqb7qgWpxI+PT3JI88vHAFsFstekZqUYty7lh1a9pNbLHUAzinVyTccj7bSB2e5dVxRiLoiwd5sOsJvwdIeHsddY8YX4wT+AYHL8RQbb6EHs5NUgyH+DJcTuHlc6YQcGBSy33zRkc6Xn1jvLta7gbWgDTYmLs7Wy+18T3Y3gc+vfr2eDPyP54/0cmyNO/SroqnqXi7jryatre2KvL15eP/Te3l5YGF0mk5qQRH9vtSc7p6gxpCkcD0rUGLo90O4uE2ZtGUGPzRxKt4iLlWi3fIYlRiFyGhL6FP74GMTokgWi0KkoFjM/DxpS25kQZC33O3ekHLIKAO6L1nxrU6UkSgZQyKTBQ9V52kOSfTMnGz8s6JCI08GTzQXP0xZxG1wQctq6FWD+6OtbqehxF2Sm6s5cg6oJr9xvkLLi+Y82IxJinagz0tGstAe3N6es5Mlk5T4JhBBGWMdFnnOm+tuPp/tnS/SqplxMvnr+fzrfP5lfveF2LNDr/z5gIEJKoxxVultGWeWYo4+amUo5F0kaclkbpN1+WW9oR6QZ9pmH3GHQXldx4zzzCqqnP47ccjV+agt+eOIh4FP3awNb6RuolYrxUWLvlFx3GnqRrmCJgnfesm5kQZm34mJ5zdBlqNW0//BrO3OPdP4mug0Q3LbimfZr8Rlhd7jYdyB0ihLKdRiccl3PJkOEMlzS5G9t+F0kZzJIDJeUh9+vf/97cPP8PbD/Slar3eyLm9O+djGmOWVRaTIpj/+Wg59uhT7gfUrJQB27G832Wrd8pDvJRyX1yVJjuMrt0HC53B7zVgOAGcmsfSYuq15TdjGuxHKNqxPrP/XLvacXjfhiuLY+z52fTmO/gVUMn1p</source>
  </file>
  <file path="fox/src/Retry.php" generated-path="fox.src.Retry.html" hash="4e8a39ab8b2c4e8aa2759e5d8c647bf7" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Fox" line="30" package="Haldayne">
      <extends/>
      <name>Retry</name>
      <full_name>\Haldayne\Fox\Retry</full_name>
      <docblock line="30">
        <description>Runs a callable, retrying using exponential back-off if the callable fails.</description>
        <long-description>```
use Haldayne\Fox\Retry;
$lambda = new Retry(function ($src, $dst) { return copy($src, $dst); });
$lambda-&gt;setAttempts(3);
if (false === $lambda('foo', 'bar')) {
    throw new \RuntimeException(sprintf(
         'Failed to copy file after %d tries',
         $lambda-&gt;getAttempts()
    ));
}
```
Network resources may not respond immediately, owing to *temporary* issues
in resource availability. The usual technique for dealing with these error
responses is to implement retry logic in the client. This technique
increases reliability of the client and reduces operational costs for the
developer.

If the given callback returns exactly boolean false, Retry will attempt
the callback again after waiting exponentially longer times: 1 second,
2 seconds, 4 seconds, 8 seconds, etc. up to the maximum attempts limit.
The default attempt limit is 5.  Also, you can change the back-off
strategy if you'd like.</long-description>
        <tag name="package" line="30" description="Haldayne"/>
      </docblock>
      <property static="false" visibility="private" namespace="Haldayne\Fox" line="81" package="Haldayne">
        <name>$code</name>
        <full_name>\Haldayne\Fox\Retry::code</full_name>
        <default>null</default>
        <docblock line="81">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Fox" line="82" package="Haldayne">
        <name>$attempts</name>
        <full_name>\Haldayne\Fox\Retry::attempts</full_name>
        <default>null</default>
        <docblock line="82">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Fox" line="83" package="Haldayne">
        <name>$strategy</name>
        <full_name>\Haldayne\Fox\Retry::strategy</full_name>
        <default>null</default>
        <docblock line="83">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Fox" line="32" package="Haldayne">
        <name>__construct</name>
        <full_name>\Haldayne\Fox\Retry::__construct()</full_name>
        <docblock line="32">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Fox" line="39" package="Haldayne">
        <name>__invoke</name>
        <full_name>\Haldayne\Fox\Retry::__invoke()</full_name>
        <docblock line="39">
          <description></description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Fox" line="53" package="Haldayne">
        <name>setAttempts</name>
        <full_name>\Haldayne\Fox\Retry::setAttempts()</full_name>
        <docblock line="53">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$attempts</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Fox" line="63" package="Haldayne">
        <name>getAttempts</name>
        <full_name>\Haldayne\Fox\Retry::getAttempts()</full_name>
        <docblock line="63">
          <description></description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Fox" line="68" package="Haldayne">
        <name>setStrategy</name>
        <full_name>\Haldayne\Fox\Retry::setStrategy()</full_name>
        <docblock line="68">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$callable</name>
          <default></default>
          <type>callable</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Fox" line="74" package="Haldayne">
        <name>getStrategy</name>
        <full_name>\Haldayne\Fox\Retry::getStrategy()</full_name>
        <docblock line="74">
          <description></description>
          <long-description></long-description>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="32" code="PPC:ERR-50015">Argument $code is missing from the Docblock of __construct</error>
      <error line="32" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="39" code="PPC:ERR-50008">No summary for method __invoke()</error>
      <error line="53" code="PPC:ERR-50015">Argument $attempts is missing from the Docblock of setAttempts</error>
      <error line="53" code="PPC:ERR-50008">No summary for method setAttempts()</error>
      <error line="63" code="PPC:ERR-50008">No summary for method getAttempts()</error>
      <error line="68" code="PPC:ERR-50015">Argument $callable is missing from the Docblock of setStrategy</error>
      <error line="68" code="PPC:ERR-50008">No summary for method setStrategy()</error>
      <error line="74" code="PPC:ERR-50008">No summary for method getStrategy()</error>
      <error line="81" code="PPC:ERR-50007">No summary for property $code</error>
      <error line="82" code="PPC:ERR-50007">No summary for property $attempts</error>
      <error line="83" code="PPC:ERR-50007">No summary for property $strategy</error>
    </parse_markers>
    <source>eJyFVk1v20YQvfNXzMGNKEe2k7QBishKoUOC+lIEbtCTAXm1HFILL3fZ/ZBMBPrvnSFFiqJilweb5My+eTPzZqjbP6pNlRhRoq+ERPhT6EzUBh++2ud5ktxcXiZwCffReBAghdZirXEGDoOrlSkgev6Lz5U1aIISGtZCPl3ZPAeVQ9hgfwhyobS/JjhGfHx85H/Rn4Z8uGfgOZsutCjXmYAFGNxB8z7No5FBWQPphXdyBheZD1P4wXSiMyBtVQ8tc9hPh1hXnz2GZQhYVsGnv7Y2opnmQhORxWLReaaT3NrJDCZr4SZTCsGefIWNs7uG0QMVJagSvzxLrJhU6iunTMjTzre5Jl8pbcwg2IYe5PQEIg/o4Bd66xT6yezkRE+2GJCddi7TlvV+UMS/MOyse6IqeBudRA+lqMHYwG+oMRmossRMiYC6noHdccuIzyVjWydcTVXwPqJv6mF6IBBbIi/WSqtQX8N36mb0kXocUG6M+jdSU62DDIVmyJ0KG245lRKds47RWgaeOCnPMVVZaSxJKq2EQNtCSY7ZSEUrsnAgdu5itKSkQ8EwDrU6MAKbD46BoEQdZpELYCt0gptCZKX1wTdEyZnBMtyiZo9OjHctTqG2aBq9soYPovIkbiGDrmFtrUZhoBHLrFUk5aw1iLZLDNUpvkEQhaDM2mbvhAqjUdGcvinIyDryn+A9eJTUr0YPHw4Pfga/HW9/P95ikNcQK64qRy3Fsypj2ZHxoFWpAqfYNC7DXEQdOnNr5aZ8vAZYam9nUNtI3KkCG0GsGtBumBnFByopFjVPDLlOMsJ4Qg5wk0gtvG9LktCs0FXFtabO9hO7WhFtgogypP1KuJA2w2nj355q9B+o/Vef2dQ8L1q3+dihT3QBH8+MPdkFDJaG4WXhNWKVVnaXfqA9Ya7eT3lRtAj75AXyymztE6ZnXA0FeDdPtLXVp+NbUj3XetFIYUVLzq0YayWcE7ShjgnOmhgrmnSyFTTm02Mmo8XUYk4HwTunt2+Jxu24LGNPvk7ppKNaHaoxPztWWNIYp3hq2ifnd4dNfGD7alGHu/iiZz0qMOen/MrEEp2SAz948wbewe2CVkPYCj2wjBM/l8vZkdO8uhz43NGyB+RenGIPPgd3hjBVtnRF5P12/CxMulfQB4Qy+gBrhN2GdgpQdmuk78x8VNAXCjf6LpzUa8j9mPP/9eHvgwKGk3m4e2E6B/PVu85/yuLV2MUg9uupdAFP4G5u4Nv93T/L719g+e3uEMKpLXm2S4N/PUSt56eWgRR+Yh2k1lr3yX/yJtCt</source>
  </file>
  <file path="customs/src/ServerProblemException.php" generated-path="customs.src.ServerProblemException.html" hash="de4dd99400ac6d4ec9c42f73901b2e4e" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Customs" line="21" package="Haldayne">
      <extends>\Haldayne\Customs\UploadException</extends>
      <name>ServerProblemException</name>
      <full_name>\Haldayne\Customs\ServerProblemException</full_name>
      <docblock line="21">
        <description>A specific kind of UploadException: the server had a problem.</description>
        <long-description>It's recommended that you also log the temporary directory and currently
installed extensions for their diagnostic value. The exception message
does not include these details for security, but the exception provides
a method for extracting them. Example:

```
try {
    $it = new UploadIterator;
} catch (ServerProblemException $ex) {
    error_log($ex-&gt;getDiagnosticMessage());
    throw $ex;
}</long-description>
        <tag name="package" line="21" description="Haldayne"/>
        <tag name="inherited_from" description="\Haldayne\Customs\UploadException" refers="\Haldayne\Customs\UploadException" link="/classes/Haldayne.Customs.UploadException.html"/>
      </docblock>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="61" package="Haldayne">
        <name>$htmlName</name>
        <full_name>\Haldayne\Customs\HtmlNameAccessorTrait::htmlName</full_name>
        <default></default>
        <docblock line="61">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="61" description="&lt;p&gt;The HTML name we were given.&lt;/p&gt;" type="string" variable="$htmlName">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="30" package="Haldayne">
        <name>getMessage</name>
        <full_name>\Haldayne\Customs\ServerProblemException::getMessage()</full_name>
        <docblock line="30">
          <description>Return the message specific for this exception code.</description>
          <long-description></long-description>
          <tag name="return" line="30" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="api" line="30" description=""/>
          <tag name="since" line="30" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="63" package="Haldayne">
        <name>getDiagnosticMessage</name>
        <full_name>\Haldayne\Customs\ServerProblemException::getDiagnosticMessage()</full_name>
        <docblock line="63">
          <description>Returns a string containing deeper diagnostics of the system state
at the time the server problem occurred.</description>
          <long-description>Server problems may not last long (a lot of simultaneous uploads
temporarily eats all the upload space) or may be semi-permanent (an
extension is preventing all uploads). It's therefore important to
know as much as possible about the system at the time of the problem.

This method captures the free space available, loaded extensions, and
session id into a string for foresnic diagnostics.</long-description>
          <tag name="return" line="63" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="api" line="63" description=""/>
          <tag name="since" line="63" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="53" package="Haldayne">
        <name>getHtmlName</name>
        <full_name>\Haldayne\Customs\HtmlNameAccessorTrait::getHtmlName()</full_name>
        <docblock line="53">
          <description>Get the HTML variable name.</description>
          <long-description></long-description>
          <tag name="return" line="53" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="api" line="53" description=""/>
          <tag name="since" line="53" description="1.0.0"/>
        </docblock>
        <inherited_from>\Haldayne\Customs\HtmlNameAccessorTrait</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>eJy1VU1v4zYQvftXzMEL24HjbK9Od1sjVlEDmw/I3m6B7UKhxbFNhCIFkrJjLPLfO6Qoy06c3sqDPijyzZvHN6Nffys3ZUexAm3JcoQ/meRsr/Cfm8o6XdjrTufq4qIDFzABW2IuViKHJ6E46BV8LaVmPHnOsXRCqzG4DYJFs0UDG8aBQWn0UmIxIgCPMXM9CwZzXRSoOHLawBzsdQVMWg1SrwOEw6LUhpk9cEGrnaYnRiHzyhhUTu49llDWMSkJBJ8dKksELKy08QjC0E62Vto6ortlssIRLAgZG65ACVu2Ro/ENVpQ2hFkLiuOHsEicHRMyBrTIsUWbj+EZeUCxxaJctwKjtZDMcJ1G83DJuJlWO6EClkVI0ieWVFKHEc1Hh8f/c1Rdj/9gx9d4eATKNxFcWcODSMBrv2CF8iZyzfQnweNH2pxD/pDF58HLRQao01GmvZp/vLzGt30oMltnX1/MLhulruN0TsPUYeqOV51csmshXcCBuW5fW2EDnGgEYzjxwWk6CqjgnBR+NZN9ZkJeyRprjmO4t4G4ndTY1hnSNHDLCvF4dnSASL8Mvo4+hjnrsK9rJbSB6pUHuBJioMAYUHN1w+7E0Hhrmd0+dkTGRx9zhkZ4+vDl/vJNEvSNLu7zxa3D9l0lo4Pa/yIXHu3wlp//uzI0ystORWIULDbCIrlNGxoKohTBSF7VHXvRbyZ3C2yb+lskZyP+Ad51heWhh0ZtkH07y0DqclHJMR/xUn+XiR389n93fkwE9WWHSwJ8Anfy4DjilXSncWJMkdPXB+WvHTq63kfWdKztgE5RVGVKv/IEUs8Lnzre1RoSXtLydMW5rBBYnUZO1HgcduKDQt0HpoNf+3C+ckyCwXbh9ZBVUIXTTT6jO7Oh7aioLyZQl3ZqIttcJrDEHIPyBxlJOWRfhC68QCoNHyEpedXiEvKryA85SiKaqDac6AaKg1u6XvwHCHGqINR3XopgEGqNwThwxM3UkE3QE+KGgCjnCpyJd1LTealNIEtdex6Uclj8aLGbac/0WvhCzv2xJyVdHoYaMDKINZZAtuSZxntHoJne9LRh77xN2CWbBLy5FQ95OiDC3wL8WlZRWV+ZID/t4ecaaevukm31v+bNvTLXD8wt6HmfqPVSqzH4zff+oO2ABqiJRF1q/5J7fQ+2DHs6n0Z/SE/ff9gfwyDovRqn+J7K2KciPJlgscJg4V2mDHOa4ze8CROlt18mcznWXY6/Tap0++eQhbIhOPtv10/ON1AXpTUZ/u9YW/odc1qF2RtAvSfOt3SptJ/9aWbzZP0ryT93kuT2/tFkk2m07T347AmavzSeen8C5O/xuo=</source>
  </file>
  <file path="boost/src/MapOfFloats.php" generated-path="boost.src.MapOfFloats.html" hash="373b9807cc24e1dd41c2bc57057cce6d" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Boost" line="8" package="Haldayne">
      <extends>\Haldayne\Boost\MapOfNumerics</extends>
      <name>MapOfFloats</name>
      <full_name>\Haldayne\Boost\MapOfFloats</full_name>
      <docblock line="8">
        <description>Implements a map of floats, that is a Map whose values must all pass the
`is_float` test.</description>
        <long-description>Methods accepting a `$collection` may receive any of these types:
  - array
  - object
  - \Traversable
  - \Haldayne\Boost\Map
  - \Haldayne\Boost\Contract\Arrayable
  - \Haldayne\Boost\Contract\Jsonable

Methods accept a `$key` may be of any type: boolean, integer, float,
string, array, object, closure, or resource.

Methods accepting an `$expression` may receive a [PHP callable][1] or a
string. When given a string, the library wraps an anonymous function around
the string code body and returns the result. By way of example, these
are equivalent and both acceptable as an `$expression`:
  - `$_0 &lt; $_1`
  - `function ($_0, $_1) { return $_0 &lt; $_1; }

Expressions lets you write extremely compact code for filtering, at the
one-time run-time cost of converting the string to the body of an anonymous
function.

Expressions, whether given as a callable or a string, receive two formal
arguments: the current value and the current key.  Note that, inside string
expressions, these are represented by `$_0` and `$_1` respectively.</long-description>
        <tag name="package" line="8" description="Haldayne"/>
        <tag name="inherited_from" description="\Haldayne\Boost\MapOfNumerics" refers="\Haldayne\Boost\MapOfNumerics" link="/classes/Haldayne.Boost.MapOfNumerics.html"/>
      </docblock>
      <constant namespace="Haldayne\Boost" line="46" package="Haldayne">
        <name>LOOSE</name>
        <full_name>\Haldayne\Boost\Map::LOOSE</full_name>
        <value>true</value>
        <docblock line="46">
          <description>Should the comparison be made loosely?</description>
          <long-description></long-description>
          <tag name="see" line="46" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="46" description="" link="\Haldayne\Boost\Map::intersect"/>
          <tag name="api" line="46" description=""/>
        </docblock>
      </constant>
      <constant namespace="Haldayne\Boost" line="54" package="Haldayne">
        <name>STRICT</name>
        <full_name>\Haldayne\Boost\Map::STRICT</full_name>
        <value>false</value>
        <docblock line="54">
          <description>Should the comparison be made strictly?</description>
          <long-description></long-description>
          <tag name="see" line="54" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="54" description="" link="\Haldayne\Boost\Map::intersect"/>
          <tag name="api" line="54" description=""/>
        </docblock>
      </constant>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="961" package="Haldayne">
        <name>$array</name>
        <full_name>\Haldayne\Boost\Map::array</full_name>
        <default>array()</default>
        <docblock line="961">
          <description>The internal array representation of the map.</description>
          <long-description></long-description>
          <tag name="var" line="961" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="967" package="Haldayne">
        <name>$map_key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::map_key_to_hash</full_name>
        <default>array()</default>
        <docblock line="967">
          <description>Track hashes we've created for non-string keys.</description>
          <long-description></long-description>
          <tag name="var" line="967" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="13" package="Haldayne">
        <name>allowed</name>
        <full_name>\Haldayne\Boost\MapOfFloats::allowed()</full_name>
        <docblock line="13">
          <description>Decides if the given element should be allowed into the map.</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\Haldayne\Boost\MapOfNumerics::allowed()" refers="\Haldayne\Boost\MapOfNumerics::allowed()" link="/classes/Haldayne.Boost.MapOfNumerics.html#method_allowed"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="20" package="Haldayne">
        <name>translate</name>
        <full_name>\Haldayne\Boost\MapOfNumerics::translate()</full_name>
        <docblock line="20">
          <description>Translate this map by the quantities given in the other collection.</description>
          <long-description>This is like addition or subtraction.</long-description>
          <tag name="param" line="20" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Arrayable|\Haldayne\Boost\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Arrayable</type>
            <type>\Haldayne\Boost\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="return" line="20" description="" type="\Haldayne\Boost\MapOfFloats">
            <type>\Haldayne\Boost\MapOfFloats</type>
          </tag>
          <tag name="api" line="20" description=""/>
          <tag name="see" line="20" description="" link="https://en.wikipedia.org/wiki/Translation_(geometry)"/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Arrayable|\Haldayne\Boost\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <inherited_from>\Haldayne\Boost\MapOfNumerics</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="39" package="Haldayne">
        <name>scale</name>
        <full_name>\Haldayne\Boost\MapOfNumerics::scale()</full_name>
        <docblock line="39">
          <description>Scale this map by the factors given in the other collection.</description>
          <long-description>This is like multiplication or division.</long-description>
          <tag name="param" line="39" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Arrayable|\Haldayne\Boost\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Arrayable</type>
            <type>\Haldayne\Boost\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="return" line="39" description="" type="\Haldayne\Boost\MapOfFloats">
            <type>\Haldayne\Boost\MapOfFloats</type>
          </tag>
          <tag name="api" line="39" description=""/>
          <tag name="see" line="39" description="" link="https://en.wikipedia.org/wiki/Scaling_(geometry)"/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Arrayable|\Haldayne\Boost\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <inherited_from>\Haldayne\Boost\MapOfNumerics</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="54" package="Haldayne">
        <name>sum</name>
        <full_name>\Haldayne\Boost\MapOfNumerics::sum()</full_name>
        <docblock line="54">
          <description>Return the sum of all elements in the map.</description>
          <long-description></long-description>
          <tag name="return" line="54" description="" type="\Haldayne\Boost\numeric">
            <type>\Haldayne\Boost\numeric</type>
          </tag>
          <tag name="api" line="54" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\MapOfNumerics</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="68" package="Haldayne">
        <name>product</name>
        <full_name>\Haldayne\Boost\MapOfNumerics::product()</full_name>
        <docblock line="68">
          <description>Return the product of all elements in the map.</description>
          <long-description></long-description>
          <tag name="return" line="68" description="" type="\Haldayne\Boost\numeric">
            <type>\Haldayne\Boost\numeric</type>
          </tag>
          <tag name="api" line="68" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\MapOfNumerics</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="82" package="Haldayne">
        <name>mean</name>
        <full_name>\Haldayne\Boost\MapOfNumerics::mean()</full_name>
        <docblock line="82">
          <description>Return the arithmetic mean ("average") of all elements in the map.</description>
          <long-description></long-description>
          <tag name="return" line="82" description="" type="\Haldayne\Boost\numeric">
            <type>\Haldayne\Boost\numeric</type>
          </tag>
          <tag name="api" line="82" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\MapOfNumerics</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="95" package="Haldayne">
        <name>min</name>
        <full_name>\Haldayne\Boost\MapOfNumerics::min()</full_name>
        <docblock line="95">
          <description>Return the minimum value from the elements in the map. If there are no
elements, throws a \RangeException.</description>
          <long-description></long-description>
          <tag name="return" line="95" description="" type="\Haldayne\Boost\numeric">
            <type>\Haldayne\Boost\numeric</type>
          </tag>
          <tag name="throws" line="95" description="" type="\RangeException">
            <type>\RangeException</type>
          </tag>
          <tag name="api" line="95" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\MapOfNumerics</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="112" package="Haldayne">
        <name>max</name>
        <full_name>\Haldayne\Boost\MapOfNumerics::max()</full_name>
        <docblock line="112">
          <description>Return the maximum value from the elements in the map. If there are no
elements, throws a \RangeException.</description>
          <long-description></long-description>
          <tag name="return" line="112" description="" type="\Haldayne\Boost\numeric">
            <type>\Haldayne\Boost\numeric</type>
          </tag>
          <tag name="throws" line="112" description="" type="\RangeException">
            <type>\RangeException</type>
          </tag>
          <tag name="api" line="112" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\MapOfNumerics</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="Haldayne\Boost" line="16" package="Haldayne">
        <name>allowed</name>
        <full_name>\Haldayne\Boost\GuardedMapAbstract::allowed()</full_name>
        <docblock line="16">
          <description>Decides if the given element should be allowed into the map.</description>
          <long-description></long-description>
          <tag name="param" line="16" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="16" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\GuardedMapAbstract</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="741" package="Haldayne">
        <name>offsetSet</name>
        <full_name>\Haldayne\Boost\Map::offsetSet()</full_name>
        <docblock line="741">
          <description>Set the value at a given key.</description>
          <long-description>If key is null, the value is appended to the array using numeric
indexes, just like native PHP. Unlike native-PHP, $key can be of any
type: boolean, int, float, string, array, object, closure, resource.</long-description>
          <tag name="param" line="741" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="741" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="741" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="49" package="Haldayne">
        <name>normalize</name>
        <full_name>\Haldayne\Boost\GuardedMapAbstract::normalize()</full_name>
        <docblock line="49">
          <description>Normalize the value before storing.</description>
          <long-description>This default implementation does nothing.</long-description>
          <tag name="param" line="49" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="49" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\GuardedMapAbstract</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="67" package="Haldayne">
        <name>__construct</name>
        <full_name>\Haldayne\Boost\Map::__construct()</full_name>
        <docblock line="67">
          <description>Create a new map.</description>
          <long-description>Initialize the map with the given collection, which can be any type
that is "collection-like": array, object, Traversable, another Map,
etc.</long-description>
          <tag name="param" line="67" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="throws" line="67" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="api" line="67" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default>null</default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="96" package="Haldayne">
        <name>all</name>
        <full_name>\Haldayne\Boost\Map::all()</full_name>
        <docblock line="96">
          <description>Create a new map containing all members from this map whose elements
satisfy the expression.</description>
          <long-description>The expression decides whether an element is in or out. If the
expression returns boolean false, the element is out.  Otherwise, it's
in.

```
$nums = new Map(range(0, 9));
$even = $nums-&gt;all(function ($val, $key) { return 0 == $val % 2; });
$odds = $nums-&gt;all('$_0 &amp; 1');
```</long-description>
          <tag name="param" line="96" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="96" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="96" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="117" package="Haldayne">
        <name>filter</name>
        <full_name>\Haldayne\Boost\Map::filter()</full_name>
        <docblock line="117">
          <description>Apply the filter to every element, creating a new map with only those
elements from the original map that do not fail this filter.</description>
          <long-description>The filter expressions receives two arguments:
  - The current value
  - The current key

If the filter returns exactly boolean false, the element is not copied
into the new map.  Otherwise, it is.  Keys from the original map carry
into the new map.</long-description>
          <tag name="param" line="117" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="117" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="117" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="148" package="Haldayne">
        <name>first</name>
        <full_name>\Haldayne\Boost\Map::first()</full_name>
        <docblock line="148">
          <description>Return a new map containing the first N elements passing the
expression.</description>
          <long-description>Like `find`, but stop after finding N elements from the front. Defaults
to N = 1.

```
$nums = new Map(range(0, 9));
$odd3 = $nums-&gt;first('1 == ($_0 % 2)', 3); // first three odds
```</long-description>
          <tag name="param" line="148" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="148" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="148" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="148" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="172" package="Haldayne">
        <name>last</name>
        <full_name>\Haldayne\Boost\Map::last()</full_name>
        <docblock line="172">
          <description>Return a new map containing the last N elements passing the expression.</description>
          <long-description>Like `first`, but stop after finding N elements from the *end*.
Defaults to N = 1.

```
$nums = new Map(range(0, 9));
$odds = $nums-&gt;last('1 == ($_0 % 2)', 2); // last two odd numbers
```</long-description>
          <tag name="param" line="172" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="172" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="172" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="172" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="187" package="Haldayne">
        <name>every</name>
        <full_name>\Haldayne\Boost\Map::every()</full_name>
        <docblock line="187">
          <description>Test if every element passes the expression.</description>
          <long-description></long-description>
          <tag name="param" line="187" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="187" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="187" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="199" package="Haldayne">
        <name>some</name>
        <full_name>\Haldayne\Boost\Map::some()</full_name>
        <docblock line="199">
          <description>Test if at least one element passes the expression.</description>
          <long-description></long-description>
          <tag name="param" line="199" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="199" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="199" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="211" package="Haldayne">
        <name>none</name>
        <full_name>\Haldayne\Boost\Map::none()</full_name>
        <docblock line="211">
          <description>Test that no elements pass the expression.</description>
          <long-description></long-description>
          <tag name="param" line="211" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="211" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="211" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="225" package="Haldayne">
        <name>has</name>
        <full_name>\Haldayne\Boost\Map::has()</full_name>
        <docblock line="225">
          <description>Determine if a key exists the map.</description>
          <long-description>This is the object method equivalent of the magic isset($map[$key]);</long-description>
          <tag name="param" line="225" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="225" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="225" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="242" package="Haldayne">
        <name>get</name>
        <full_name>\Haldayne\Boost\Map::get()</full_name>
        <docblock line="242">
          <description>Get the value corresponding to the given key.</description>
          <long-description>If the key does not exist in the map, return the default.

This is the object method equivalent of the magic $map[$key].</long-description>
          <tag name="param" line="242" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="242" description="" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="242" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="242" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="260" package="Haldayne">
        <name>set</name>
        <full_name>\Haldayne\Boost\Map::set()</full_name>
        <docblock line="260">
          <description>Set a key and its corresponding value into the map.</description>
          <long-description>This is the object method equivalent of the magic $map[$key] = 'foo'.</long-description>
          <tag name="param" line="260" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="260" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="260" description="" type="\Haldayne\Boost\MapOfFloats">
            <type>\Haldayne\Boost\MapOfFloats</type>
          </tag>
          <tag name="api" line="260" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="275" package="Haldayne">
        <name>forget</name>
        <full_name>\Haldayne\Boost\Map::forget()</full_name>
        <docblock line="275">
          <description>Remove a key and its corresponding value from the map.</description>
          <long-description>This is the object method equivalent of the magic unset($map[$key]);</long-description>
          <tag name="param" line="275" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="275" description="" type="\Haldayne\Boost\MapOfFloats">
            <type>\Haldayne\Boost\MapOfFloats</type>
          </tag>
          <tag name="api" line="275" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="287" package="Haldayne">
        <name>isEmpty</name>
        <full_name>\Haldayne\Boost\Map::isEmpty()</full_name>
        <docblock line="287">
          <description>Determine if any key and their values have been set into the map.</description>
          <long-description></long-description>
          <tag name="return" line="287" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="287" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="305" package="Haldayne">
        <name>diff</name>
        <full_name>\Haldayne\Boost\Map::diff()</full_name>
        <docblock line="305">
          <description>Return a new map containing those keys and values that are not present
in the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose values match will
be removed.  Otherwise, comparison is strict, and elements whose keys
and values match will be removed.</long-description>
          <tag name="param" line="305" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="305" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="305" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="305" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="326" package="Haldayne">
        <name>intersect</name>
        <full_name>\Haldayne\Boost\Map::intersect()</full_name>
        <docblock line="326">
          <description>Return a new map containing those keys and values that are present in
the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose value match will
be included.  Otherise, comparison is strict, and elements whose keys &amp;
values match will be included.</long-description>
          <tag name="param" line="326" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="326" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="326" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="326" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="357" package="Haldayne">
        <name>partition</name>
        <full_name>\Haldayne\Boost\Map::partition()</full_name>
        <docblock line="357">
          <description>Groups elements of this map based on the result of an expression.</description>
          <long-description>Calls the expression for each element in this map. The expression
receives the value and key, respectively.  The expression may return
any value: this value is the grouping key and the element is put into
that group.

```
$nums = new Map(range(0, 9));
$part = $nums-&gt;partition(function ($value, $key) {
   return 0 == $value % 2 ? 'even' : 'odd';
});
var_dump(
    $part['odd']-&gt;count(), // 5
    array_sum($part['even']-&gt;toArray()) // 20
);
```</long-description>
          <tag name="param" line="357" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="357" description="" type="\Haldayne\Boost\MapOfCollections">
            <type>\Haldayne\Boost\MapOfCollections</type>
          </tag>
          <tag name="api" line="357" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="398" package="Haldayne">
        <name>map</name>
        <full_name>\Haldayne\Boost\Map::map()</full_name>
        <docblock line="398">
          <description>Walk the map, applying the expression to every element, transforming
them into a new map.</description>
          <long-description>```
$nums = new Map(range(0, 9));
$doubled = $nums-&gt;map('$_0 * 2');
```

The expression receives two arguments:
  - The current value in `$_0`
  - The current key in `$_1`

The keys in the resulting map will be the same as the keys in the
original map: only the values have (potentially) changed.

Recommended to use this method when you are mapping from one type to
the same type: int to int, string to string, etc. If you are changing
types, use the more powerful `transform` method.</long-description>
          <tag name="param" line="398" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="398" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="api" line="398" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="440" package="Haldayne">
        <name>reduce</name>
        <full_name>\Haldayne\Boost\Map::reduce()</full_name>
        <docblock line="440">
          <description>Walk the map, applying a reducing expression to every element, so as to
reduce the map to a single value.</description>
          <long-description>The `$reducer` expression receives three arguments:
  - The current reduction (`$_0`)
  - The current value (`$_1`)
  - The current key (`$_2`)

The initial value, if given or null if not, is passed as the current
reduction on the first invocation of `$reducer`. The return value from
`$reducer` then becomes the new, current reduced value.

```
$nums = new Map(range(0, 3));
$sum = $nums-&gt;reduce('$_0 + $_1');
// $sum == 6
```

If `$finisher` is a callable or string expression, then it will be
called last, after iterating over all elements. It will be passed
reduced value. The `$finisher` must return the new final value.</long-description>
          <tag name="param" line="440" description="" type="callable|string" variable="$reducer">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="440" description="" type="mixed" variable="$initial">
            <type>mixed</type>
          </tag>
          <tag name="param" line="440" description="" type="callable|string|null" variable="$finisher">
            <type>callable</type>
            <type>string</type>
            <type>null</type>
          </tag>
          <tag name="return" line="440" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="440" description=""/>
          <tag name="see" line="440" description="" link="http://php.net/manual/en/function.array-reduce.php"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$reducer</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$initial</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finisher</name>
          <default>null</default>
          <type>callable|string|null</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="467" package="Haldayne">
        <name>rekey</name>
        <full_name>\Haldayne\Boost\Map::rekey()</full_name>
        <docblock line="467">
          <description>Change the key for every element in the map using an expression to
calculate the new key.</description>
          <long-description>```
$keyed_by_bytecode = new Map(count_chars('war of the worlds', 1));
$keyed_by_letter   = $keyed_by_bytecode-&gt;rekey('chr($_1)');
```</long-description>
          <tag name="param" line="467" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="467" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="467" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="497" package="Haldayne">
        <name>merge</name>
        <full_name>\Haldayne\Boost\Map::merge()</full_name>
        <docblock line="497">
          <description>Merge the given collection into this map.</description>
          <long-description>The merger callable decides how to merge the current map's value with
the given collection's value.  The merger callable receives two
arguments:
  - This map's value at the given key
  - The collection's value at the given key

If the current map does not have a value for a key in the collection,
then the default value is assumed.</long-description>
          <tag name="param" line="497" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="497" description="" type="callable" variable="$merger">
            <type>callable</type>
          </tag>
          <tag name="param" line="497" description="" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="497" description="" type="\Haldayne\Boost\MapOfFloats">
            <type>\Haldayne\Boost\MapOfFloats</type>
          </tag>
          <tag name="api" line="497" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$merger</name>
          <default></default>
          <type>callable</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="577" package="Haldayne">
        <name>transform</name>
        <full_name>\Haldayne\Boost\Map::transform()</full_name>
        <docblock line="577">
          <description>Flexibly and thoroughly change this map into another map.</description>
          <long-description>```
// transform a word list into a map of word to frequency in the list
use Haldayne\Boost\Map;
$words   = new Map([ 'bear', 'bee', 'goose', 'bee' ]);
$lengths = $words-&gt;transform(
    function (Map $new, $word) {
        if ($new-&gt;has($word)) {
            $new-&gt;set($word, $new-&gt;get($word)+1);
        } else {
            $new-&gt;set($word, 1);
        }
    }
);
```

Sometimes you need to create one map from another using a strategy
that isn't one-to-one. You may need to change keys. You may need to
add multiple elements. You may need to delete elements. You may need
to change from a map to a number.

Whatever the case, the other simpler methods in Map don't quite fit the
problem. What you need, and what this method provides, is a complete
machine to transform this map into something else:

```
// convert a word list into a count of unique letters in those words
use Haldayne\Boost\Map;
$words   = new Map([ 'bear', 'bee', 'goose', 'bee' ]);
$letters = $words-&gt;transform(
    function ($frequencies, $word) {
        foreach (count_chars($word, 1) as $byte =&gt; $frequency) {
            $letter = chr($byte);
            if ($frequencies-&gt;has($letter)) {
                $new-&gt;set($letter, $frequencies-&gt;get($letter)+1);
            } else {
                $new-&gt;set($letter, 1);
            }
        }
    },
    function (Map $original) { return new MapOfIntegers(); },
    function (MapOfIntegers $new) { return $new-&gt;sum(); }
);
```

This method accepts three callables
1. `$creator`, which is called first with the current map, performs any
initialization needed.  The result of this callable will be passed to
all the other callables.  If no creator is given, then use a default
one that returns an empty Map.

2. `$transformer`, which is called for every element in this map and
receives the initialized value, the current value, and the current key
in that order. The transformer should modify the initialized value
appropriately. Often this means adding to a new map zero or more
tranformed values.

3. `$finisher`, which is called last, receives the initialized value
that was modified by the transformer calls. The finisher may transform
that value once more as needed. If no finisher given, then no finishing
step is made.</long-description>
          <tag name="param" line="577" description="" type="callable" variable="$tranformer">
            <type>callable</type>
          </tag>
          <tag name="param" line="577" description="" type="callable|null" variable="$creator">
            <type>callable</type>
            <type>null</type>
          </tag>
          <tag name="param" line="577" description="" type="callable|null" variable="$finisher">
            <type>callable</type>
            <type>null</type>
          </tag>
          <tag name="return" line="577" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="577" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$transformer</name>
          <default></default>
          <type>callable</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$creator</name>
          <default>null</default>
          <type>callable|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finisher</name>
          <default>null</default>
          <type>callable|null</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="613" package="Haldayne">
        <name>into</name>
        <full_name>\Haldayne\Boost\Map::into()</full_name>
        <docblock line="613">
          <description>Put all of this map's elements into the target and return the target.</description>
          <long-description>```
$words = new MapOfStrings([ 'foo', 'bar' ]);
$words-&gt;map('strlen($_0)')-&gt;into(new MapOfInts)-&gt;sum(); // 6
```

Use when you've mapped your elements into a different type, and you
want to fluently perform operations on the new type. In the example,
the sum of the words' lengths was calculated.</long-description>
          <tag name="return" line="613" description="" type="\Haldayne\Boost\$target">
            <type>\Haldayne\Boost\$target</type>
          </tag>
          <tag name="api" line="613" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$target</name>
          <default></default>
          <type>\Haldayne\Boost\Map</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="627" package="Haldayne">
        <name>push</name>
        <full_name>\Haldayne\Boost\Map::push()</full_name>
        <docblock line="627">
          <description>Treat the map as a stack and push an element onto its end.</description>
          <long-description></long-description>
          <tag name="return" line="627" description="" type="\Haldayne\Boost\MapOfFloats">
            <type>\Haldayne\Boost\MapOfFloats</type>
          </tag>
          <tag name="api" line="627" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$element</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="639" package="Haldayne">
        <name>pop</name>
        <full_name>\Haldayne\Boost\Map::pop()</full_name>
        <docblock line="639">
          <description>Treat the map as a stack and pop an element off its end.</description>
          <long-description></long-description>
          <tag name="return" line="639" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="639" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="662" package="Haldayne">
        <name>count</name>
        <full_name>\Haldayne\Boost\Map::count()</full_name>
        <docblock line="662">
          <description>Count the number of items in the map.</description>
          <long-description></long-description>
          <tag name="return" line="662" description="" type="integer">
            <type>integer</type>
          </tag>
          <tag name="api" line="662" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="676" package="Haldayne">
        <name>toArray</name>
        <full_name>\Haldayne\Boost\Map::toArray()</full_name>
        <docblock line="676">
          <description>Copy this map into an array, recursing as necessary to convert
contained collections into arrays.</description>
          <long-description></long-description>
          <tag name="api" line="676" description=""/>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Arrayable::toArray()" refers="\Haldayne\Boost\Contract\Arrayable::toArray()" link="/classes/Haldayne.Boost.Contract.Arrayable.html#method_toArray"/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="698" package="Haldayne">
        <name>toJson</name>
        <full_name>\Haldayne\Boost\Map::toJson()</full_name>
        <docblock line="698">
          <description>Return a JSON representation of the object.</description>
          <long-description></long-description>
          <tag name="api" line="698" description=""/>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Jsonable::toJson()" refers="\Haldayne\Boost\Contract\Jsonable::toJson()" link="/classes/Haldayne.Boost.Contract.Jsonable.html#method_toJson"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>0</default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="712" package="Haldayne">
        <name>offsetExists</name>
        <full_name>\Haldayne\Boost\Map::offsetExists()</full_name>
        <docblock line="712">
          <description>Determine if a value exists at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="712" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="712" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="724" package="Haldayne">
        <name>offsetGet</name>
        <full_name>\Haldayne\Boost\Map::offsetGet()</full_name>
        <docblock line="724">
          <description>Get a value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="724" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="724" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="768" package="Haldayne">
        <name>offsetUnset</name>
        <full_name>\Haldayne\Boost\Map::offsetUnset()</full_name>
        <docblock line="768">
          <description>Unset the value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="768" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="768" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="782" package="Haldayne">
        <name>getIterator</name>
        <full_name>\Haldayne\Boost\Map::getIterator()</full_name>
        <docblock line="782">
          <description>Get an iterator for a copy of the map.</description>
          <long-description></long-description>
          <tag name="return" line="782" description="" type="\ArrayIterator">
            <type>\ArrayIterator</type>
          </tag>
          <tag name="api" line="782" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="802" package="Haldayne">
        <name>passes</name>
        <full_name>\Haldayne\Boost\Map::passes()</full_name>
        <docblock line="802">
          <description>Decide if the given result is considered "passing" or "failing".</description>
          <long-description>This method provides a definitive reference for what this and all
derived classes consider passing:
  - if the result is strictly false, the result "failed"
  - otherwise, the result "succeeded"</long-description>
          <tag name="param" line="802" description="" type="mixed" variable="$result">
            <type>mixed</type>
          </tag>
          <tag name="return" line="802" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$result</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="813" package="Haldayne">
        <name>is_collection_like</name>
        <full_name>\Haldayne\Boost\Map::is_collection_like()</full_name>
        <docblock line="813">
          <description>Decide if the given value is considered collection-like.</description>
          <long-description></long-description>
          <tag name="param" line="813" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="813" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="843" package="Haldayne">
        <name>collection_to_array</name>
        <full_name>\Haldayne\Boost\Map::collection_to_array()</full_name>
        <docblock line="843">
          <description>Give me a native PHP array, regardless of what kind of collection-like
structure is given.</description>
          <long-description></long-description>
          <tag name="param" line="843" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Traversable|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|object|array" variable="$items">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="return" line="843" description="" type="array|boolean">
            <type>array</type>
            <type>boolean</type>
          </tag>
          <tag name="throws" line="843" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="880" package="Haldayne">
        <name>grep</name>
        <full_name>\Haldayne\Boost\Map::grep()</full_name>
        <docblock line="880">
          <description>Finds elements for which the given code passes, optionally limited to a
maximum count.</description>
          <long-description>If limit is null, no limit on number of matches. If limit is positive,
return that many from the front of the array. If limit is negative,
return that many from the end of the array.</long-description>
          <tag name="param" line="880" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="880" description="" type="integer|null" variable="$limit">
            <type>integer</type>
            <type>null</type>
          </tag>
          <tag name="return" line="880" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$limit</name>
          <default>null</default>
          <type>integer|null</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="925" package="Haldayne">
        <name>walk</name>
        <full_name>\Haldayne\Boost\Map::walk()</full_name>
        <docblock line="925">
          <description>Execute the given code over each element of the map. The code receives
the value by reference and then the key as formal parameters.</description>
          <long-description>The items are walked in the order they exist in the map. If the code
returns boolean false, then the iteration halts. Values can be modified
from within the callback, but not keys.

Example:
```
$map-&gt;each(function (&amp;$value, $key) { $value++; return true; })-&gt;sum();
```</long-description>
          <tag name="param" line="925" description="" type="callable" variable="$code">
            <type>callable</type>
          </tag>
          <tag name="return" line="925" description="" type="\Haldayne\Boost\MapOfFloats">
            <type>\Haldayne\Boost\MapOfFloats</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="942" package="Haldayne">
        <name>walk_backward</name>
        <full_name>\Haldayne\Boost\Map::walk_backward()</full_name>
        <docblock line="942">
          <description>Like `walk`, except walk from the end toward the front.</description>
          <long-description></long-description>
          <tag name="param" line="942" description="" type="callable" variable="$code">
            <type>callable</type>
          </tag>
          <tag name="return" line="942" description="" type="\Haldayne\Boost\MapOfFloats">
            <type>\Haldayne\Boost\MapOfFloats</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="977" package="Haldayne">
        <name>key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::key_to_hash()</full_name>
        <docblock line="977">
          <description>Lookup the hash for the given key. If a hash does not yet exist, one is
created.</description>
          <long-description></long-description>
          <tag name="param" line="977" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="977" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="throws" line="977" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="1015" package="Haldayne">
        <name>hash_to_key</name>
        <full_name>\Haldayne\Boost\Map::hash_to_key()</full_name>
        <docblock line="1015">
          <description>Lookup the key for the given hash.</description>
          <long-description></long-description>
          <tag name="param" line="1015" description="" type="string" variable="$hash">
            <type>string</type>
          </tag>
          <tag name="return" line="1015" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$hash</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="1035" package="Haldayne">
        <name>call</name>
        <full_name>\Haldayne\Boost\Map::call()</full_name>
        <docblock line="1035">
          <description>Call the expression with the arguments.</description>
          <long-description></long-description>
          <tag name="param" line="1035" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="throws" line="1035" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="13" code="PPC:ERR-50015">Argument $value is missing from the Docblock of allowed</error>
    </parse_markers>
    <source>eJw1js1KBDEQhO95ijp40EGcB1hBEVn0oL6A4DaZHiaQP6Y7rrLMu5vE3bo0VH1d1P1DXrKJFFgyWcYL+Yl+I38+pSS6M2YcBoMBryF7DhxVQAiUkWbMPpHKLXQhhWvBWw2OSxLGN/nCglBEQd4jk0gFuXUdnHz13wOURe+qNxrrG1ELPuZ97wX/KMfp7L2XwKuzYk4GVX1V04DTo4tLzfQ52e1sjv3mNSlb5QlziVZdim1KOvJ0fdX33XTsv7FpZS1rxGXehdp1YDOb+QM9917W</source>
  </file>
  <file path="fox/src/Expression.php" generated-path="fox.src.Expression.html" hash="c13d3b5eaf14ff8d61bd72d863581777" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Fox" line="39" package="Haldayne">
      <extends/>
      <name>Expression</name>
      <full_name>\Haldayne\Fox\Expression</full_name>
      <docblock line="39">
        <description>Manufactures a callable from a string.</description>
        <long-description>In PHP, a callable can be a function name (as a string), a class or object
method specification (as an array [object|string, string], an anonymous
function (via create_function), or a closure (function () { ... }). Sadly,
the syntax for these callable methods may dwarf the meat of the code to
run:

```
uasort($array, function ($a, $b) { return $a &lt;=&gt; $b; });
// vs. an ideal expression
uasort($array, '$_0 &lt;=&gt; $_1');
```

This class wraps anonymous functions around string code "expressions", in a
reasonably performant manner. Libraries wanting to support concise
expressions as arguments to their functions can then use this class to
produce that effect:

```
use Haldayne\Fox\Expression;
function filter(array $array, $expression) {
    return array_filter($array, new Expression($expression));
}
print_r(filter([ 'bee', 'bear', 'goose' ], '4 &lt;= strlen($_0)'));
```</long-description>
        <tag name="see" line="39" description="" link="http://php.net/manual/en/language.types.callable.php"/>
        <tag name="see" line="39" description="" link="https://linepogl.wordpress.com/2011/07/09/on-the-syntax-of-closures-in-php/"/>
        <tag name="see" line="39" description="" link="http://justafewlines.com/2009/10/whats-wrong-with-php-closures/"/>
        <tag name="see" line="39" description="" link="https://wiki.php.net/rfc/short_closures"/>
        <tag name="see" line="39" description="" link="http://docs.hhvm.com/manual/en/hack.lambda.php"/>
        <tag name="see" line="39" description="" link="https://linepogl.wordpress.com/2011/08/04/short-closures-for-php-an-implementation/"/>
        <tag name="package" line="39" description="Haldayne"/>
      </docblock>
      <property static="true" visibility="private" namespace="Haldayne\Fox" line="110" package="Haldayne">
        <name>$signature</name>
        <full_name>\Haldayne\Fox\Expression::signature</full_name>
        <default>'$_0=null, $_1=null, $_2=null, $_3=null, $_4=null,$_5=null, $_6=null, $_7=null, $_8=null, $_9=null'</default>
        <docblock line="110">
          <description>Manufactured callables all have this formal signature, which allows up
to 10 parameters to be passed in, accessible as $_N, where 0 &lt;= N &lt;= 9.</description>
          <long-description></long-description>
          <tag name="var" line="110" description="" type="" variable="$signature"/>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="Haldayne\Fox" line="116" package="Haldayne">
        <name>$map</name>
        <full_name>\Haldayne\Fox\Expression::map</full_name>
        <default>array()</default>
        <docblock line="116">
          <description>In memory cache of built expressions.</description>
          <long-description></long-description>
          <tag name="var" line="116" description="" type="\Haldayne\Boost\Map" variable="$map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Fox" line="65" package="Haldayne">
        <name>__construct</name>
        <full_name>\Haldayne\Fox\Expression::__construct()</full_name>
        <docblock line="65">
          <description>Creates a callable returning the given expression.</description>
          <long-description>If the expression is already callable, returns it untouched. If the
expression is a string, a closure will be wrapped around the string
returning it as a single value. In this case, the first 10 positional
arguments are available as $_0, $_1, ..., $_9.

```
$lt = new Expression('$_0 &lt; $_1'); // expressions is a comparison
var_dump($lt(0, 1)); // true
var_dump($lt(1, 0)); // false
var_dump($lt());     // false (null not less than null)
var_dump($lt(-1));   // true (-1 is less than null)
```

Do not include a `return` in your expression.</long-description>
          <tag name="param" line="65" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="throws" line="65" description="When $expression not of expected type" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="65" description="When $expression does not form valid PHP code" type="\LogicException">
            <type>\LogicException</type>
          </tag>
          <tag name="see" line="65" description="Definition of PHP expression" link="http://php.net/manual/en/language.expressions.php"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Fox" line="88" package="Haldayne">
        <name>__invoke</name>
        <full_name>\Haldayne\Fox\Expression::__invoke()</full_name>
        <docblock line="88">
          <description>Convenience method to execute the the manufactured callable from the
object itself.</description>
          <long-description></long-description>
          <tag name="param" line="88" description="&lt;p&gt;...args Up to 10 arguments passed into the built callable&lt;/p&gt;" type="mixed" variable="">
            <type>mixed</type>
          </tag>
          <tag name="return" line="88" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Fox" line="98" package="Haldayne">
        <name>getCallable</name>
        <full_name>\Haldayne\Fox\Expression::getCallable()</full_name>
        <docblock line="98">
          <description>Get the callable manufactured for this expression.</description>
          <long-description></long-description>
          <tag name="return" line="98" description="" type="callable">
            <type>callable</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="Haldayne\Fox" line="124" package="Haldayne">
        <name>makeCallable</name>
        <full_name>\Haldayne\Fox\Expression::makeCallable()</full_name>
        <docblock line="124">
          <description>Given a string expression, turn that into an anonymous function.</description>
          <long-description>Cache the result, so as to keep memory impacts low.</long-description>
          <tag name="throw" line="124" description="" type="\LogicException">
            <type>\LogicException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="124" code="PPC:ERR-50015">Argument $expression is missing from the Docblock of makeCallable</error>
    </parse_markers>
    <source>eJyVV22T27YR/q5fsfUoI8ojkbrUaWJflNp13ORm4oynTdvp3Hl4EAlKyJEABwCl0zT+790FSJCidG7DDyeIt/vsK55dffvneldPJKu4qVnG4UdW5uwo+d1f1eP1ZJI8fz6B5/CeyaZgmW00N8AgY2XJNiWHQqsKvxurhdzGKEnCNxI+/PhhMZTLmIQNxzdFIzMrlASyCBEzQXvuFEpmDCgNavMrzyyhVdzuVA6m5pkoRMactlOUwLRmR7j1wr95nEWL93HhJKSSx0o1hqCC8Wgv0JbmzPK0e4n20S65oAyGCVEvPYf/QBzH8Gkew99ZXh4XhGZ3HMxRWvYIBWriV8P7iL3bBip0MD8wXTj5Ck2C8udM5RysIijdyFdt8u7v7+mjYUZpG01dhIuB51O2gOmGPNIcyyFhyuDb9Xf47hr9uybdJIG9iSl6kXNWAn+ssWwG1S8gz6bpygOkVzOv712g0y87YdqaHDSrTZ/O4BG+06qReZt1H9Wz3qR5tgCBdXBhcrQtMT1HqLnGpFVMWsyQlFzH8JPYaKYFNtgBXxOWVWCaukZ3EVZmwnBCGWADtYHeNhWX1pA45lXogW/Ud/hOQoO1sX00Pu21VnmT0T+wKrwosInGZTCnN+LuXTB+fdJRhSgt15FvyC63095VLBjJ09PWzcmkrV6nIfkBehPREMDX5pP3W0ib6qhVvoXZhvPZgj6Yps+tUobPAK/A7AUWl2pTcoRLV/PZfFzk14Zz2Flbv0oS5IJYcptgTRpWJlwmJZPbhm15bI81N3HX3zGxxlDZoHYpJK/VtowPSufO8ThTVfLl6uoqWX2drF4mSi6xHEt/bZaqWLa3zSyFXCJkMnbo18ZYVvADQXdoiHO1Sg5YNLM8aCW3y4OwO1IPcMmZbwfxIOIuPF1kidlhX6WdwthurjIT73b7ytns07Fj2UNcsmqTs9+fgm+S1Qtvt48bb4HznMmlqOqSUys7jqMQkolv174lJthG+Dhapuc5vHU0dsLKvsPcDUKe2Yo9XoC+k+JWswO48XTUCwBeE1YibH4MmIsW1ICw0EirmmzH87hV7qBGGNAxcs+qB1GWNAmITmqed+ThuNQJd1B9DGjQjwn8gsHtWdnwmIaMv8/MoHOkXwhtLFytoFZGUAZZ2YH1HMHQB7ZnwicKcfFOLIj7FsTwdHo5zo+7Kf44LS2sx5fUM2jLn0S+Q4JyacAOqJHZDBGwB9ozneZNVUeIGKEDV3OvanXDL8qgf6tWpmCluSxEAq47WiGIZIPplspCyYn1dkiH9Gp+UX155QFaPwBfkP9PqPZp6d58r5wpIbOyyWnY3/si3tMAOKpGX2hC6D5fY4ZYFfqtHeZDCg2SdqfVwcDdjcReEPmbtrjvHjNeOzL+FzH+QNO5hVMX3yDFY9cRl53B/aS2IvsMSK7wlhESDS5wpmnPcRNvlIn/k1IHjUJkAt/zQkjXuuQtYZ9Fn7jPutmUIuunT5rifMSMNZk9mRlO2DMGPaKASJi0y/HpeBnI0TOl27X8LnDKepiL6yAaDp+AU8e1Jnz1fqcBQ8SXvXpVsQf+9pKPuI+OzJ1Cukq66/lkb0TGDc8iOlGkZ9bJnhQ9omUNuwW+MHOocBj1LIs7nw9ztjgD23JLWufF6B43hbtYJv7vGbMricwtuMy6dZJWHP7Is8ZyR3lupexX83y0mA+Y2a/IyKWGl8WY4dq7V4lHhEAaRLo08I+arCGd9uRZ4yxCCcyf27Rg0+ACEmwGtHbB8XD/o2+F3KsHHo07tYUg6BR3MO229NQtSdGocfxynGLGU/I76jJ7ns8fuPWLd9jRh6nzOzzy3dOT8vXArUHEl2NDh0ITPxHeKJJTvxP48Lebf7755R28+XBzFsv7S1WnsV3Cju3bXddt2CUOzq1kJLmAw05kO5IixmvqDs0X2nUBx43SrdI4pEO9cYJnGeUkDM2fCYvjMKUfD/Az/QmDE17jWIFpMHuaJi32uK+0l30ghQRAk3RNQ8ZN5HD6Mpz+GE4v/GmafhVe/Smcvg6nb8LppTvNrs8yiYtExSuladfBnYaY1/f1kJ1PIrsLvwj+gnu2vXvPaphWrP5snPh/jPD247kDP7j9rFuWBmZxraEucb9O3J0b/p4NjRZ8e+vcpwZH/aa0+ENYUbFQ8YHzuosSt0zsGxzr6nDW355AR5Pwc2GFbn+Ssy+MoD+0v30e+DHlj8JYM9RYhDlAOTsfG+3dWcOz9nQ6Ip5dn4r7XR3FRz/3o2BlcD1a8PkpBvns96n1et0hjv2iZzB/TlP49NShZ/buwpLha0ib0+mmEcO/VQNbvOPr2y8M/sLbcFwvuXHfLkwil4RBdi8L+LjP/jcfZeLi1KVnWLLbgbmPEBI2Qpqcn9p6PonV8eOnyX8BRLzADQ==</source>
  </file>
  <file path="boost/src/MapOfInts.php" generated-path="boost.src.MapOfInts.html" hash="affe7257d90cd73332c9b1e420bbeabf" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Boost" line="8" package="Haldayne">
      <extends>\Haldayne\Boost\MapOfNumerics</extends>
      <name>MapOfInts</name>
      <full_name>\Haldayne\Boost\MapOfInts</full_name>
      <docblock line="8">
        <description>Implements a map of integers, that is a Map whose values must all pass the
`is_int` test.</description>
        <long-description>Methods accepting a `$collection` may receive any of these types:
  - array
  - object
  - \Traversable
  - \Haldayne\Boost\Map
  - \Haldayne\Boost\Contract\Arrayable
  - \Haldayne\Boost\Contract\Jsonable

Methods accept a `$key` may be of any type: boolean, integer, float,
string, array, object, closure, or resource.

Methods accepting an `$expression` may receive a [PHP callable][1] or a
string. When given a string, the library wraps an anonymous function around
the string code body and returns the result. By way of example, these
are equivalent and both acceptable as an `$expression`:
  - `$_0 &lt; $_1`
  - `function ($_0, $_1) { return $_0 &lt; $_1; }

Expressions lets you write extremely compact code for filtering, at the
one-time run-time cost of converting the string to the body of an anonymous
function.

Expressions, whether given as a callable or a string, receive two formal
arguments: the current value and the current key.  Note that, inside string
expressions, these are represented by `$_0` and `$_1` respectively.</long-description>
        <tag name="package" line="8" description="Haldayne"/>
        <tag name="inherited_from" description="\Haldayne\Boost\MapOfNumerics" refers="\Haldayne\Boost\MapOfNumerics" link="/classes/Haldayne.Boost.MapOfNumerics.html"/>
      </docblock>
      <constant namespace="Haldayne\Boost" line="46" package="Haldayne">
        <name>LOOSE</name>
        <full_name>\Haldayne\Boost\Map::LOOSE</full_name>
        <value>true</value>
        <docblock line="46">
          <description>Should the comparison be made loosely?</description>
          <long-description></long-description>
          <tag name="see" line="46" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="46" description="" link="\Haldayne\Boost\Map::intersect"/>
          <tag name="api" line="46" description=""/>
        </docblock>
      </constant>
      <constant namespace="Haldayne\Boost" line="54" package="Haldayne">
        <name>STRICT</name>
        <full_name>\Haldayne\Boost\Map::STRICT</full_name>
        <value>false</value>
        <docblock line="54">
          <description>Should the comparison be made strictly?</description>
          <long-description></long-description>
          <tag name="see" line="54" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="54" description="" link="\Haldayne\Boost\Map::intersect"/>
          <tag name="api" line="54" description=""/>
        </docblock>
      </constant>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="961" package="Haldayne">
        <name>$array</name>
        <full_name>\Haldayne\Boost\Map::array</full_name>
        <default>array()</default>
        <docblock line="961">
          <description>The internal array representation of the map.</description>
          <long-description></long-description>
          <tag name="var" line="961" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="967" package="Haldayne">
        <name>$map_key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::map_key_to_hash</full_name>
        <default>array()</default>
        <docblock line="967">
          <description>Track hashes we've created for non-string keys.</description>
          <long-description></long-description>
          <tag name="var" line="967" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="13" package="Haldayne">
        <name>allowed</name>
        <full_name>\Haldayne\Boost\MapOfInts::allowed()</full_name>
        <docblock line="13">
          <description>Decides if the given element should be allowed into the map.</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\Haldayne\Boost\MapOfNumerics::allowed()" refers="\Haldayne\Boost\MapOfNumerics::allowed()" link="/classes/Haldayne.Boost.MapOfNumerics.html#method_allowed"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="20" package="Haldayne">
        <name>translate</name>
        <full_name>\Haldayne\Boost\MapOfNumerics::translate()</full_name>
        <docblock line="20">
          <description>Translate this map by the quantities given in the other collection.</description>
          <long-description>This is like addition or subtraction.</long-description>
          <tag name="param" line="20" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Arrayable|\Haldayne\Boost\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Arrayable</type>
            <type>\Haldayne\Boost\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="return" line="20" description="" type="\Haldayne\Boost\MapOfInts">
            <type>\Haldayne\Boost\MapOfInts</type>
          </tag>
          <tag name="api" line="20" description=""/>
          <tag name="see" line="20" description="" link="https://en.wikipedia.org/wiki/Translation_(geometry)"/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Arrayable|\Haldayne\Boost\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <inherited_from>\Haldayne\Boost\MapOfNumerics</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="39" package="Haldayne">
        <name>scale</name>
        <full_name>\Haldayne\Boost\MapOfNumerics::scale()</full_name>
        <docblock line="39">
          <description>Scale this map by the factors given in the other collection.</description>
          <long-description>This is like multiplication or division.</long-description>
          <tag name="param" line="39" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Arrayable|\Haldayne\Boost\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Arrayable</type>
            <type>\Haldayne\Boost\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="return" line="39" description="" type="\Haldayne\Boost\MapOfInts">
            <type>\Haldayne\Boost\MapOfInts</type>
          </tag>
          <tag name="api" line="39" description=""/>
          <tag name="see" line="39" description="" link="https://en.wikipedia.org/wiki/Scaling_(geometry)"/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Arrayable|\Haldayne\Boost\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <inherited_from>\Haldayne\Boost\MapOfNumerics</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="54" package="Haldayne">
        <name>sum</name>
        <full_name>\Haldayne\Boost\MapOfNumerics::sum()</full_name>
        <docblock line="54">
          <description>Return the sum of all elements in the map.</description>
          <long-description></long-description>
          <tag name="return" line="54" description="" type="\Haldayne\Boost\numeric">
            <type>\Haldayne\Boost\numeric</type>
          </tag>
          <tag name="api" line="54" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\MapOfNumerics</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="68" package="Haldayne">
        <name>product</name>
        <full_name>\Haldayne\Boost\MapOfNumerics::product()</full_name>
        <docblock line="68">
          <description>Return the product of all elements in the map.</description>
          <long-description></long-description>
          <tag name="return" line="68" description="" type="\Haldayne\Boost\numeric">
            <type>\Haldayne\Boost\numeric</type>
          </tag>
          <tag name="api" line="68" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\MapOfNumerics</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="82" package="Haldayne">
        <name>mean</name>
        <full_name>\Haldayne\Boost\MapOfNumerics::mean()</full_name>
        <docblock line="82">
          <description>Return the arithmetic mean ("average") of all elements in the map.</description>
          <long-description></long-description>
          <tag name="return" line="82" description="" type="\Haldayne\Boost\numeric">
            <type>\Haldayne\Boost\numeric</type>
          </tag>
          <tag name="api" line="82" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\MapOfNumerics</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="95" package="Haldayne">
        <name>min</name>
        <full_name>\Haldayne\Boost\MapOfNumerics::min()</full_name>
        <docblock line="95">
          <description>Return the minimum value from the elements in the map. If there are no
elements, throws a \RangeException.</description>
          <long-description></long-description>
          <tag name="return" line="95" description="" type="\Haldayne\Boost\numeric">
            <type>\Haldayne\Boost\numeric</type>
          </tag>
          <tag name="throws" line="95" description="" type="\RangeException">
            <type>\RangeException</type>
          </tag>
          <tag name="api" line="95" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\MapOfNumerics</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="112" package="Haldayne">
        <name>max</name>
        <full_name>\Haldayne\Boost\MapOfNumerics::max()</full_name>
        <docblock line="112">
          <description>Return the maximum value from the elements in the map. If there are no
elements, throws a \RangeException.</description>
          <long-description></long-description>
          <tag name="return" line="112" description="" type="\Haldayne\Boost\numeric">
            <type>\Haldayne\Boost\numeric</type>
          </tag>
          <tag name="throws" line="112" description="" type="\RangeException">
            <type>\RangeException</type>
          </tag>
          <tag name="api" line="112" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\MapOfNumerics</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="Haldayne\Boost" line="16" package="Haldayne">
        <name>allowed</name>
        <full_name>\Haldayne\Boost\GuardedMapAbstract::allowed()</full_name>
        <docblock line="16">
          <description>Decides if the given element should be allowed into the map.</description>
          <long-description></long-description>
          <tag name="param" line="16" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="16" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\GuardedMapAbstract</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="741" package="Haldayne">
        <name>offsetSet</name>
        <full_name>\Haldayne\Boost\Map::offsetSet()</full_name>
        <docblock line="741">
          <description>Set the value at a given key.</description>
          <long-description>If key is null, the value is appended to the array using numeric
indexes, just like native PHP. Unlike native-PHP, $key can be of any
type: boolean, int, float, string, array, object, closure, resource.</long-description>
          <tag name="param" line="741" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="741" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="741" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="49" package="Haldayne">
        <name>normalize</name>
        <full_name>\Haldayne\Boost\GuardedMapAbstract::normalize()</full_name>
        <docblock line="49">
          <description>Normalize the value before storing.</description>
          <long-description>This default implementation does nothing.</long-description>
          <tag name="param" line="49" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="49" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\GuardedMapAbstract</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="67" package="Haldayne">
        <name>__construct</name>
        <full_name>\Haldayne\Boost\Map::__construct()</full_name>
        <docblock line="67">
          <description>Create a new map.</description>
          <long-description>Initialize the map with the given collection, which can be any type
that is "collection-like": array, object, Traversable, another Map,
etc.</long-description>
          <tag name="param" line="67" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="throws" line="67" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="api" line="67" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default>null</default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="96" package="Haldayne">
        <name>all</name>
        <full_name>\Haldayne\Boost\Map::all()</full_name>
        <docblock line="96">
          <description>Create a new map containing all members from this map whose elements
satisfy the expression.</description>
          <long-description>The expression decides whether an element is in or out. If the
expression returns boolean false, the element is out.  Otherwise, it's
in.

```
$nums = new Map(range(0, 9));
$even = $nums-&gt;all(function ($val, $key) { return 0 == $val % 2; });
$odds = $nums-&gt;all('$_0 &amp; 1');
```</long-description>
          <tag name="param" line="96" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="96" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="96" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="117" package="Haldayne">
        <name>filter</name>
        <full_name>\Haldayne\Boost\Map::filter()</full_name>
        <docblock line="117">
          <description>Apply the filter to every element, creating a new map with only those
elements from the original map that do not fail this filter.</description>
          <long-description>The filter expressions receives two arguments:
  - The current value
  - The current key

If the filter returns exactly boolean false, the element is not copied
into the new map.  Otherwise, it is.  Keys from the original map carry
into the new map.</long-description>
          <tag name="param" line="117" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="117" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="117" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="148" package="Haldayne">
        <name>first</name>
        <full_name>\Haldayne\Boost\Map::first()</full_name>
        <docblock line="148">
          <description>Return a new map containing the first N elements passing the
expression.</description>
          <long-description>Like `find`, but stop after finding N elements from the front. Defaults
to N = 1.

```
$nums = new Map(range(0, 9));
$odd3 = $nums-&gt;first('1 == ($_0 % 2)', 3); // first three odds
```</long-description>
          <tag name="param" line="148" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="148" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="148" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="148" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="172" package="Haldayne">
        <name>last</name>
        <full_name>\Haldayne\Boost\Map::last()</full_name>
        <docblock line="172">
          <description>Return a new map containing the last N elements passing the expression.</description>
          <long-description>Like `first`, but stop after finding N elements from the *end*.
Defaults to N = 1.

```
$nums = new Map(range(0, 9));
$odds = $nums-&gt;last('1 == ($_0 % 2)', 2); // last two odd numbers
```</long-description>
          <tag name="param" line="172" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="172" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="172" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="172" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="187" package="Haldayne">
        <name>every</name>
        <full_name>\Haldayne\Boost\Map::every()</full_name>
        <docblock line="187">
          <description>Test if every element passes the expression.</description>
          <long-description></long-description>
          <tag name="param" line="187" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="187" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="187" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="199" package="Haldayne">
        <name>some</name>
        <full_name>\Haldayne\Boost\Map::some()</full_name>
        <docblock line="199">
          <description>Test if at least one element passes the expression.</description>
          <long-description></long-description>
          <tag name="param" line="199" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="199" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="199" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="211" package="Haldayne">
        <name>none</name>
        <full_name>\Haldayne\Boost\Map::none()</full_name>
        <docblock line="211">
          <description>Test that no elements pass the expression.</description>
          <long-description></long-description>
          <tag name="param" line="211" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="211" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="211" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="225" package="Haldayne">
        <name>has</name>
        <full_name>\Haldayne\Boost\Map::has()</full_name>
        <docblock line="225">
          <description>Determine if a key exists the map.</description>
          <long-description>This is the object method equivalent of the magic isset($map[$key]);</long-description>
          <tag name="param" line="225" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="225" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="225" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="242" package="Haldayne">
        <name>get</name>
        <full_name>\Haldayne\Boost\Map::get()</full_name>
        <docblock line="242">
          <description>Get the value corresponding to the given key.</description>
          <long-description>If the key does not exist in the map, return the default.

This is the object method equivalent of the magic $map[$key].</long-description>
          <tag name="param" line="242" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="242" description="" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="242" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="242" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="260" package="Haldayne">
        <name>set</name>
        <full_name>\Haldayne\Boost\Map::set()</full_name>
        <docblock line="260">
          <description>Set a key and its corresponding value into the map.</description>
          <long-description>This is the object method equivalent of the magic $map[$key] = 'foo'.</long-description>
          <tag name="param" line="260" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="260" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="260" description="" type="\Haldayne\Boost\MapOfInts">
            <type>\Haldayne\Boost\MapOfInts</type>
          </tag>
          <tag name="api" line="260" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="275" package="Haldayne">
        <name>forget</name>
        <full_name>\Haldayne\Boost\Map::forget()</full_name>
        <docblock line="275">
          <description>Remove a key and its corresponding value from the map.</description>
          <long-description>This is the object method equivalent of the magic unset($map[$key]);</long-description>
          <tag name="param" line="275" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="275" description="" type="\Haldayne\Boost\MapOfInts">
            <type>\Haldayne\Boost\MapOfInts</type>
          </tag>
          <tag name="api" line="275" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="287" package="Haldayne">
        <name>isEmpty</name>
        <full_name>\Haldayne\Boost\Map::isEmpty()</full_name>
        <docblock line="287">
          <description>Determine if any key and their values have been set into the map.</description>
          <long-description></long-description>
          <tag name="return" line="287" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="287" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="305" package="Haldayne">
        <name>diff</name>
        <full_name>\Haldayne\Boost\Map::diff()</full_name>
        <docblock line="305">
          <description>Return a new map containing those keys and values that are not present
in the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose values match will
be removed.  Otherwise, comparison is strict, and elements whose keys
and values match will be removed.</long-description>
          <tag name="param" line="305" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="305" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="305" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="305" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="326" package="Haldayne">
        <name>intersect</name>
        <full_name>\Haldayne\Boost\Map::intersect()</full_name>
        <docblock line="326">
          <description>Return a new map containing those keys and values that are present in
the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose value match will
be included.  Otherise, comparison is strict, and elements whose keys &amp;
values match will be included.</long-description>
          <tag name="param" line="326" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="326" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="326" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="326" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="357" package="Haldayne">
        <name>partition</name>
        <full_name>\Haldayne\Boost\Map::partition()</full_name>
        <docblock line="357">
          <description>Groups elements of this map based on the result of an expression.</description>
          <long-description>Calls the expression for each element in this map. The expression
receives the value and key, respectively.  The expression may return
any value: this value is the grouping key and the element is put into
that group.

```
$nums = new Map(range(0, 9));
$part = $nums-&gt;partition(function ($value, $key) {
   return 0 == $value % 2 ? 'even' : 'odd';
});
var_dump(
    $part['odd']-&gt;count(), // 5
    array_sum($part['even']-&gt;toArray()) // 20
);
```</long-description>
          <tag name="param" line="357" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="357" description="" type="\Haldayne\Boost\MapOfCollections">
            <type>\Haldayne\Boost\MapOfCollections</type>
          </tag>
          <tag name="api" line="357" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="398" package="Haldayne">
        <name>map</name>
        <full_name>\Haldayne\Boost\Map::map()</full_name>
        <docblock line="398">
          <description>Walk the map, applying the expression to every element, transforming
them into a new map.</description>
          <long-description>```
$nums = new Map(range(0, 9));
$doubled = $nums-&gt;map('$_0 * 2');
```

The expression receives two arguments:
  - The current value in `$_0`
  - The current key in `$_1`

The keys in the resulting map will be the same as the keys in the
original map: only the values have (potentially) changed.

Recommended to use this method when you are mapping from one type to
the same type: int to int, string to string, etc. If you are changing
types, use the more powerful `transform` method.</long-description>
          <tag name="param" line="398" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="398" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="api" line="398" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="440" package="Haldayne">
        <name>reduce</name>
        <full_name>\Haldayne\Boost\Map::reduce()</full_name>
        <docblock line="440">
          <description>Walk the map, applying a reducing expression to every element, so as to
reduce the map to a single value.</description>
          <long-description>The `$reducer` expression receives three arguments:
  - The current reduction (`$_0`)
  - The current value (`$_1`)
  - The current key (`$_2`)

The initial value, if given or null if not, is passed as the current
reduction on the first invocation of `$reducer`. The return value from
`$reducer` then becomes the new, current reduced value.

```
$nums = new Map(range(0, 3));
$sum = $nums-&gt;reduce('$_0 + $_1');
// $sum == 6
```

If `$finisher` is a callable or string expression, then it will be
called last, after iterating over all elements. It will be passed
reduced value. The `$finisher` must return the new final value.</long-description>
          <tag name="param" line="440" description="" type="callable|string" variable="$reducer">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="440" description="" type="mixed" variable="$initial">
            <type>mixed</type>
          </tag>
          <tag name="param" line="440" description="" type="callable|string|null" variable="$finisher">
            <type>callable</type>
            <type>string</type>
            <type>null</type>
          </tag>
          <tag name="return" line="440" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="440" description=""/>
          <tag name="see" line="440" description="" link="http://php.net/manual/en/function.array-reduce.php"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$reducer</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$initial</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finisher</name>
          <default>null</default>
          <type>callable|string|null</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="467" package="Haldayne">
        <name>rekey</name>
        <full_name>\Haldayne\Boost\Map::rekey()</full_name>
        <docblock line="467">
          <description>Change the key for every element in the map using an expression to
calculate the new key.</description>
          <long-description>```
$keyed_by_bytecode = new Map(count_chars('war of the worlds', 1));
$keyed_by_letter   = $keyed_by_bytecode-&gt;rekey('chr($_1)');
```</long-description>
          <tag name="param" line="467" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="467" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="467" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="497" package="Haldayne">
        <name>merge</name>
        <full_name>\Haldayne\Boost\Map::merge()</full_name>
        <docblock line="497">
          <description>Merge the given collection into this map.</description>
          <long-description>The merger callable decides how to merge the current map's value with
the given collection's value.  The merger callable receives two
arguments:
  - This map's value at the given key
  - The collection's value at the given key

If the current map does not have a value for a key in the collection,
then the default value is assumed.</long-description>
          <tag name="param" line="497" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="497" description="" type="callable" variable="$merger">
            <type>callable</type>
          </tag>
          <tag name="param" line="497" description="" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="497" description="" type="\Haldayne\Boost\MapOfInts">
            <type>\Haldayne\Boost\MapOfInts</type>
          </tag>
          <tag name="api" line="497" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$merger</name>
          <default></default>
          <type>callable</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="577" package="Haldayne">
        <name>transform</name>
        <full_name>\Haldayne\Boost\Map::transform()</full_name>
        <docblock line="577">
          <description>Flexibly and thoroughly change this map into another map.</description>
          <long-description>```
// transform a word list into a map of word to frequency in the list
use Haldayne\Boost\Map;
$words   = new Map([ 'bear', 'bee', 'goose', 'bee' ]);
$lengths = $words-&gt;transform(
    function (Map $new, $word) {
        if ($new-&gt;has($word)) {
            $new-&gt;set($word, $new-&gt;get($word)+1);
        } else {
            $new-&gt;set($word, 1);
        }
    }
);
```

Sometimes you need to create one map from another using a strategy
that isn't one-to-one. You may need to change keys. You may need to
add multiple elements. You may need to delete elements. You may need
to change from a map to a number.

Whatever the case, the other simpler methods in Map don't quite fit the
problem. What you need, and what this method provides, is a complete
machine to transform this map into something else:

```
// convert a word list into a count of unique letters in those words
use Haldayne\Boost\Map;
$words   = new Map([ 'bear', 'bee', 'goose', 'bee' ]);
$letters = $words-&gt;transform(
    function ($frequencies, $word) {
        foreach (count_chars($word, 1) as $byte =&gt; $frequency) {
            $letter = chr($byte);
            if ($frequencies-&gt;has($letter)) {
                $new-&gt;set($letter, $frequencies-&gt;get($letter)+1);
            } else {
                $new-&gt;set($letter, 1);
            }
        }
    },
    function (Map $original) { return new MapOfIntegers(); },
    function (MapOfIntegers $new) { return $new-&gt;sum(); }
);
```

This method accepts three callables
1. `$creator`, which is called first with the current map, performs any
initialization needed.  The result of this callable will be passed to
all the other callables.  If no creator is given, then use a default
one that returns an empty Map.

2. `$transformer`, which is called for every element in this map and
receives the initialized value, the current value, and the current key
in that order. The transformer should modify the initialized value
appropriately. Often this means adding to a new map zero or more
tranformed values.

3. `$finisher`, which is called last, receives the initialized value
that was modified by the transformer calls. The finisher may transform
that value once more as needed. If no finisher given, then no finishing
step is made.</long-description>
          <tag name="param" line="577" description="" type="callable" variable="$tranformer">
            <type>callable</type>
          </tag>
          <tag name="param" line="577" description="" type="callable|null" variable="$creator">
            <type>callable</type>
            <type>null</type>
          </tag>
          <tag name="param" line="577" description="" type="callable|null" variable="$finisher">
            <type>callable</type>
            <type>null</type>
          </tag>
          <tag name="return" line="577" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="577" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$transformer</name>
          <default></default>
          <type>callable</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$creator</name>
          <default>null</default>
          <type>callable|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finisher</name>
          <default>null</default>
          <type>callable|null</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="613" package="Haldayne">
        <name>into</name>
        <full_name>\Haldayne\Boost\Map::into()</full_name>
        <docblock line="613">
          <description>Put all of this map's elements into the target and return the target.</description>
          <long-description>```
$words = new MapOfStrings([ 'foo', 'bar' ]);
$words-&gt;map('strlen($_0)')-&gt;into(new MapOfInts)-&gt;sum(); // 6
```

Use when you've mapped your elements into a different type, and you
want to fluently perform operations on the new type. In the example,
the sum of the words' lengths was calculated.</long-description>
          <tag name="return" line="613" description="" type="\Haldayne\Boost\$target">
            <type>\Haldayne\Boost\$target</type>
          </tag>
          <tag name="api" line="613" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$target</name>
          <default></default>
          <type>\Haldayne\Boost\Map</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="627" package="Haldayne">
        <name>push</name>
        <full_name>\Haldayne\Boost\Map::push()</full_name>
        <docblock line="627">
          <description>Treat the map as a stack and push an element onto its end.</description>
          <long-description></long-description>
          <tag name="return" line="627" description="" type="\Haldayne\Boost\MapOfInts">
            <type>\Haldayne\Boost\MapOfInts</type>
          </tag>
          <tag name="api" line="627" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$element</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="639" package="Haldayne">
        <name>pop</name>
        <full_name>\Haldayne\Boost\Map::pop()</full_name>
        <docblock line="639">
          <description>Treat the map as a stack and pop an element off its end.</description>
          <long-description></long-description>
          <tag name="return" line="639" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="639" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="662" package="Haldayne">
        <name>count</name>
        <full_name>\Haldayne\Boost\Map::count()</full_name>
        <docblock line="662">
          <description>Count the number of items in the map.</description>
          <long-description></long-description>
          <tag name="return" line="662" description="" type="integer">
            <type>integer</type>
          </tag>
          <tag name="api" line="662" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="676" package="Haldayne">
        <name>toArray</name>
        <full_name>\Haldayne\Boost\Map::toArray()</full_name>
        <docblock line="676">
          <description>Copy this map into an array, recursing as necessary to convert
contained collections into arrays.</description>
          <long-description></long-description>
          <tag name="api" line="676" description=""/>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Arrayable::toArray()" refers="\Haldayne\Boost\Contract\Arrayable::toArray()" link="/classes/Haldayne.Boost.Contract.Arrayable.html#method_toArray"/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="698" package="Haldayne">
        <name>toJson</name>
        <full_name>\Haldayne\Boost\Map::toJson()</full_name>
        <docblock line="698">
          <description>Return a JSON representation of the object.</description>
          <long-description></long-description>
          <tag name="api" line="698" description=""/>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Jsonable::toJson()" refers="\Haldayne\Boost\Contract\Jsonable::toJson()" link="/classes/Haldayne.Boost.Contract.Jsonable.html#method_toJson"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>0</default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="712" package="Haldayne">
        <name>offsetExists</name>
        <full_name>\Haldayne\Boost\Map::offsetExists()</full_name>
        <docblock line="712">
          <description>Determine if a value exists at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="712" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="712" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="724" package="Haldayne">
        <name>offsetGet</name>
        <full_name>\Haldayne\Boost\Map::offsetGet()</full_name>
        <docblock line="724">
          <description>Get a value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="724" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="724" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="768" package="Haldayne">
        <name>offsetUnset</name>
        <full_name>\Haldayne\Boost\Map::offsetUnset()</full_name>
        <docblock line="768">
          <description>Unset the value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="768" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="768" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="782" package="Haldayne">
        <name>getIterator</name>
        <full_name>\Haldayne\Boost\Map::getIterator()</full_name>
        <docblock line="782">
          <description>Get an iterator for a copy of the map.</description>
          <long-description></long-description>
          <tag name="return" line="782" description="" type="\ArrayIterator">
            <type>\ArrayIterator</type>
          </tag>
          <tag name="api" line="782" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="802" package="Haldayne">
        <name>passes</name>
        <full_name>\Haldayne\Boost\Map::passes()</full_name>
        <docblock line="802">
          <description>Decide if the given result is considered "passing" or "failing".</description>
          <long-description>This method provides a definitive reference for what this and all
derived classes consider passing:
  - if the result is strictly false, the result "failed"
  - otherwise, the result "succeeded"</long-description>
          <tag name="param" line="802" description="" type="mixed" variable="$result">
            <type>mixed</type>
          </tag>
          <tag name="return" line="802" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$result</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="813" package="Haldayne">
        <name>is_collection_like</name>
        <full_name>\Haldayne\Boost\Map::is_collection_like()</full_name>
        <docblock line="813">
          <description>Decide if the given value is considered collection-like.</description>
          <long-description></long-description>
          <tag name="param" line="813" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="813" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="843" package="Haldayne">
        <name>collection_to_array</name>
        <full_name>\Haldayne\Boost\Map::collection_to_array()</full_name>
        <docblock line="843">
          <description>Give me a native PHP array, regardless of what kind of collection-like
structure is given.</description>
          <long-description></long-description>
          <tag name="param" line="843" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Traversable|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|object|array" variable="$items">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="return" line="843" description="" type="array|boolean">
            <type>array</type>
            <type>boolean</type>
          </tag>
          <tag name="throws" line="843" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="880" package="Haldayne">
        <name>grep</name>
        <full_name>\Haldayne\Boost\Map::grep()</full_name>
        <docblock line="880">
          <description>Finds elements for which the given code passes, optionally limited to a
maximum count.</description>
          <long-description>If limit is null, no limit on number of matches. If limit is positive,
return that many from the front of the array. If limit is negative,
return that many from the end of the array.</long-description>
          <tag name="param" line="880" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="880" description="" type="integer|null" variable="$limit">
            <type>integer</type>
            <type>null</type>
          </tag>
          <tag name="return" line="880" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$limit</name>
          <default>null</default>
          <type>integer|null</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="925" package="Haldayne">
        <name>walk</name>
        <full_name>\Haldayne\Boost\Map::walk()</full_name>
        <docblock line="925">
          <description>Execute the given code over each element of the map. The code receives
the value by reference and then the key as formal parameters.</description>
          <long-description>The items are walked in the order they exist in the map. If the code
returns boolean false, then the iteration halts. Values can be modified
from within the callback, but not keys.

Example:
```
$map-&gt;each(function (&amp;$value, $key) { $value++; return true; })-&gt;sum();
```</long-description>
          <tag name="param" line="925" description="" type="callable" variable="$code">
            <type>callable</type>
          </tag>
          <tag name="return" line="925" description="" type="\Haldayne\Boost\MapOfInts">
            <type>\Haldayne\Boost\MapOfInts</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="942" package="Haldayne">
        <name>walk_backward</name>
        <full_name>\Haldayne\Boost\Map::walk_backward()</full_name>
        <docblock line="942">
          <description>Like `walk`, except walk from the end toward the front.</description>
          <long-description></long-description>
          <tag name="param" line="942" description="" type="callable" variable="$code">
            <type>callable</type>
          </tag>
          <tag name="return" line="942" description="" type="\Haldayne\Boost\MapOfInts">
            <type>\Haldayne\Boost\MapOfInts</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="977" package="Haldayne">
        <name>key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::key_to_hash()</full_name>
        <docblock line="977">
          <description>Lookup the hash for the given key. If a hash does not yet exist, one is
created.</description>
          <long-description></long-description>
          <tag name="param" line="977" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="977" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="throws" line="977" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="1015" package="Haldayne">
        <name>hash_to_key</name>
        <full_name>\Haldayne\Boost\Map::hash_to_key()</full_name>
        <docblock line="1015">
          <description>Lookup the key for the given hash.</description>
          <long-description></long-description>
          <tag name="param" line="1015" description="" type="string" variable="$hash">
            <type>string</type>
          </tag>
          <tag name="return" line="1015" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$hash</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="1035" package="Haldayne">
        <name>call</name>
        <full_name>\Haldayne\Boost\Map::call()</full_name>
        <docblock line="1035">
          <description>Call the expression with the arguments.</description>
          <long-description></long-description>
          <tag name="param" line="1035" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="throws" line="1035" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="13" code="PPC:ERR-50015">Argument $value is missing from the Docblock of allowed</error>
    </parse_markers>
    <source>eJw1jkFOAzEMRfc5hRcs6AgxB2ilIsSCLoALIFEr42EiJU4UOxRUzd1J0vZvLP33bf/dPi3JMAaShJbgFf2Ef0yfzzGKbo0Zh8HAAIeQPAViFUAImCDO4Fjpm7I8gC6o4Bp6q+i0RCH4QV9IIBRRQO8hoUgNUrt2dPJVt4+gJPpYndFY33hd/5gP7Qv9KvF0dd5LoOysmLOBqt6paYDzk+OlMn2Jdr2aY58pRyWrNMFc2KqL3GrEE033d73bpscuF5syackMl2q3zLbj1azmH7KyXU0=</source>
  </file>
  <file path="fox/src/Improve.php" generated-path="fox.src.Improve.html" hash="8758b1e0a56e1bc82468acf49fb5ff37" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <namespace-alias name="Map">\Haldayne\Boost\Map</namespace-alias>
    <class final="false" abstract="false" namespace="Haldayne\Fox" line="20" package="Haldayne">
      <extends/>
      <name>Improve</name>
      <full_name>\Haldayne\Fox\Improve</full_name>
      <docblock line="20">
        <description>Start with a guess, then repeatedly update the guess until we're close
enough to the desired solution.</description>
        <long-description>```
use Haldayne\Fox\Improve;
$calculator = new Improve(
    function ($guess) { return abs(($guess * $guess) - ($guess + 1)) &lt; .00001; },
    function ($guess) { return 1/$guess + 1; }
);
$phi = $calculator(1);
$calculator-&gt;getGuessHistory();
```</long-description>
        <tag name="package" line="20" description="Haldayne"/>
      </docblock>
      <property static="false" visibility="private" namespace="Haldayne\Fox" line="97" package="Haldayne">
        <name>$guesses</name>
        <full_name>\Haldayne\Fox\Improve::guesses</full_name>
        <default>null</default>
        <docblock line="97">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Fox" line="98" package="Haldayne">
        <name>$update</name>
        <full_name>\Haldayne\Fox\Improve::update</full_name>
        <default>null</default>
        <docblock line="98">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Fox" line="99" package="Haldayne">
        <name>$decide</name>
        <full_name>\Haldayne\Fox\Improve::decide</full_name>
        <default>null</default>
        <docblock line="99">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Fox" line="100" package="Haldayne">
        <name>$maxIterations</name>
        <full_name>\Haldayne\Fox\Improve::maxIterations</full_name>
        <default>null</default>
        <docblock line="100">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Fox" line="30" package="Haldayne">
        <name>__construct</name>
        <full_name>\Haldayne\Fox\Improve::__construct()</full_name>
        <docblock line="30">
          <description>Create a new iterative improvement algorithm.</description>
          <long-description></long-description>
          <tag name="param" line="30" description="&lt;p&gt;Decides if the guess is good enough. Receives&#10;one argument, the current guess.&lt;/p&gt;" type="callable" variable="$decide">
            <type>callable</type>
          </tag>
          <tag name="param" line="30" description="&lt;p&gt;Updates the guess to a new guess. Receives two&#10;arguments: the current guess and the current loop count, in that order.&lt;/p&gt;" type="callable" variable="$update">
            <type>callable</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$decide</name>
          <default></default>
          <type>callable</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$update</name>
          <default></default>
          <type>callable</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Fox" line="47" package="Haldayne">
        <name>setMaximumIterations</name>
        <full_name>\Haldayne\Fox\Improve::setMaximumIterations()</full_name>
        <docblock line="47">
          <description>Set the maximum number of times the iteration will run. Useful when
your improvement algorithm is subject to failure cases (like the
Newton-Raphson Method).</description>
          <long-description>By default, there is no limit.</long-description>
          <tag name="param" line="47" description="" type="integer|null" variable="$maxIterations">
            <type>integer</type>
            <type>null</type>
          </tag>
          <tag name="return" line="47" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$maxIterations</name>
          <default></default>
          <type>integer|null</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Fox" line="68" package="Haldayne">
        <name>__invoke</name>
        <full_name>\Haldayne\Fox\Improve::__invoke()</full_name>
        <docblock line="68">
          <description>Given an initial guess, decide if the guess is close enough. If not,
update the guess to a new value and repeat up to the maximum number
of times.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The initial guess&lt;/p&gt;" type="mixed" variable="$guess">
            <type>mixed</type>
          </tag>
          <tag name="return" line="68" description="The calculated result" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$guess</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Fox" line="90" package="Haldayne">
        <name>getGuessHistory</name>
        <full_name>\Haldayne\Fox\Improve::getGuessHistory()</full_name>
        <docblock line="90">
          <description>Get the history of guesses, from oldest to youngest.</description>
          <long-description></long-description>
          <tag name="return" line="90" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="97" code="PPC:ERR-50007">No summary for property $guesses</error>
      <error line="98" code="PPC:ERR-50007">No summary for property $update</error>
      <error line="99" code="PPC:ERR-50007">No summary for property $decide</error>
      <error line="100" code="PPC:ERR-50007">No summary for property $maxIterations</error>
    </parse_markers>
    <source>eJyNVktz2zYQvutXbDKamLJl2b7WVhqnTR0d3Mk4SU+esSFyJaIBAQ4ekj2O/nsXIEiJpOQGF0rEPr7d/XaXV7+XeTmQrEBTshThMxMZe5Z4/5d6uhwMnNl59VEpY+9vWUkXZ8fHAziGr5ZpC2tuc2CwdGjMGGyOEjSWyCxm4hlcmdEv/7qSACctF7DGI42QCmXQW0Kp3DIHq4JghoZrzMAo4SxXckIiXurx8dE/WrAI6f2sKLVa4aW/HKZMpE4wqzRMQeIa4m3ib/1ZOJl6q5AMA6IRvBBg67QENjdJfOtNxevTWhJO4GI0giuYnNO5uITN+BeMXpxttUnFa4wqqGXOCeMO4uRi1A3i9P0S7Y3X/8wN/X9OKpEqF2eDVDAyHWMcvAw8mFAef47hD+0LQeXxmeAWNbN8hcAr+QKlBSaWSlMNi0lUqnU/lEyzAgiLYHOBMMww5RnCn+FhgC92ysoNLJXKYiUncIcpkidTG1OSUOil8y4DSyB1Wnv/QX9y0Gkk0PfwMDseiSxVWJWBxiPYtaqt1R7Nb32XwGTWeiuUKiFVzgPkkq6YBaUz1DW4s/As3VzwdFvxh4dUSWO1S23SzdW4F8go2Kjq5M/Q5txQkT0iwl5RNnRZRyImf1qb7gnERE1rT5XAZtClxFe0IeyCPfHCFSBdMUcNiqrJi5jhyBSKbs2FAO3kBL4bXDjqXGrw2tSzcno/lzwfjJv/i6n1hVowLpxveOaDTAT/EUZCbedvXFslT+9YmRvyeYs2V9moy8ePzzQZFsyJikBkjpxIBYIX3B4gL5f2p3QUwpDCndVRNaz8EHt0pXj2apEN2tsqX1sjSdtmt7LUHklwPZ1OO+5HO2I7FWzJeCqQ9rbMG0BBk8+b5eaBqoaap10M8O4dnNOEorhXTHRvf9HvfuUekrYtm2u1Duy9n0lS59l1bL5PTymW3kbSUvDnqO0DCmcszDFETr3nkeCSyLnlKN8KL8Ns075RJZwftYzvoj3QBzc0LGjkS3LCLWei3mCx0brTLeyqZrzNFsQ8O65t9bZcM5woEw7DqKmWIonWa67dgM2gjH14gNAFf6LNGDfKN9+qu+i7vK6kvVi9UdADMdRD/zPTuFypH1hvs+7Q8qOSLE3hvDeG4iQ7fV86k9f6W6l1zmkYJm/CYHygVa4fvNekNeXG9e7tEbaKe3pAuypDo325j+wH8LVEm9Z941t3X5NQm+19fzWFk5OYni74Tpfc+S+hAl/pDn/e3iFLc8w6YznMPM+Vl30wNm97tjrJ2Az6vyJnqpQc2h43cXvk1deIhxAzOoaFVgUoQd8GYejTdpBL+t1jcnR03/+2fJWUvQ+hDitr/K06t+M4gy93s3+uv32C6y+z6l2p+cr37nBnBTdzt7lsluueu2Yz77nbP9I3g/8A65J3kQ==</source>
  </file>
  <file path="boost/src/Contract/Arrayable.php" generated-path="boost.src.Contract.Arrayable.html" hash="7f7c51100037144d3e52566dd96cb54e" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <interface namespace="Haldayne\Boost\Contract" line="4" package="Haldayne">
      <name>Arrayable</name>
      <full_name>\Haldayne\Boost\Contract\Arrayable</full_name>
      <docblock line="4">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="4" description="Haldayne"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost\Contract" line="9" package="Haldayne">
        <name>toArray</name>
        <full_name>\Haldayne\Boost\Contract\Arrayable::toArray()</full_name>
        <docblock line="9">
          <description>Return a native PHP array representation of the object.</description>
          <long-description></long-description>
        </docblock>
      </method>
    </interface>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="4" code="PPC:ERR-50009">No summary for interface ""</error>
    </parse_markers>
    <source>eJwtjbEOgkAQRPv9ii2VQj4AE6M2lISaZjmXgMHdy95iQoz/Llyc5hXzJnO+xDGC0ItTpMBY0/ygVbi7qSbv7ipuFLwCmMTZht25mtFK/czwAdxSFkUmFtiyLyZIKOTTm7GpG6RdR+NonFh8K1RQB/SRUfsnBz/952VmXPp5CjgsErLqmg8Pxwq+8AMxFDjF</source>
  </file>
  <file path="boost/src/MapOfObjects.php" generated-path="boost.src.MapOfObjects.html" hash="a93e841ae201c37257ee72960e0514ec" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Boost" line="7" package="Haldayne">
      <extends>\Haldayne\Boost\GuardedMapAbstract</extends>
      <name>MapOfObjects</name>
      <full_name>\Haldayne\Boost\MapOfObjects</full_name>
      <docblock line="7">
        <description>Implements a map that may only contain objects only.</description>
        <long-description>Methods accepting a `$collection` may receive any of these types:
  - array
  - object
  - \Traversable
  - \Haldayne\Boost\Map
  - \Haldayne\Boost\Contract\Arrayable
  - \Haldayne\Boost\Contract\Jsonable

Methods accept a `$key` may be of any type: boolean, integer, float,
string, array, object, closure, or resource.

Methods accepting an `$expression` may receive a [PHP callable][1] or a
string. When given a string, the library wraps an anonymous function around
the string code body and returns the result. By way of example, these
are equivalent and both acceptable as an `$expression`:
  - `$_0 &lt; $_1`
  - `function ($_0, $_1) { return $_0 &lt; $_1; }

Expressions lets you write extremely compact code for filtering, at the
one-time run-time cost of converting the string to the body of an anonymous
function.

Expressions, whether given as a callable or a string, receive two formal
arguments: the current value and the current key.  Note that, inside string
expressions, these are represented by `$_0` and `$_1` respectively.</long-description>
        <tag name="package" line="7" description="Haldayne"/>
        <tag name="inherited_from" description="\Haldayne\Boost\GuardedMapAbstract" refers="\Haldayne\Boost\GuardedMapAbstract" link="/classes/Haldayne.Boost.GuardedMapAbstract.html"/>
      </docblock>
      <constant namespace="Haldayne\Boost" line="46" package="Haldayne">
        <name>LOOSE</name>
        <full_name>\Haldayne\Boost\Map::LOOSE</full_name>
        <value>true</value>
        <docblock line="46">
          <description>Should the comparison be made loosely?</description>
          <long-description></long-description>
          <tag name="see" line="46" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="46" description="" link="\Haldayne\Boost\Map::intersect"/>
          <tag name="api" line="46" description=""/>
        </docblock>
      </constant>
      <constant namespace="Haldayne\Boost" line="54" package="Haldayne">
        <name>STRICT</name>
        <full_name>\Haldayne\Boost\Map::STRICT</full_name>
        <value>false</value>
        <docblock line="54">
          <description>Should the comparison be made strictly?</description>
          <long-description></long-description>
          <tag name="see" line="54" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="54" description="" link="\Haldayne\Boost\Map::intersect"/>
          <tag name="api" line="54" description=""/>
        </docblock>
      </constant>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="961" package="Haldayne">
        <name>$array</name>
        <full_name>\Haldayne\Boost\Map::array</full_name>
        <default>array()</default>
        <docblock line="961">
          <description>The internal array representation of the map.</description>
          <long-description></long-description>
          <tag name="var" line="961" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="967" package="Haldayne">
        <name>$map_key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::map_key_to_hash</full_name>
        <default>array()</default>
        <docblock line="967">
          <description>Track hashes we've created for non-string keys.</description>
          <long-description></long-description>
          <tag name="var" line="967" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="18" package="Haldayne">
        <name>apply</name>
        <full_name>\Haldayne\Boost\MapOfObjects::apply()</full_name>
        <docblock line="18">
          <description>Call the given method on every object in the map, and return the
results as a new map.</description>
          <long-description></long-description>
          <tag name="param" line="18" description="&lt;p&gt;The method on each contained object to call.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="18" description="&lt;p&gt;The arguments to pass to the method.&lt;/p&gt;" type="array|null" variable="$args">
            <type>array</type>
            <type>null</type>
          </tag>
          <tag name="return" line="18" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="api" line="18" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>array|null</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="32" package="Haldayne">
        <name>allowed</name>
        <full_name>\Haldayne\Boost\MapOfObjects::allowed()</full_name>
        <docblock line="32">
          <description>Decides if the given element should be allowed into the map.</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\Haldayne\Boost\GuardedMapAbstract::allowed()" refers="\Haldayne\Boost\GuardedMapAbstract::allowed()" link="/classes/Haldayne.Boost.GuardedMapAbstract.html#method_allowed"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="Haldayne\Boost" line="16" package="Haldayne">
        <name>allowed</name>
        <full_name>\Haldayne\Boost\GuardedMapAbstract::allowed()</full_name>
        <docblock line="16">
          <description>Decides if the given element should be allowed into the map.</description>
          <long-description></long-description>
          <tag name="param" line="16" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="16" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\GuardedMapAbstract</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="741" package="Haldayne">
        <name>offsetSet</name>
        <full_name>\Haldayne\Boost\Map::offsetSet()</full_name>
        <docblock line="741">
          <description>Set the value at a given key.</description>
          <long-description>If key is null, the value is appended to the array using numeric
indexes, just like native PHP. Unlike native-PHP, $key can be of any
type: boolean, int, float, string, array, object, closure, resource.</long-description>
          <tag name="param" line="741" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="741" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="741" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="49" package="Haldayne">
        <name>normalize</name>
        <full_name>\Haldayne\Boost\GuardedMapAbstract::normalize()</full_name>
        <docblock line="49">
          <description>Normalize the value before storing.</description>
          <long-description>This default implementation does nothing.</long-description>
          <tag name="param" line="49" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="49" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\GuardedMapAbstract</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="67" package="Haldayne">
        <name>__construct</name>
        <full_name>\Haldayne\Boost\Map::__construct()</full_name>
        <docblock line="67">
          <description>Create a new map.</description>
          <long-description>Initialize the map with the given collection, which can be any type
that is "collection-like": array, object, Traversable, another Map,
etc.</long-description>
          <tag name="param" line="67" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="throws" line="67" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="api" line="67" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default>null</default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="96" package="Haldayne">
        <name>all</name>
        <full_name>\Haldayne\Boost\Map::all()</full_name>
        <docblock line="96">
          <description>Create a new map containing all members from this map whose elements
satisfy the expression.</description>
          <long-description>The expression decides whether an element is in or out. If the
expression returns boolean false, the element is out.  Otherwise, it's
in.

```
$nums = new Map(range(0, 9));
$even = $nums-&gt;all(function ($val, $key) { return 0 == $val % 2; });
$odds = $nums-&gt;all('$_0 &amp; 1');
```</long-description>
          <tag name="param" line="96" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="96" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="96" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="117" package="Haldayne">
        <name>filter</name>
        <full_name>\Haldayne\Boost\Map::filter()</full_name>
        <docblock line="117">
          <description>Apply the filter to every element, creating a new map with only those
elements from the original map that do not fail this filter.</description>
          <long-description>The filter expressions receives two arguments:
  - The current value
  - The current key

If the filter returns exactly boolean false, the element is not copied
into the new map.  Otherwise, it is.  Keys from the original map carry
into the new map.</long-description>
          <tag name="param" line="117" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="117" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="117" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="148" package="Haldayne">
        <name>first</name>
        <full_name>\Haldayne\Boost\Map::first()</full_name>
        <docblock line="148">
          <description>Return a new map containing the first N elements passing the
expression.</description>
          <long-description>Like `find`, but stop after finding N elements from the front. Defaults
to N = 1.

```
$nums = new Map(range(0, 9));
$odd3 = $nums-&gt;first('1 == ($_0 % 2)', 3); // first three odds
```</long-description>
          <tag name="param" line="148" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="148" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="148" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="148" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="172" package="Haldayne">
        <name>last</name>
        <full_name>\Haldayne\Boost\Map::last()</full_name>
        <docblock line="172">
          <description>Return a new map containing the last N elements passing the expression.</description>
          <long-description>Like `first`, but stop after finding N elements from the *end*.
Defaults to N = 1.

```
$nums = new Map(range(0, 9));
$odds = $nums-&gt;last('1 == ($_0 % 2)', 2); // last two odd numbers
```</long-description>
          <tag name="param" line="172" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="172" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="172" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="172" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="187" package="Haldayne">
        <name>every</name>
        <full_name>\Haldayne\Boost\Map::every()</full_name>
        <docblock line="187">
          <description>Test if every element passes the expression.</description>
          <long-description></long-description>
          <tag name="param" line="187" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="187" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="187" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="199" package="Haldayne">
        <name>some</name>
        <full_name>\Haldayne\Boost\Map::some()</full_name>
        <docblock line="199">
          <description>Test if at least one element passes the expression.</description>
          <long-description></long-description>
          <tag name="param" line="199" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="199" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="199" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="211" package="Haldayne">
        <name>none</name>
        <full_name>\Haldayne\Boost\Map::none()</full_name>
        <docblock line="211">
          <description>Test that no elements pass the expression.</description>
          <long-description></long-description>
          <tag name="param" line="211" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="211" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="211" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="225" package="Haldayne">
        <name>has</name>
        <full_name>\Haldayne\Boost\Map::has()</full_name>
        <docblock line="225">
          <description>Determine if a key exists the map.</description>
          <long-description>This is the object method equivalent of the magic isset($map[$key]);</long-description>
          <tag name="param" line="225" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="225" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="225" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="242" package="Haldayne">
        <name>get</name>
        <full_name>\Haldayne\Boost\Map::get()</full_name>
        <docblock line="242">
          <description>Get the value corresponding to the given key.</description>
          <long-description>If the key does not exist in the map, return the default.

This is the object method equivalent of the magic $map[$key].</long-description>
          <tag name="param" line="242" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="242" description="" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="242" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="242" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="260" package="Haldayne">
        <name>set</name>
        <full_name>\Haldayne\Boost\Map::set()</full_name>
        <docblock line="260">
          <description>Set a key and its corresponding value into the map.</description>
          <long-description>This is the object method equivalent of the magic $map[$key] = 'foo'.</long-description>
          <tag name="param" line="260" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="260" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="260" description="" type="\Haldayne\Boost\MapOfObjects">
            <type>\Haldayne\Boost\MapOfObjects</type>
          </tag>
          <tag name="api" line="260" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="275" package="Haldayne">
        <name>forget</name>
        <full_name>\Haldayne\Boost\Map::forget()</full_name>
        <docblock line="275">
          <description>Remove a key and its corresponding value from the map.</description>
          <long-description>This is the object method equivalent of the magic unset($map[$key]);</long-description>
          <tag name="param" line="275" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="275" description="" type="\Haldayne\Boost\MapOfObjects">
            <type>\Haldayne\Boost\MapOfObjects</type>
          </tag>
          <tag name="api" line="275" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="287" package="Haldayne">
        <name>isEmpty</name>
        <full_name>\Haldayne\Boost\Map::isEmpty()</full_name>
        <docblock line="287">
          <description>Determine if any key and their values have been set into the map.</description>
          <long-description></long-description>
          <tag name="return" line="287" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="287" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="305" package="Haldayne">
        <name>diff</name>
        <full_name>\Haldayne\Boost\Map::diff()</full_name>
        <docblock line="305">
          <description>Return a new map containing those keys and values that are not present
in the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose values match will
be removed.  Otherwise, comparison is strict, and elements whose keys
and values match will be removed.</long-description>
          <tag name="param" line="305" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="305" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="305" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="305" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="326" package="Haldayne">
        <name>intersect</name>
        <full_name>\Haldayne\Boost\Map::intersect()</full_name>
        <docblock line="326">
          <description>Return a new map containing those keys and values that are present in
the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose value match will
be included.  Otherise, comparison is strict, and elements whose keys &amp;
values match will be included.</long-description>
          <tag name="param" line="326" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="326" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="326" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="326" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="357" package="Haldayne">
        <name>partition</name>
        <full_name>\Haldayne\Boost\Map::partition()</full_name>
        <docblock line="357">
          <description>Groups elements of this map based on the result of an expression.</description>
          <long-description>Calls the expression for each element in this map. The expression
receives the value and key, respectively.  The expression may return
any value: this value is the grouping key and the element is put into
that group.

```
$nums = new Map(range(0, 9));
$part = $nums-&gt;partition(function ($value, $key) {
   return 0 == $value % 2 ? 'even' : 'odd';
});
var_dump(
    $part['odd']-&gt;count(), // 5
    array_sum($part['even']-&gt;toArray()) // 20
);
```</long-description>
          <tag name="param" line="357" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="357" description="" type="\Haldayne\Boost\MapOfCollections">
            <type>\Haldayne\Boost\MapOfCollections</type>
          </tag>
          <tag name="api" line="357" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="398" package="Haldayne">
        <name>map</name>
        <full_name>\Haldayne\Boost\Map::map()</full_name>
        <docblock line="398">
          <description>Walk the map, applying the expression to every element, transforming
them into a new map.</description>
          <long-description>```
$nums = new Map(range(0, 9));
$doubled = $nums-&gt;map('$_0 * 2');
```

The expression receives two arguments:
  - The current value in `$_0`
  - The current key in `$_1`

The keys in the resulting map will be the same as the keys in the
original map: only the values have (potentially) changed.

Recommended to use this method when you are mapping from one type to
the same type: int to int, string to string, etc. If you are changing
types, use the more powerful `transform` method.</long-description>
          <tag name="param" line="398" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="398" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="api" line="398" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="440" package="Haldayne">
        <name>reduce</name>
        <full_name>\Haldayne\Boost\Map::reduce()</full_name>
        <docblock line="440">
          <description>Walk the map, applying a reducing expression to every element, so as to
reduce the map to a single value.</description>
          <long-description>The `$reducer` expression receives three arguments:
  - The current reduction (`$_0`)
  - The current value (`$_1`)
  - The current key (`$_2`)

The initial value, if given or null if not, is passed as the current
reduction on the first invocation of `$reducer`. The return value from
`$reducer` then becomes the new, current reduced value.

```
$nums = new Map(range(0, 3));
$sum = $nums-&gt;reduce('$_0 + $_1');
// $sum == 6
```

If `$finisher` is a callable or string expression, then it will be
called last, after iterating over all elements. It will be passed
reduced value. The `$finisher` must return the new final value.</long-description>
          <tag name="param" line="440" description="" type="callable|string" variable="$reducer">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="440" description="" type="mixed" variable="$initial">
            <type>mixed</type>
          </tag>
          <tag name="param" line="440" description="" type="callable|string|null" variable="$finisher">
            <type>callable</type>
            <type>string</type>
            <type>null</type>
          </tag>
          <tag name="return" line="440" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="440" description=""/>
          <tag name="see" line="440" description="" link="http://php.net/manual/en/function.array-reduce.php"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$reducer</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$initial</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finisher</name>
          <default>null</default>
          <type>callable|string|null</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="467" package="Haldayne">
        <name>rekey</name>
        <full_name>\Haldayne\Boost\Map::rekey()</full_name>
        <docblock line="467">
          <description>Change the key for every element in the map using an expression to
calculate the new key.</description>
          <long-description>```
$keyed_by_bytecode = new Map(count_chars('war of the worlds', 1));
$keyed_by_letter   = $keyed_by_bytecode-&gt;rekey('chr($_1)');
```</long-description>
          <tag name="param" line="467" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="467" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="467" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="497" package="Haldayne">
        <name>merge</name>
        <full_name>\Haldayne\Boost\Map::merge()</full_name>
        <docblock line="497">
          <description>Merge the given collection into this map.</description>
          <long-description>The merger callable decides how to merge the current map's value with
the given collection's value.  The merger callable receives two
arguments:
  - This map's value at the given key
  - The collection's value at the given key

If the current map does not have a value for a key in the collection,
then the default value is assumed.</long-description>
          <tag name="param" line="497" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="497" description="" type="callable" variable="$merger">
            <type>callable</type>
          </tag>
          <tag name="param" line="497" description="" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="497" description="" type="\Haldayne\Boost\MapOfObjects">
            <type>\Haldayne\Boost\MapOfObjects</type>
          </tag>
          <tag name="api" line="497" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$merger</name>
          <default></default>
          <type>callable</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="577" package="Haldayne">
        <name>transform</name>
        <full_name>\Haldayne\Boost\Map::transform()</full_name>
        <docblock line="577">
          <description>Flexibly and thoroughly change this map into another map.</description>
          <long-description>```
// transform a word list into a map of word to frequency in the list
use Haldayne\Boost\Map;
$words   = new Map([ 'bear', 'bee', 'goose', 'bee' ]);
$lengths = $words-&gt;transform(
    function (Map $new, $word) {
        if ($new-&gt;has($word)) {
            $new-&gt;set($word, $new-&gt;get($word)+1);
        } else {
            $new-&gt;set($word, 1);
        }
    }
);
```

Sometimes you need to create one map from another using a strategy
that isn't one-to-one. You may need to change keys. You may need to
add multiple elements. You may need to delete elements. You may need
to change from a map to a number.

Whatever the case, the other simpler methods in Map don't quite fit the
problem. What you need, and what this method provides, is a complete
machine to transform this map into something else:

```
// convert a word list into a count of unique letters in those words
use Haldayne\Boost\Map;
$words   = new Map([ 'bear', 'bee', 'goose', 'bee' ]);
$letters = $words-&gt;transform(
    function ($frequencies, $word) {
        foreach (count_chars($word, 1) as $byte =&gt; $frequency) {
            $letter = chr($byte);
            if ($frequencies-&gt;has($letter)) {
                $new-&gt;set($letter, $frequencies-&gt;get($letter)+1);
            } else {
                $new-&gt;set($letter, 1);
            }
        }
    },
    function (Map $original) { return new MapOfIntegers(); },
    function (MapOfIntegers $new) { return $new-&gt;sum(); }
);
```

This method accepts three callables
1. `$creator`, which is called first with the current map, performs any
initialization needed.  The result of this callable will be passed to
all the other callables.  If no creator is given, then use a default
one that returns an empty Map.

2. `$transformer`, which is called for every element in this map and
receives the initialized value, the current value, and the current key
in that order. The transformer should modify the initialized value
appropriately. Often this means adding to a new map zero or more
tranformed values.

3. `$finisher`, which is called last, receives the initialized value
that was modified by the transformer calls. The finisher may transform
that value once more as needed. If no finisher given, then no finishing
step is made.</long-description>
          <tag name="param" line="577" description="" type="callable" variable="$tranformer">
            <type>callable</type>
          </tag>
          <tag name="param" line="577" description="" type="callable|null" variable="$creator">
            <type>callable</type>
            <type>null</type>
          </tag>
          <tag name="param" line="577" description="" type="callable|null" variable="$finisher">
            <type>callable</type>
            <type>null</type>
          </tag>
          <tag name="return" line="577" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="577" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$transformer</name>
          <default></default>
          <type>callable</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$creator</name>
          <default>null</default>
          <type>callable|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finisher</name>
          <default>null</default>
          <type>callable|null</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="613" package="Haldayne">
        <name>into</name>
        <full_name>\Haldayne\Boost\Map::into()</full_name>
        <docblock line="613">
          <description>Put all of this map's elements into the target and return the target.</description>
          <long-description>```
$words = new MapOfStrings([ 'foo', 'bar' ]);
$words-&gt;map('strlen($_0)')-&gt;into(new MapOfInts)-&gt;sum(); // 6
```

Use when you've mapped your elements into a different type, and you
want to fluently perform operations on the new type. In the example,
the sum of the words' lengths was calculated.</long-description>
          <tag name="return" line="613" description="" type="\Haldayne\Boost\$target">
            <type>\Haldayne\Boost\$target</type>
          </tag>
          <tag name="api" line="613" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$target</name>
          <default></default>
          <type>\Haldayne\Boost\Map</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="627" package="Haldayne">
        <name>push</name>
        <full_name>\Haldayne\Boost\Map::push()</full_name>
        <docblock line="627">
          <description>Treat the map as a stack and push an element onto its end.</description>
          <long-description></long-description>
          <tag name="return" line="627" description="" type="\Haldayne\Boost\MapOfObjects">
            <type>\Haldayne\Boost\MapOfObjects</type>
          </tag>
          <tag name="api" line="627" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$element</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="639" package="Haldayne">
        <name>pop</name>
        <full_name>\Haldayne\Boost\Map::pop()</full_name>
        <docblock line="639">
          <description>Treat the map as a stack and pop an element off its end.</description>
          <long-description></long-description>
          <tag name="return" line="639" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="639" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="662" package="Haldayne">
        <name>count</name>
        <full_name>\Haldayne\Boost\Map::count()</full_name>
        <docblock line="662">
          <description>Count the number of items in the map.</description>
          <long-description></long-description>
          <tag name="return" line="662" description="" type="integer">
            <type>integer</type>
          </tag>
          <tag name="api" line="662" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="676" package="Haldayne">
        <name>toArray</name>
        <full_name>\Haldayne\Boost\Map::toArray()</full_name>
        <docblock line="676">
          <description>Copy this map into an array, recursing as necessary to convert
contained collections into arrays.</description>
          <long-description></long-description>
          <tag name="api" line="676" description=""/>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Arrayable::toArray()" refers="\Haldayne\Boost\Contract\Arrayable::toArray()" link="/classes/Haldayne.Boost.Contract.Arrayable.html#method_toArray"/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="698" package="Haldayne">
        <name>toJson</name>
        <full_name>\Haldayne\Boost\Map::toJson()</full_name>
        <docblock line="698">
          <description>Return a JSON representation of the object.</description>
          <long-description></long-description>
          <tag name="api" line="698" description=""/>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Jsonable::toJson()" refers="\Haldayne\Boost\Contract\Jsonable::toJson()" link="/classes/Haldayne.Boost.Contract.Jsonable.html#method_toJson"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>0</default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="712" package="Haldayne">
        <name>offsetExists</name>
        <full_name>\Haldayne\Boost\Map::offsetExists()</full_name>
        <docblock line="712">
          <description>Determine if a value exists at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="712" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="712" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="724" package="Haldayne">
        <name>offsetGet</name>
        <full_name>\Haldayne\Boost\Map::offsetGet()</full_name>
        <docblock line="724">
          <description>Get a value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="724" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="724" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="768" package="Haldayne">
        <name>offsetUnset</name>
        <full_name>\Haldayne\Boost\Map::offsetUnset()</full_name>
        <docblock line="768">
          <description>Unset the value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="768" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="768" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="782" package="Haldayne">
        <name>getIterator</name>
        <full_name>\Haldayne\Boost\Map::getIterator()</full_name>
        <docblock line="782">
          <description>Get an iterator for a copy of the map.</description>
          <long-description></long-description>
          <tag name="return" line="782" description="" type="\ArrayIterator">
            <type>\ArrayIterator</type>
          </tag>
          <tag name="api" line="782" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="802" package="Haldayne">
        <name>passes</name>
        <full_name>\Haldayne\Boost\Map::passes()</full_name>
        <docblock line="802">
          <description>Decide if the given result is considered "passing" or "failing".</description>
          <long-description>This method provides a definitive reference for what this and all
derived classes consider passing:
  - if the result is strictly false, the result "failed"
  - otherwise, the result "succeeded"</long-description>
          <tag name="param" line="802" description="" type="mixed" variable="$result">
            <type>mixed</type>
          </tag>
          <tag name="return" line="802" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$result</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="813" package="Haldayne">
        <name>is_collection_like</name>
        <full_name>\Haldayne\Boost\Map::is_collection_like()</full_name>
        <docblock line="813">
          <description>Decide if the given value is considered collection-like.</description>
          <long-description></long-description>
          <tag name="param" line="813" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="813" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="843" package="Haldayne">
        <name>collection_to_array</name>
        <full_name>\Haldayne\Boost\Map::collection_to_array()</full_name>
        <docblock line="843">
          <description>Give me a native PHP array, regardless of what kind of collection-like
structure is given.</description>
          <long-description></long-description>
          <tag name="param" line="843" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Traversable|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|object|array" variable="$items">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="return" line="843" description="" type="array|boolean">
            <type>array</type>
            <type>boolean</type>
          </tag>
          <tag name="throws" line="843" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="880" package="Haldayne">
        <name>grep</name>
        <full_name>\Haldayne\Boost\Map::grep()</full_name>
        <docblock line="880">
          <description>Finds elements for which the given code passes, optionally limited to a
maximum count.</description>
          <long-description>If limit is null, no limit on number of matches. If limit is positive,
return that many from the front of the array. If limit is negative,
return that many from the end of the array.</long-description>
          <tag name="param" line="880" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="880" description="" type="integer|null" variable="$limit">
            <type>integer</type>
            <type>null</type>
          </tag>
          <tag name="return" line="880" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$limit</name>
          <default>null</default>
          <type>integer|null</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="925" package="Haldayne">
        <name>walk</name>
        <full_name>\Haldayne\Boost\Map::walk()</full_name>
        <docblock line="925">
          <description>Execute the given code over each element of the map. The code receives
the value by reference and then the key as formal parameters.</description>
          <long-description>The items are walked in the order they exist in the map. If the code
returns boolean false, then the iteration halts. Values can be modified
from within the callback, but not keys.

Example:
```
$map-&gt;each(function (&amp;$value, $key) { $value++; return true; })-&gt;sum();
```</long-description>
          <tag name="param" line="925" description="" type="callable" variable="$code">
            <type>callable</type>
          </tag>
          <tag name="return" line="925" description="" type="\Haldayne\Boost\MapOfObjects">
            <type>\Haldayne\Boost\MapOfObjects</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="942" package="Haldayne">
        <name>walk_backward</name>
        <full_name>\Haldayne\Boost\Map::walk_backward()</full_name>
        <docblock line="942">
          <description>Like `walk`, except walk from the end toward the front.</description>
          <long-description></long-description>
          <tag name="param" line="942" description="" type="callable" variable="$code">
            <type>callable</type>
          </tag>
          <tag name="return" line="942" description="" type="\Haldayne\Boost\MapOfObjects">
            <type>\Haldayne\Boost\MapOfObjects</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="977" package="Haldayne">
        <name>key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::key_to_hash()</full_name>
        <docblock line="977">
          <description>Lookup the hash for the given key. If a hash does not yet exist, one is
created.</description>
          <long-description></long-description>
          <tag name="param" line="977" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="977" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="throws" line="977" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="1015" package="Haldayne">
        <name>hash_to_key</name>
        <full_name>\Haldayne\Boost\Map::hash_to_key()</full_name>
        <docblock line="1015">
          <description>Lookup the key for the given hash.</description>
          <long-description></long-description>
          <tag name="param" line="1015" description="" type="string" variable="$hash">
            <type>string</type>
          </tag>
          <tag name="return" line="1015" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$hash</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="1035" package="Haldayne">
        <name>call</name>
        <full_name>\Haldayne\Boost\Map::call()</full_name>
        <docblock line="1035">
          <description>Call the expression with the arguments.</description>
          <long-description></long-description>
          <tag name="param" line="1035" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="throws" line="1035" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="32" code="PPC:ERR-50015">Argument $value is missing from the Docblock of allowed</error>
    </parse_markers>
    <source>eJxdUstu2zAQvPMr9qCDbLj2B6SPpEnQ5lA4KHyzDWNNbSw1FEmQlF0h9b93KVGWE1642MfM7JCfv9nSCo01eYuS4CeqAltNm+/G+HAjxGI6FTCFp9oqqkkHDwg1WgglBg5aMFq1II0OWGkw+z8kuScm5zy3EFKh9/AL7fJlmYr0N5AuPPxo0BVUcO1u74NDGcSbAD4dZzxTuEelmIvgUB1JQ02hNAXDAx3JtYkPmDn2sK4ZoC7AUWhclxtwHPlGRfFRv6ZT7J2n4tBza9FhDSyl0gfIEtcqAo+0KMthWyoG/mBAstD5ByR0Dtt/uuEVMnQH32Fx0PRG8pSN5vAdLiQjRlpi8/5JNmzXpQVtleJFd9tmryoJL42WoWK1aK1q87TJrNeTpHyB9XbSDfWex5P1LnEtOsREN2MplJX/9PWE6jW/wOdZv/8MsldqJ9B4gpGt45kNoJMrniuudZzcMmP0b8cAbhfhd53UfD0S9KjbBDsZlZ2v4mRZwu7zZ9H/qQU8/16uHu9Xjw9w9/wkPv60t9tKl+Sq8GDk+b2rzgQWwc89GquUOVGRZ0dUDV3vliRUftdLH1oGMWfxH1DBDE0=</source>
  </file>
  <file path="customs/src/SecurityConcernException.php" generated-path="customs.src.SecurityConcernException.html" hash="8e6dfd2c423d4ba1686a2698a7998baf" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Customs" line="21" package="Haldayne">
      <extends>\Haldayne\Customs\UploadException</extends>
      <name>SecurityConcernException</name>
      <full_name>\Haldayne\Customs\SecurityConcernException</full_name>
      <docblock line="21">
        <description>A specific kind of UploadException: the upload is suspicious.</description>
        <long-description>It's recommended that you also log the session ID, IP address, and other
environment for their diagnostic value. The exception message does not
include these details for security, but the exception provides a method for
extracting them. Example:

```
try {
    $it = new UploadIterator;
} catch (SecurityConcernException $ex) {
    error_log($ex-&gt;getDiagnosticMessage());
    throw $ex;
}</long-description>
        <tag name="package" line="21" description="Haldayne"/>
        <tag name="inherited_from" description="\Haldayne\Customs\UploadException" refers="\Haldayne\Customs\UploadException" link="/classes/Haldayne.Customs.UploadException.html"/>
      </docblock>
      <constant namespace="Haldayne\Customs" line="23" package="Haldayne">
        <name>NOT_UPLOADED</name>
        <full_name>\Haldayne\Customs\SecurityConcernException::NOT_UPLOADED</full_name>
        <value>1</value>
        <docblock line="23">
          <description></description>
          <long-description></long-description>
        </docblock>
      </constant>
      <constant namespace="Haldayne\Customs" line="24" package="Haldayne">
        <name>UNKNOWN_CODE</name>
        <full_name>\Haldayne\Customs\SecurityConcernException::UNKNOWN_CODE</full_name>
        <value>2</value>
        <docblock line="24">
          <description></description>
          <long-description></long-description>
        </docblock>
      </constant>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="61" package="Haldayne">
        <name>$htmlName</name>
        <full_name>\Haldayne\Customs\HtmlNameAccessorTrait::htmlName</full_name>
        <default></default>
        <docblock line="61">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="61" description="&lt;p&gt;The HTML name we were given.&lt;/p&gt;" type="string" variable="$htmlName">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="31" package="Haldayne">
        <name>getMessage</name>
        <full_name>\Haldayne\Customs\SecurityConcernException::getMessage()</full_name>
        <docblock line="31">
          <description>Return the message specific for this exception code.</description>
          <long-description></long-description>
          <tag name="api" line="31" description=""/>
          <tag name="since" line="31" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="60" package="Haldayne">
        <name>getDiagnosticMessage</name>
        <full_name>\Haldayne\Customs\SecurityConcernException::getDiagnosticMessage()</full_name>
        <docblock line="60">
          <description>Returns a string containing details of the remote connection at the
time the security concern was raised.</description>
          <long-description>Knowing the remote connection and environment helps frame the context
of the problem: patterns of attack, duration, payload sizes. From this
data, you can better adapt your environment.

This method captures the session ID, IP address, and other environment
details into a string for foresnic diagnostics.</long-description>
          <tag name="return" line="60" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="api" line="60" description=""/>
          <tag name="since" line="60" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="53" package="Haldayne">
        <name>getHtmlName</name>
        <full_name>\Haldayne\Customs\HtmlNameAccessorTrait::getHtmlName()</full_name>
        <docblock line="53">
          <description>Get the HTML variable name.</description>
          <long-description></long-description>
          <tag name="return" line="53" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="api" line="53" description=""/>
          <tag name="since" line="53" description="1.0.0"/>
        </docblock>
        <inherited_from>\Haldayne\Customs\HtmlNameAccessorTrait</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>eJylVN9vGjkQfuevmIdUQERJe4/Q9hoFTo3aBgSk99CrNo49gJVde+XxhtBT/vcbe70LyeV0J50lWMsef/Pr++bdr+W27BhRIJVCInwSuRJ7g39cVORtQeNO5+z0tAOncA5UotRrLeFOGwV2DddlboWaPkgsvbZmBH6LUMVD0ARUUamlthUNGSBgXPougUNpiwKNQsUPhIe9rUDkZCG3mwhBSMR4cDkZwOUchFKOTwYggls2cAELzb121jCQh7V14aF2oLTYGEueo7wXeYVDWDEgNiEC50lig6AsEhjrA5I2Mq8UBgTiG/RC5xQxCWXltN8P4LbyMbQDUunsvVaMIhjUb60KL2JgD94J6bWJyRRDmD6IosxxlIpwc3MTPt7t4c+wCetEe3gPBnepppcenfDWjYPBI0jh5RZ6yxTOhTUSnWkLDyf40D+AoXPWZVzMHp+//rBBP2mr8rXOv9fvjxtzv3V2FyBqZ3WUZx2ZCyL4R5ecJbeQnnOgw1HwktaQh6vZKruef5mdT6YTTu/t+Oju+urz1ez3q+xiNpny3S9MtHAZyRbWKSzQV87EqjddaxlYN5w5duiHtAqHzduPotTtnrjBCG+Hb4Zv0tlZ/JbVbR6wKiMjAheqLU80qHMJi3Y6duAkOH39IfjqH11LwcQhL7jAo9Fx1qPWJCxXZ9QNlFzrHGEnIgmTZqIenK02W5jPlqtuKsnfHByX7l8cbFmJwkBl7ozdGZh/mjf6jCSJRTv2o3Atqty/iJpyT70YtyaPnfr/5f4FfZB3QQ3ceJaWCdtGZDxEQn8dFtZjMDBY90JEuTVQXheYJkNNx2Aa+Bgr6IQmVE3vmzefOeOkwZfweZQcT5At5iVr3onkKMTKFG/AUpys+dscixGUwrNCTUyAt0LeDUBVLFnGHvDtPtaY9E+kIfzmbBHZ2qAp4cUgjj3JzbnFgMVTTpRxFrrjwJ5ntQqkT/NG8oOKJ+N/m5nHqG0gqQ3aeHvoUxAX/5AMq+MwUOl5LB8TMepn/1d6L8yoZyJs3JXszq97TzjafUWjpgaZVu+/v6Ifg9T3LBQjnnQHTx5l2cWX8+Uyy54eH2B6/ac3J9lyuvg2XXzvLqZfZ6tpdj6ZLLo/Wpv+OGnhsfMXeMw+fA==</source>
  </file>
  <file path="boost/src/Contract/Jsonable.php" generated-path="boost.src.Contract.Jsonable.html" hash="9d44ae119de918bed5ae503ebcfaa745" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <interface namespace="Haldayne\Boost\Contract" line="4" package="Haldayne">
      <name>Jsonable</name>
      <full_name>\Haldayne\Boost\Contract\Jsonable</full_name>
      <docblock line="4">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="4" description="Haldayne"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost\Contract" line="9" package="Haldayne">
        <name>toJson</name>
        <full_name>\Haldayne\Boost\Contract\Jsonable::toJson()</full_name>
        <docblock line="9">
          <description>Return a JSON representation of the object.</description>
          <long-description></long-description>
        </docblock>
      </method>
    </interface>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="4" code="PPC:ERR-50009">No summary for interface ""</error>
    </parse_markers>
    <source>eJwtjTEOwjAMRXefwiNkoAcoEhIsqAOVYO3iBEcNKnaUuANC3B1a8Ze3vKe/P+Qxg9CTa6bAeKbpTi/h4ahabTipWKFgLUAS4xIXp6sq5CeGN+BvjXMr0eGVbS6ChN2tv2DhXLiyGFlSQY1oI6P6Bwfb/ZNmZZ79lALGWcKqmi4fm20LH/gC88czZw==</source>
  </file>
  <file path="customs/src/UploadFile.php" generated-path="customs.src.UploadFile.html" hash="73b4447fef1aa9f093568601affbac31" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <namespace-alias name="Mime">\Haldayne\Mime</namespace-alias>
    <class final="false" abstract="false" namespace="Haldayne\Customs" line="9" package="Haldayne">
      <extends/>
      <name>UploadFile</name>
      <full_name>\Haldayne\Customs\UploadFile</full_name>
      <docblock line="9">
        <description>Represents a file that has been successfully uploaded.</description>
        <long-description></long-description>
        <tag name="package" line="9" description="Haldayne"/>
      </docblock>
      <property static="false" visibility="protected" namespace="Haldayne\Customs" line="60" package="Haldayne">
        <name>$name</name>
        <full_name>\Haldayne\Customs\UploadFile::name</full_name>
        <default></default>
        <docblock line="60">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="Haldayne\Customs" line="61" package="Haldayne">
        <name>$file</name>
        <full_name>\Haldayne\Customs\UploadFile::file</full_name>
        <default></default>
        <docblock line="61">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="61" package="Haldayne">
        <name>$htmlName</name>
        <full_name>\Haldayne\Customs\HtmlNameAccessorTrait::htmlName</full_name>
        <default></default>
        <docblock line="61">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="61" description="&lt;p&gt;The HTML name we were given.&lt;/p&gt;" type="string" variable="$htmlName">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="34" package="Haldayne">
        <name>getClientFilename</name>
        <full_name>\Haldayne\Customs\UploadFile::getClientFilename()</full_name>
        <docblock line="34">
          <description>Get the file name the client gave us for this file, if any.</description>
          <long-description>Do not rely on this file name for anything but display, because you
cannot trust that it contains safe characters.</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="45" package="Haldayne">
        <name>getServerFile</name>
        <full_name>\Haldayne\Customs\UploadFile::getServerFile()</full_name>
        <docblock line="45">
          <description>Get the temporary file holding this upload. You must move this file
before the request ends to keep the upload.</description>
          <long-description></long-description>
          <tag name="see" line="45" description="" link="\Haldayne\Customs\UploadFile::moveTo"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="53" package="Haldayne">
        <name>getMimeAnalyzer</name>
        <full_name>\Haldayne\Customs\UploadFile::getMimeAnalyzer()</full_name>
        <docblock line="53">
          <description>Get the MIME analyzer for the file</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="53" package="Haldayne">
        <name>getHtmlName</name>
        <full_name>\Haldayne\Customs\HtmlNameAccessorTrait::getHtmlName()</full_name>
        <docblock line="53">
          <description>Get the HTML variable name.</description>
          <long-description></long-description>
          <tag name="return" line="53" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="api" line="53" description=""/>
          <tag name="since" line="53" description="1.0.0"/>
        </docblock>
        <inherited_from>\Haldayne\Customs\HtmlNameAccessorTrait</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="60" code="PPC:ERR-50007">No summary for property $name</error>
      <error line="61" code="PPC:ERR-50007">No summary for property $file</error>
    </parse_markers>
    <source>eJyFVE1vEzEQve+vmEMPbRSSe0uBKi1QiUDVhgNSpWp2M5s1eG3jj6AF+t8Z29lkm6pkLyuNZ968efPs129NYwqFLTmDFcFHlEvsFN3PgvO6dWdFEdwgPBctcWw6GhUwglsylhwp7wChFpLAN+ihQQclkQIXqoqcq4OUHQQjNS5pOeHKaVFJdA6+pth7riz+FMBfauZb+ZkZXaRibRcWheem8Tw1jt8IZpbQEzdW9At0+Z0qD7YnJNSKT0ZDAqMtg0R1ssHp4d4ZtNiC8zbWHjUbErBomNFi/gnWaAWWPGNUCyptuZPRahnTvebJhXsC3CMqbv63h1U9pLZiJRTKLFsMj4FlW4k161Z2DMc9pOBR9vF6qFQYoTy1Rlu0HTiya7IZ0qBvXuAllCfLvTeBafqbUEpRQR1U5YVW8PBQacW9QuWPt2qM8wTj3P0kFebFxe8o9nr1xpHvV7irPDnbT0tSnGfAZ4dphPO02vs7I6NDrlWtj3PfnP74zBIfyCfhtpoOZIQVron9BbW2O1HGIGpA1e274VKD0tFPbFwWY5ufUSMEF3GUF1EGD0vhjMRuzLavMHq406GHqlBFKFbS+Xw/hGf7KI9COXBYM8OGN1vxUtzkvztZkZ+lYaIekcnx/gos+WDVUOJDWu3ck+ZrtMyOjhPnCzOBbzpAG+m3ek07MXqokliQrLWln4E4kdTSRff9IDLpYAO1f+kc0eAROD2NDRb6kAh3yeex4oAAkeUhAebX8yveJsrud7w7yR00nO9FGvExvNgUvkQkOjjm3e8SnxKaws3tl8XVbHF1CRc31zlqrPb8nvFTNbgeg2Ce67H4B6nQwj0=</source>
  </file>
  <file path="customs/src/HtmlNameAccessorTrait.php" generated-path="customs.src.HtmlNameAccessorTrait.html" hash="99c846f2e4ec58a9cafad146fe4c0465" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <trait namespace="Haldayne\Customs" line="28" package="Haldayne">
      <name>HtmlNameAccessorTrait</name>
      <full_name>\Haldayne\Customs\HtmlNameAccessorTrait</full_name>
      <docblock line="28">
        <description>Accessor methods for the HTML name of a file upload.</description>
        <long-description>Every uploaded file has a name, given to it in the HTML form. The HTML
spec says the name qualifies as CDATA, so pretty much any character can
comprise an HTML variable name. However, the HTML name we have access
to is subject to PHP engine rules' name mangling.

In many cases, the HTML name returned matches the HTML name given, but
not in all cases:

Given in Form     |Returned from getHtmlName()   |Match?
------------------|------------------------------|------
foo               |foo                           |Yes
foo[bar]          |foo[bar]                      |Yes
foo[bar][baz_1]   |foo[bar][baz_1]               |Yes
foo_bar           |foo_bar                       |Yes
foo.bar           |foo_bar                       |No
foo bar           |foo_bar                       |No
foo[]             |foo[0]                        |No

As a rule of thumb, avoid using "." and " " in your HTML form names.
When using array syntax, prefer explicit naming your keys.</long-description>
        <tag name="package" line="28" description="Haldayne"/>
      </docblock>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="61" package="Haldayne">
        <name>$htmlName</name>
        <full_name>\Haldayne\Customs\HtmlNameAccessorTrait::htmlName</full_name>
        <default></default>
        <docblock line="61">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="61" description="&lt;p&gt;The HTML name we were given.&lt;/p&gt;" type="string" variable="$htmlName">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="53" package="Haldayne">
        <name>getHtmlName</name>
        <full_name>\Haldayne\Customs\HtmlNameAccessorTrait::getHtmlName()</full_name>
        <docblock line="53">
          <description>Get the HTML variable name.</description>
          <long-description></long-description>
          <tag name="return" line="53" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="api" line="53" description=""/>
          <tag name="since" line="53" description="1.0.0"/>
        </docblock>
      </method>
    </trait>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>eJydVW1P2zAQ/p5fcUJIG1VJ4evYBhVjtNKAinWbJoaQmziNN8fObKeQDf777pw3Gl60zZXa9HzP3XNP766v9/M0DxTLuM1ZxGHCZMxKxb8dFtbpzO4FwWgwCGAA4yji1moDGXepji0k+OxShMxPPgBFAJ0Ag0RIDkUuNYtDxBH0aMVNWdt4XHmkzKIzwYawFCuuwGkQDoTqgmKGLIR5/ZUi2ZxHYFlpvZNP+rNgUiSCYzgLh+/G8/EQrIbccOdKyIooBaZKiFJmWOS4gYgpChXpLDfCcrytsq2YEWwhq7AhTPQ1R97DXo3XRH2FKC8HBSLeFmyx+M4jR99mkxlwtRSKgykkty8qZMbUUgq1bFSZKjIhM2a57adB9oVRKFbGXJRy27v2ig1hUTiKpLTXjUlZBXtVZzj2uuLNexQS6NyeN3ETozNYcjdxmTzFkC+36PqEsu0TdvvBuX1oeuSasInWsH5uH5rWrr9yWwMvFsxcrgN7pueA+PbravfyPrAzPQG8Qq8e1Z7pCWD4b8BT3Wjzn7iL9SJ8hTtPCNPg/OTSpFEn0oC6tMgWQ2ArLWIoLPYjbIQbOAQxbOALm6XUhenmz/ebpZ6FLyl2UwVhxrASbKkcuxnSrCU4WPwmlyLCGUYIOflAP3jp0aPAGYZ3Tb8162RO1uB3QJT9pqEzgI/cdS2/Ppm1S+N5pmQJn/xumeJ4M4dryaa6kDHYOki1nHBAjBMJLgHQflZtVUwTyKU4xp5kP8VBjrsjA+sMlbWZ1iW0m+lxgnBQDTHSkElrEwpJKiZrw8h/5sUClYOkUJETmhDdXLbptrxrpRSdTSK8/bZl86Zjttc61RS8b2W9C/paH/+11m1FXonWynLRPqOi+DeyG+6EO8+WuLZ6epXdJ90VuE5/BLPz6efx/AjGs2lbEhwg/2d+qGaFX3NTL9GwJWjEijl+X8S74A9zEAJY</source>
  </file>
  <file path="customs/src/UploadError.php" generated-path="customs.src.UploadError.html" hash="7fd6641b8283289762470103dc2e5573" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Customs" line="15" package="Haldayne">
      <extends/>
      <name>UploadError</name>
      <full_name>\Haldayne\Customs\UploadError</full_name>
      <docblock line="15">
        <description>Represents a file that did not successfully upload.</description>
        <long-description>Errors occur when the *client* did something wrong. The possible causes are:
- The client did not upload a file.
- The client uploaded a partial, incomplete file.
- The client sent more bytes than either the form or the server allowed.</long-description>
        <tag name="see" line="15" description="which occurs when the server went wrong or the client&#10;appears to be circumventing PHP file upload safeguards." link="\Haldayne\Customs\UploadException"/>
        <tag name="package" line="15" description="Haldayne"/>
      </docblock>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="134" package="Haldayne">
        <name>$code</name>
        <full_name>\Haldayne\Customs\UploadError::code</full_name>
        <default></default>
        <docblock line="134">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="134" description="&lt;p&gt;The error code.&lt;/p&gt;" type="integer" variable="$code">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="137" package="Haldayne">
        <name>$size</name>
        <full_name>\Haldayne\Customs\UploadError::size</full_name>
        <default></default>
        <docblock line="137">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="137" description="&lt;p&gt;The size of the file uploaded.&lt;/p&gt;" type="integer" variable="$size">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="Haldayne\Customs" line="142" package="Haldayne">
        <name>$messages</name>
        <full_name>\Haldayne\Customs\UploadError::messages</full_name>
        <default>array(UPLOAD_ERR_INI_SIZE =&gt; 'The file size exceeds the server-allowed limit.', UPLOAD_ERR_FORM_SIZE =&gt; 'The file size exceeds the form-allowed upload limit.', UPLOAD_ERR_PARTIAL =&gt; 'The file was only partially uploaded.', UPLOAD_ERR_NO_FILE =&gt; 'No file was uploaded.')</default>
        <docblock line="142">
          <description>The possible failure codes and an English description.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="61" package="Haldayne">
        <name>$htmlName</name>
        <full_name>\Haldayne\Customs\HtmlNameAccessorTrait::htmlName</full_name>
        <default></default>
        <docblock line="61">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="61" description="&lt;p&gt;The HTML name we were given.&lt;/p&gt;" type="string" variable="$htmlName">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Haldayne\Customs" line="54" package="Haldayne">
        <name>changeErrorMessage</name>
        <full_name>\Haldayne\Customs\UploadError::changeErrorMessage()</full_name>
        <docblock line="54">
          <description>Change the text associated with a PHP upload error code.</description>
          <long-description>You may want to localize or otherwise change the generic error
associated with one of the upload error codes. You may only change
messages for the following upload error codes:

- UPLOAD_ERR_INI_SIZE (1) : The upload exceeds the `upload_max_filesize`
  directive.
- UPLOAD_ERR_FORM_SIZE (2) : The upload exceeds the `MAX_FILE_SIZE`
  directive in the HTML form.
- UPLOAD_ERR_PARTIAL (3) : The upload was incomplete.
- UPLOAD_ERR_NO_FILE (4) : No file was uploaded.</long-description>
          <tag name="param" line="54" description="&lt;p&gt;The code whose message you want to change.&lt;/p&gt;" type="integer" variable="$code">
            <type>integer</type>
          </tag>
          <tag name="param" line="54" description="&lt;p&gt;The new message for that code.&lt;/p&gt;" type="string" variable="$message">
            <type>string</type>
          </tag>
          <tag name="throws" line="54" description="If the given code does not have a message" type="\OutOfBoundsException">
            <type>\OutOfBoundsException</type>
          </tag>
          <tag name="api" line="54" description=""/>
          <tag name="since" line="54" description="1.0.0"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="70" package="Haldayne">
        <name>getErrorMessage</name>
        <full_name>\Haldayne\Customs\UploadError::getErrorMessage()</full_name>
        <docblock line="70">
          <description>Return a description of why the error occurred.</description>
          <long-description></long-description>
          <tag name="see" line="70" description="To adjust the message globally." link="\Haldayne\Customs\UploadError::changeErrorMessage"/>
          <tag name="api" line="70" description=""/>
          <tag name="since" line="70" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="88" package="Haldayne">
        <name>isTooBig</name>
        <full_name>\Haldayne\Customs\UploadError::isTooBig()</full_name>
        <docblock line="88">
          <description>Is the error because the uploaded file was too big?</description>
          <long-description>An upload may exceed either the `upload_max_filesize` setting or the
`MAX_FILE_SIZE` input. This method handles both cases and returns true
if either of these limits was reached. In such a case, the optional
pass-by-reference `$maximum` will indicate the maximum possible size.</long-description>
          <tag name="param" line="88" description="&lt;p&gt;The server or form allowed maximum file size, in bytes.&lt;/p&gt;" type="integer" variable="$maximum">
            <type>integer</type>
          </tag>
          <tag name="return" line="88" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="88" description=""/>
          <tag name="since" line="88" description="1.0.0"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$maximum</name>
          <default>null</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="109" package="Haldayne">
        <name>isPartial</name>
        <full_name>\Haldayne\Customs\UploadError::isPartial()</full_name>
        <docblock line="109">
          <description>Is the error because the uploaded file was only partially received?</description>
          <long-description></long-description>
          <tag name="param" line="109" description="&lt;p&gt;The number of bytes received.&lt;/p&gt;" type="integer" variable="$received">
            <type>integer</type>
          </tag>
          <tag name="return" line="109" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="109" description=""/>
          <tag name="since" line="109" description="1.0.0"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$received</name>
          <default>null</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="126" package="Haldayne">
        <name>notUploaded</name>
        <full_name>\Haldayne\Customs\UploadError::notUploaded()</full_name>
        <docblock line="126">
          <description>Is the error because no file was uploaded?</description>
          <long-description></long-description>
          <tag name="return" line="126" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="126" description=""/>
          <tag name="since" line="126" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="53" package="Haldayne">
        <name>getHtmlName</name>
        <full_name>\Haldayne\Customs\HtmlNameAccessorTrait::getHtmlName()</full_name>
        <docblock line="53">
          <description>Get the HTML variable name.</description>
          <long-description></long-description>
          <tag name="return" line="53" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="api" line="53" description=""/>
          <tag name="since" line="53" description="1.0.0"/>
        </docblock>
        <inherited_from>\Haldayne\Customs\HtmlNameAccessorTrait</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>eJzFV21v2zYQ/u5fcR+CxQkSp932yV3aupmHGMiL4bnDtrZwaImy2UmkQFJ2vCL/fXekKMuykq7dhvlLFJH33Ptzpx9e5cu8I1nGTc4iDpcsjdlG8vcXhbEqMy86nbPj4w4cw4TnmhsurQEGiUg52CWzEIsYpLJgiijixiRFmm6gyFPF4h6KkeRQa6UNqCgqNKyXXKIkh+MoFYh27BCMyrhdCrmAtVZy0YMp3siVMWKOiiJWGI5qNe8T3qk79eKVfq+yNK23d80fc7qQM20FS09AyEhlecotf0SIvIVMaQ7zjUUD0GEJXKD12rmQKJ2B8s+G6xW+Zmmq1rxy/bXhHN463cP7iOdWKIkhENHSh8Ns41ECrEmnC0JA9sYQGstzzlDGKpjje6GjIlvhGcVtfDn2WSkDYVjCFwXTsSFbzjpRyowJplBCOp86gD+MLFzaLL3BEhi4FCo91UxYzDydu+zT7xguNGcYKwaSr4MaTlCg5h95ZHvlxXD/NUaaZWCsJgMPlqUWF+HL6fUVUNlRENFNYYAcsZteQ1pgOA4iFXsx8tKrpFetd4340991DypxMazSXya6FEMBriVLYSSNZagf/Ysx2WWcRnjKrNJB4Mz9zYt5KiJIChm5dM5mkUJxXUS2Wzl54o0+8fYcOUEfcPodkMOnLw23IfRbyaMXzWvO+3PybsXSrsPdv+S83V5yWv2lh/1EYh0vuAuM5fcWsDJU5H1fY3VjhinOOxmuhzvA/KYKyNgG1hg5qslURSx1QceKoCZZCyyuaKtswSXXGDoHGVCaypVsZK1mgelVSpVEnvHYAQk5zLAF9mmiQn9SN1Lx7SP1G86cwtvx1e3gx9lwMpmNbkazn0e/D6H7/Aj6rpoCAnYxj42Dv/PvZhm7n1FdUczvAh4gM2lsCrHa1tuOjp9uJ9elkm+fUnI9+HX20+hq6O62wWPO3U3XUkRJ7frGg8l0NLiC7ncNbWtmalTYLnxz62yA7vckfKM81ZBk6KxHmn+3fd3DeqmwLMpkwQbzGQrIp7PZ1YE/ggQBEQOF/322cRTtUoJdarU28P62sLfJG1XI2GwpeOQLbIHhk96qWGHh0CBZshVxXIlewbFcVM8Gw8Xhee9Z71kbMyCV2DpBeLcc6V571G4gh1JLkx9EAl2mNdvM/uCbGb8Xxpog49H7/SBrjo5qkvTbu/HOiX5AegivtvTxADzFdOwiuNi5ILeGr3t48UTIDmvk9PAIA024LbREGezESAufFOz69XLjElOOFRqRuqW2alOVLvb7+yGGqQIWf8QtxgGGYlmkao4zujZmviCxVUYX3O6ks5k/7d1rScSW0T88xs4jUwvBnLvlZ3+IueazCjcBsXjViM9Aht4mpvRsUt9bWokLFxDrNglPngGrwT/Y0HlhaT/DiU07m4ox/TJGEJgj6eOu5lY1GZdBQCN1UaFhYZd2eIpHz1KRCdwpyR3cL6IlphvHMe2TNIgI7sQZrVyRsDRA5Tg4TuebU80Trjnl7e4AHRJZkd3hJElTNDUWEW0srgD80XapJKefIq0gMN3uZhgZt/KVS16F6fJBeLRT+l1xW19lLcyVSv9RzQkzVeqNWHS/qUw7B4nrdht5tM2y8/Pz+kbRZI0aqm+tCyUTsej3zcZYnl2ze//6DbnXrfV4reAp1XvU0rBnO/e+1iDKwdeb86ntZsLw6PO09QWt6faT8lMDn3BWcxw2cbNV6xUX7vgJV2Rz3yb+2yMc/heFNfZmYmVVJvyt0gorxecSWUOtbav/Y8pkywKzl5l/K744Id+WOh4bFC2bViOmu8PiDMaT0S+D6RAG41HlMrxeMd3YuGrbe2WfFitixQOP2yLd+glV+7gkim6C+Yw2o7/zGZ8wkRbab4F+RODn9FAuUmGW9UWg8blVaii3qmqWYjG9q+LYxndw/hIOp8Fy50p9sfacfhq43I2h3uFJG2SNsp6EJGKqAMsJ/BRu6J+GqS30UcW9HSgUjQdqXc9LQdw6Hjp/AZrJaAo=</source>
  </file>
  <file path="customs/src/UploadConfig.php" generated-path="customs.src.UploadConfig.html" hash="f732617d06412bf30d670148033538e6" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Customs" line="12" package="Haldayne">
      <extends/>
      <name>UploadConfig</name>
      <full_name>\Haldayne\Customs\UploadConfig</full_name>
      <docblock line="12">
        <description>Return information about the upload configuration.</description>
        <long-description>Some values come directly from the PHP configuration. Others are calculated
using the PHP configuration and run-time information.</long-description>
        <tag name="see" line="12" description="" link="http://php.net/manual/en/ini.core.php#ini.sect.file-uploads"/>
        <tag name="package" line="12" description="Haldayne"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Haldayne\Customs" line="23" package="Haldayne">
        <name>isEnabled</name>
        <full_name>\Haldayne\Customs\UploadConfig::isEnabled()</full_name>
        <docblock line="23">
          <description>Are file uploads enabled?</description>
          <long-description>Specified at the system level by the `file_uploads` ini directive.</long-description>
          <tag name="return" line="23" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="23" description=""/>
          <tag name="since" line="23" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Haldayne\Customs" line="40" package="Haldayne">
        <name>uploadWorkingPath</name>
        <full_name>\Haldayne\Customs\UploadConfig::uploadWorkingPath()</full_name>
        <docblock line="40">
          <description>In what directory will uploads be held for processing?</description>
          <long-description>Specified at the system level by the `upload_tmp_dir` ini directive.
If that directory isn't writeable, then PHP falls back to the system
temporary directory, which is specified at the system level by the
`sys_temp_dir` ini directive (and we can just ask `sys_get_temp_dir`).</long-description>
          <tag name="return" line="40" description="" type="string|null">
            <type>string</type>
            <type>null</type>
          </tag>
          <tag name="api" line="40" description=""/>
          <tag name="since" line="40" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Haldayne\Customs" line="65" package="Haldayne">
        <name>systemMaxUploadBytes</name>
        <full_name>\Haldayne\Customs\UploadConfig::systemMaxUploadBytes()</full_name>
        <docblock line="65">
          <description>What is the maximum file size supported system-wide?</description>
          <long-description>Controlled by the system-level directive `upload_max_filesize`, but
also constrained by the system-level directive `post_max_size`. The
*lower* of the two values defines the *upper* limit of the maximum
file size.

If the number of returned bytes equals `PHP_INT_MAX`, there is
effectively no limit.</long-description>
          <tag name="return" line="65" description="Bytes" type="integer">
            <type>integer</type>
          </tag>
          <tag name="api" line="65" description=""/>
          <tag name="since" line="65" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Haldayne\Customs" line="88" package="Haldayne">
        <name>formMaxUploadBytes</name>
        <full_name>\Haldayne\Customs\UploadConfig::formMaxUploadBytes()</full_name>
        <docblock line="88">
          <description>What is the maximum file size reported for the submitted form?</description>
          <long-description>If you include a hidden input element named `MAX_FILE_SIZE` in your
form, then all file inputs that come *after* that hidden input element
will be limited to the number of bytes given in the `MAX_FILE_SIZE`.

If the number of returned bytes equals `PHP_INT_MAX`, there is
effectively no limit.</long-description>
          <tag name="return" line="88" description="Bytes" type="integer">
            <type>integer</type>
          </tag>
          <tag name="api" line="88" description=""/>
          <tag name="since" line="88" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Haldayne\Customs" line="107" package="Haldayne">
        <name>maxFileUploads</name>
        <full_name>\Haldayne\Customs\UploadConfig::maxFileUploads()</full_name>
        <docblock line="107">
          <description>How many simultaneous file uploads do we support?</description>
          <long-description>If the number of returned uploads equals `PHP_INT_MAX`, there is
effectively no limit.</long-description>
          <tag name="return" line="107" description="Number of uploads" type="integer">
            <type>integer</type>
          </tag>
          <tag name="api" line="107" description=""/>
          <tag name="since" line="107" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="Haldayne\Customs" line="128" package="Haldayne">
        <name>limit</name>
        <full_name>\Haldayne\Customs\UploadConfig::limit()</full_name>
        <docblock line="128">
          <description>Given two values which follow the "0 or fewer is unlimited" pattern,
return the limiting number or PHP_INT_MAX if neither would limit.</description>
          <long-description></long-description>
          <tag name="param" line="128" description="" type="integer" variable="$a">
            <type>integer</type>
          </tag>
          <tag name="param" line="128" description="" type="integer" variable="$b">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$a</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$b</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>eJzdV1tv2zYUfvevOOiCxjYcOXtNE7RZka4G1tZosnXYBTIlUTEXitR4ieNt+e87JCVZkuV26LqX+SFWKPI7t+98hz5/Xq7LkSAF1SVJKbwmPCNbQX95abWRhX42Gs2n0xFM4T01VglgIpeqIIZJASSR1oBZU7AllySDVIqc3VrlX0d4yh28lgWFe8It1bgBnzOmaGr4FnIlC398+XrZOwvvcF1pIIpCSnhqOTE0c3BWM3E7fAqIyEBZcWIYmml5WrvyQlMKa2PKs/kc444ENfOCCEv4nIo5EyxKpaIRvvrK/aPRzShnnJ6E+DRizEcpJ1rD937lpTc/+nME+PGJcp8pXKLb7mCVGA1UkITT7Hm1od53XdKU5YxmQEIi9VYbWgCn95RDsvVrK4cUV0grjItVKWT3NKqR6u8XKtQpkZI3a6RkzTOmD+v8dXQanVZrc/9d2oSzFLTBjKWQW5H6lDJ9FVwfT/y2EKr7VIbGztIEnYpvqRkft309njzzux9H/fwsBGzWGHKIQ6otbBjnTbYSrBLlGWABoVQypdoV/fOSFzBjU5QxWjuUvkWOuzsOMS2ODWwUM9TFP3NownMuJ5yjjyS9AyNbhmssfCylIojRoM0wXJauERT0P/C6Rlrhu9jBDbgOY8f2jWsPAb9htwLRd+EEFmJ3ahL10lYzRBuFSf1LWP5FiBLy/EGqO0RdErPeI8wRugMX0FClW5maLO7Dchgz7VbH7tAEnj7F1MVNMcLqpIXdIqR7t4OquNd638/Q+CBLPzhGYMlclQrywApbhK7W7A/8Y0ssM6pSVcGTDcton6MoEEZJjv1TE7LaHMq9q2bNU7QTOxvOxGoGiTU1FOFaOr3DuhEmPg1YSm08nIeK4GbHqymXG6qmIHOPYDayFuiM5ogdQp5igG4XZwUz9d4qDzVSk44+yxZhu7BFQpU7HLLv3TZogP6OqqthhQ0VL97exG8uf1z5HkPlZLpGoXkewsFpIWTw5BCfmTDwjcP+EmwOSX1DHoLOe9w9Qs/ngERCqTXr4BrOKx3i25G+LgM+B+67bMVGxn7fuOmGTrmOJ61uONpR4+MQAxTyQHsd4IM9O/M+jxsPZ21Ln9kUilY94aTbs9MmaKRaKfrtgSzZSosxpdxmFAisWZZRV8sSbxaU04JiVd31JIMVUiR+tfjuKr5e/HTl1NCdVQ0TEb4SadTn4JKH0UHZ/dVjSnLjKO1XhmzVaH4c4RjyKULjldDv6BxYfIvUdAhh1HQd/J91hMvvJ/rByTZRimzjO7qN6QPTRo+PO1k5RpLFy3fXN4fUG31GKRqHTT/3Dv/a6opHLJmmwyCtFLYnwTChX8sNEllskcCF5YYIKq3u3t4y6QZtJfgDHD5Q1+by959U9m1jsLmd/vsqY0e/wshDlQcVDxOxJjhfTBhGOPMUXNu1REMt0VuXleZBe+LXytS/IPozOoC0ZM6fqZajcCRyEEOnw5C62NO24MisA9+WxBCRn617YTlbXh3ie6Jakh7Wen52N7d9G1Zd/zVrgfUUdw7L94sfLm+u4HK52CPtt154WoM73C9zvGognR0fn5wCSnBOcdA7ubaikrInUBLUYyVmNVblnzvk97jfVzWbVbuXXIMLyhxxYSMtXtCHSVoSRQrP0SMytJh0majYPf6426NilSeCOUoGeIi++MHrfiFWoc3CUMKSuKFUzSj/riNRp3COjrk7pX9KDigR4tTWu3xpW27Suuvnpnn7UuVso93zC7SLxo8S/3jAekfCetal8Ha6UVejeDDqj2klHtyF2RyoqPg4+hsQmt7b</source>
  </file>
  <file path="customs/src/UploadIterator.php" generated-path="customs.src.UploadIterator.html" hash="0f5ab4db3acba375232cba1bf72176c6" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Customs" line="11" package="Haldayne">
      <extends/>
      <implements>\ArrayAccess</implements>
      <implements>\SeekableIterator</implements>
      <implements>\Countable</implements>
      <name>UploadIterator</name>
      <full_name>\Haldayne\Customs\UploadIterator</full_name>
      <docblock line="11">
        <description>Implements an iterator over the $_FILES super-global or an array of
similar structure.</description>
        <long-description>Abstracts differences in `$_FILES` format, throws exceptions when abnormal
situations arise, and provides objects to work with the uploaded file.</long-description>
        <tag name="package" line="11" description="Haldayne"/>
      </docblock>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="192" package="Haldayne">
        <name>$input</name>
        <full_name>\Haldayne\Customs\UploadIterator::input</full_name>
        <default></default>
        <docblock line="192">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="192" description="&lt;p&gt;The $_FILES or similar array provided in ctor&lt;/p&gt;" type="array" variable="$input">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="194" package="Haldayne">
        <name>$files</name>
        <full_name>\Haldayne\Customs\UploadIterator::files</full_name>
        <default></default>
        <docblock line="194">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="194" description="&lt;p&gt;The internal array holding processed upload entities&lt;/p&gt;" type="array" variable="$files">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Customs" line="196" package="Haldayne">
        <name>$index</name>
        <full_name>\Haldayne\Customs\UploadIterator::index</full_name>
        <default></default>
        <docblock line="196">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="196" description="&lt;p&gt;The pointer to the current index in the internal array&lt;/p&gt;" type="integer" variable="$index">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="26" package="Haldayne">
        <name>__construct</name>
        <full_name>\Haldayne\Customs\UploadIterator::__construct()</full_name>
        <docblock line="26">
          <description>Create a new UploadIterator.</description>
          <long-description>With no arguments, creates an iterator over the $_FILES super-global.
You may instead pass your own array having the same format as $_FILES.
If any of the files indicate a security concern or a server problem
that prevented their storage, then the constructor throws an exception.</long-description>
          <tag name="param" line="26" description="&lt;p&gt;An alternate $_FILES-like array to iterate over.&lt;/p&gt;" type="array" variable="$input">
            <type>array</type>
          </tag>
          <tag name="throws" line="26" description="" type="\Haldayne\Customs\UploadException">
            <type>\Haldayne\Customs\UploadException</type>
          </tag>
          <tag name="api" line="26" description=""/>
          <tag name="since" line="26" description="1.0.0"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$input</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="104" package="Haldayne">
        <name>current</name>
        <full_name>\Haldayne\Customs\UploadIterator::current()</full_name>
        <docblock line="104">
          <description>Returns the current upload entity within the iterator.</description>
          <long-description></long-description>
          <tag name="return" line="104" description="" type="\Haldayne\Customs\UploadFile|\Haldayne\Customs\UploadError">
            <type>\Haldayne\Customs\UploadFile</type>
            <type>\Haldayne\Customs\UploadError</type>
          </tag>
          <tag name="api" line="104" description=""/>
          <tag name="since" line="104" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="116" package="Haldayne">
        <name>key</name>
        <full_name>\Haldayne\Customs\UploadIterator::key()</full_name>
        <docblock line="116">
          <description>Returns the key of the current upload entity within the iterator.</description>
          <long-description></long-description>
          <tag name="return" line="116" description="" type="integer">
            <type>integer</type>
          </tag>
          <tag name="api" line="116" description=""/>
          <tag name="since" line="116" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="128" package="Haldayne">
        <name>next</name>
        <full_name>\Haldayne\Customs\UploadIterator::next()</full_name>
        <docblock line="128">
          <description>Advance the iterator to the next upload entity.</description>
          <long-description></long-description>
          <tag name="return" line="128" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="api" line="128" description=""/>
          <tag name="since" line="128" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="140" package="Haldayne">
        <name>rewind</name>
        <full_name>\Haldayne\Customs\UploadIterator::rewind()</full_name>
        <docblock line="140">
          <description>Rewind to the first element of the iterator.</description>
          <long-description></long-description>
          <tag name="return" line="140" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="api" line="140" description=""/>
          <tag name="since" line="140" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="152" package="Haldayne">
        <name>valid</name>
        <full_name>\Haldayne\Customs\UploadIterator::valid()</full_name>
        <docblock line="152">
          <description>Check if the current position within the iterator is valid.</description>
          <long-description></long-description>
          <tag name="return" line="152" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="152" description=""/>
          <tag name="since" line="152" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="166" package="Haldayne">
        <name>seek</name>
        <full_name>\Haldayne\Customs\UploadIterator::seek()</full_name>
        <docblock line="166">
          <description>Arbitrarily move the current position within the iterator.</description>
          <long-description></long-description>
          <tag name="param" line="166" description="&lt;p&gt;The position to access.&lt;/p&gt;" type="integer" variable="$position">
            <type>integer</type>
          </tag>
          <tag name="return" line="166" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="throws" line="166" description="" type="\OutOfBoundsException">
            <type>\OutOfBoundsException</type>
          </tag>
          <tag name="api" line="166" description=""/>
          <tag name="since" line="166" description="1.0.0"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$position</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Customs" line="184" package="Haldayne">
        <name>count</name>
        <full_name>\Haldayne\Customs\UploadIterator::count()</full_name>
        <docblock line="184">
          <description>Return a count of upload entities within the iterator.</description>
          <long-description></long-description>
          <tag name="return" line="184" description="" type="integer">
            <type>integer</type>
          </tag>
          <tag name="api" line="184" description=""/>
          <tag name="since" line="184" description="1.0.0"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Customs" line="203" package="Haldayne">
        <name>import</name>
        <full_name>\Haldayne\Customs\UploadIterator::import()</full_name>
        <docblock line="203">
          <description>Import a structure purporting to be a valid $_FILES format into a flat
array of UploadFile or UploadError. Resolve all recursive structure and
reconstitue the HTML form name.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Customs" line="226" package="Haldayne">
        <name>names</name>
        <full_name>\Haldayne\Customs\UploadIterator::names()</full_name>
        <docblock line="226">
          <description>Using the "name" key in the input as a model, figure out all the
HTML names given in the original input.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Customs" line="262" package="Haldayne">
        <name>reducer</name>
        <full_name>\Haldayne\Customs\UploadIterator::reducer()</full_name>
        <docblock line="262">
          <description>Helper to `names`, which recursively traverses the iterator appending
new keys onto the base-so-far.</description>
          <long-description></long-description>
          <tag name="param" line="262" description="" type="\RecursiveArrayIterator" variable="$it">
            <type>\RecursiveArrayIterator</type>
          </tag>
          <tag name="param" line="262" description="" type="string" variable="$base">
            <type>string</type>
          </tag>
          <tag name="param" line="262" description="" type="array" variable="$names">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$it</name>
          <default></default>
          <type>\RecursiveArrayIterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$base</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$names</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Customs" line="282" package="Haldayne">
        <name>gather</name>
        <full_name>\Haldayne\Customs\UploadIterator::gather()</full_name>
        <docblock line="282">
          <description>Given an HTML name, gather all its information into a standard
info structure.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Customs" line="313" package="Haldayne">
        <name>wrap</name>
        <full_name>\Haldayne\Customs\UploadIterator::wrap()</full_name>
        <docblock line="313">
          <description>Wrap the file upload information in an appropriate object class, raising
an exception if one would be warranted by the error.</description>
          <long-description></long-description>
          <tag name="param" line="313" description="&lt;p&gt;The HTML form element name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="313" description="&lt;p&gt;The file upload information&lt;/p&gt;" type="array" variable="$info">
            <type>array</type>
          </tag>
          <tag name="return" line="313" description="" type="\Haldayne\Customs\UploadFile|\Haldayne\Customs\UploadError">
            <type>\Haldayne\Customs\UploadFile</type>
            <type>\Haldayne\Customs\UploadError</type>
          </tag>
          <tag name="throws" line="313" description="" type="\Haldayne\Customs\UploadException">
            <type>\Haldayne\Customs\UploadException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$info</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>eJzVWltzG7cVftevQDxKSDmUrL5KVRJGlmNObFFD0XVbSUOBuyCJaLnYAXZJs6n+e885AJZ7pRQr7Uw5k5hcAOf6nRtWf/0xWSR7MV8Kk/BAsPc8CvkmFrfnmUnV0pzu7b15/XqPvWaDZRKJpYhTw3jMZCo0T5VmaiU0SxeC7U/eDT5cXDOTJUIfziM15RGDDbCZa803TM2QjJFLGXHNTKqzIM20OIKnuNCfwiMeAPlQzmZCizgQhsmY3TvK92ym9JKnPWCn1dow8SUQSSpVbNh6IYDNNMYNkWWTZtyucS2N6IEcIUu0WskQyKrpbwJZpYqtlX5ga5kuSIssiRQPRchmMiLR3uwFETeGfaKFgVdbbq1x20f1+gGIa3rs9lqIBz6NhN8Kj85VFqf4bO/3PQYfsih+XrNzLXgqGGexWFd4HLk9futnlDFWoM88I849FtDpP+AQT5P9Q2VsCU6RsUkFB8ugjhuVwfm1d9iCr2Q8J1oGAOLMz7jxpHNqgxmIgB6mzWg69FwoA6ubEUGmZbphgQKn6phgAU81igo+AcssPal0ASwSLVagIbgB6EkEi9J8LtDz4GfkAZQsgpT2cAAj5Iio2u6nhGu+dHrtyzjJUtYHPSOwWoxCOo0OI/kg3DbAhjWqIJvmyv7k+FlvXXiW+TJPZP7dSFCY/eXo+OjYPXtD/ybZNJIBm2VxgGfZZJIr1C0JecbiLIoO6JAFD37204U0hz/4LV3cw87OzvypH3Pnn7hHB6e1w8tE6bTrFh73LDLftCF7r4rcQj6QxgigxIKFCB4guKyLZAuO7+/v/dd9SRoC9Kt557YcC6f+hJyxrmUHZ2+O7w4O2O/s6OgIFKiRrzhfxinbV7MZHGZjkM99BTeT3Fv/agF5KWZTpaL8GRxGpEQ7vWgpXnyRJjVdx6rqOkecnDx5EJuJKG3vefdQEFWc02j8KSTNB9BjDv9xchWq9F9zgDX76Z9ubcvuHWj9bxdYWitdjbnbYZYOZz9DPg1NHnnss88KjkmoIP/EKmVk26OvceIviLBmDyIEnZMaHX5Q2FvweNGvN27v3TYqH5mIjKgcJa3JPY2Kd18NrcL7jYq/KgT9YwuQrqFImpmEY2i/YsAzstYMmoIem0JO2biKgeSzJMS0CEfyuKxgbeuxD2oug3qW/AO+uN76AsJjxaNMVH1SMFSZX7dzzuOyyLmsndbw+n+wyqfYtGP0T7FHuRZU+5qa0UaEc2syqPfQwKWunWLwFcs/dllyd3F4Zjr4mhrrZOq2ZORyfPoCG4ovd20oKSoMmdy3Py/WHUDwIkVBlieUJL3a1OqHK46MiqL6khKLLxXF2pRYKRm+SAtkVVPj+++fo8FIrGHdyzyT2kBGtED2TnrKBy8WX5MMNQWK4kPlPW5T4RyLJJaaIqISBWMNEm8AEzRhDFKjDNs0KrUzX6MRUW8DVr2fKSj6zKamr6cSRkAtow1bQsv9bN1bun1qQfJz2ITkPwAatleq9SElx+/qOl5kSwPJtJvL9mSHQd1IvrvaYFQwlW98aXPhKgXKigbL6bb3FeWKsR17mzMnzIABbsGYLOYUrLv/w3RJMrTh2i7ugO8bdjUa/K0/vmD9q0GuKPtpxXV53BwXRnIIV38PYve4i4kQ7ztopvWyarmi8ZRonDaSt+M2kvfdg5/fVRTiAA/EEepAvWrlKhciVeFCUWSxZUOIuPjk6sPTbvAeK8tR14VydxUUAxpI8WLAXw2BqzQ+o1sIxaZ4l0BZKDeku5IAhhDQbBbxHAr+zqnQSaDZC83EEcDQqAjyDIfpWeMdhZHwa8uex3kqgGUc0GWa2bT0fvzxA3FneHd2VAaYUzRHmB+1KxDDcHHViBACGVwsk3TTs8+sOfzDUnKgJ93iLUBbUrDgOGM3hVGjIWccl1ct+ItRXhSaJk0wWW4Huj5kM62WW222Fc+unnmW9BOvHYok1zyCHLNQkKRovcfmHEhpf/+ktJxLRJS1FN7lrTVPErvO05JNrTGhT8bbLLroY3SHJ0y+DTwneLCANGulwzst/LbLijd3WyWQuT2b1zYrsH148IzJ65Pxyr3CI6+ohcwDiLQEuaAQhiLqQRMzR0SqLDe9p1PwwBzgG3saZZM9gVDnlGqz4l2H6GlDQKoSFomViJ6AAahnjoFW3imYMoDLHMQXCFRtYw3psqVYTiHtQECT44DroeUKlBrcarmhW+HbcdWt28gjo5v8krrHkiiL58JmFJmWTtm7pwltLMl+Q0zubjooaeeuFoukf37TcjvyqYbmSj9P7aR4WqPnq+IEoiDadGvrjmevcSH3e/eAZRBzeJnWs6bqse+s2/FiDew0AJmhclz9PGqkRGys4FqEWYARUKDlSNXFx89j7WkRBPgB/gqjak03+EV/MRNwKp+YCUQHkBKqWJQONzY9JC8JZcMZxSxL91iI3Nr4RCfb+tf3IkpsZbynffc9tl5IgGNeW6CxhQZ3JbRxVwt59w5eFDFWa08MkYIgZip2pXbKjTg06nDG2xreFmQhDio7ocZh9tlHmpUl11WQBruThnf4DrY9y2ILqkqGAftEFn6HP7j5opaCTTadIBFwlwEZ4nTW7Xxrbr41d52cPBGgubeCNWqlcXHBzTkwC6FbqfMgPjUUQ04X6fZQbytKhcmzkObPtqGN9iNTO/g+XUB+oWwPmSuvAL5qUm6WeDEf2waJmhDbI5kUQobrvLHBLaWXcU3A8nBBJtX2m/CyGyil0lhvglL1IGL5L0D4pjCw32AgYaFxRaYh3WP0IipSDSR8Oe7cdIovO6h44OfsO1bLsHmCLb4d2SQ7D+B66YBB0XccwPUyh2UyIbHaOLj10iGBLesOLrTeqdRp6FmhecaW1ZoYnNhjoRAJC+XKddUP+BNbJd/Z25vBsBqj3zDXdVqja4DEsutMjzYHy991DurhW3IA/rASV9vRktXhR+OukqnxRzOtkn3dj8adJaPSj+q2eg0I1DLhQdq1yAGtCRDwL/kZf3v3wXfrlXxkxP9Xw/gztJL5a1M/oZUDl9qTBMY4iCx6HVloantMc2kKhaP4GhTTH5RFtlZZFOL8tMZopRerLtZIwGdEPc1+26HH36aVEkLlHSvklXG7WtU08rz3P83vXFvSTrFJL0jVkIFEbDLXbEYKGgv/bppkX2MfDtkRkuom//uA0jj2DbQkE78ywUNd4lQM5VpgbK9frt3r8XP7dnx7A+Nkb1s/Obkcjiefrj4M+28v3h40ghaUcwa2b81hWgfkOABhOQr961qEcX7MrGVKfbRVwyWXogoBVmTLe3IxGk2Gv540jJCFP2t4R2ZxI5Mlay2T/ywYqxynrUwHl4PJ9eCfFyetO94NRx+f2HLVH40H/Q/tGy6HdNvwhH6E14qCzm75b1sKil1uA6/xx6vJ28GoXZ7z/uV48nk0GO9Q6uLv44vL68Hw8qQVdIjwK/vHFzXI7QcwdhblDMWMZ1HaTu1rIfzp8tfL4efLyfnw7UVD0/O49x+Se6jo</source>
  </file>
  <file path="fox/src/ExceptionToError.php" generated-path="fox.src.ExceptionToError.html" hash="9c1d18b65e3e6eee0cfa35307838af0f" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <namespace-alias name="Map">\Haldayne\Boost\Map</namespace-alias>
    <namespace-alias name="MapOfCollections">\Haldayne\Boost\MapOfCollections</namespace-alias>
    <class final="false" abstract="false" namespace="Haldayne\Fox" line="33" package="Haldayne">
      <extends/>
      <name>ExceptionToError</name>
      <full_name>\Haldayne\Fox\ExceptionToError</full_name>
      <docblock line="33">
        <description>Runs a callable, catching any exception and reflecting it into a triggered
error.</description>
        <long-description>This allows you to combine exception generating code with retry code to
trace the execution over the retry cycle. Example:

```
$retry = new \Haldayne\Fox\Retry(
     $capture = new \Haldayne\Fox\CaptureErrors(
         new \Haldayne\Fox\ExceptionToError(
             function () { throw new \Exception('Oops!', rand(1,10)); }
         )
     )
);
$result = $retry();
if (false === $result) {
    die(
        $capture-&gt;
        getCapturedErrors()-&gt;
        pluck('message')-&gt;
        into(new MapOfStrings)-&gt;
        join(PHP_EOL)
    );
}</long-description>
        <tag name="package" line="33" description="Haldayne"/>
      </docblock>
      <property static="false" visibility="private" namespace="Haldayne\Fox" line="121" package="Haldayne">
        <name>$code</name>
        <full_name>\Haldayne\Fox\ExceptionToError::code</full_name>
        <default>null</default>
        <docblock line="121">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Fox" line="122" package="Haldayne">
        <name>$errorMessageFormat</name>
        <full_name>\Haldayne\Fox\ExceptionToError::errorMessageFormat</full_name>
        <default>'%1$s (%2$d) thrown at %3$s:%4$d as %5$s exception.'</default>
        <docblock line="122">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Fox" line="123" package="Haldayne">
        <name>$errorCode</name>
        <full_name>\Haldayne\Fox\ExceptionToError::errorCode</full_name>
        <default>E_USER_ERROR</default>
        <docblock line="123">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Fox" line="41" package="Haldayne">
        <name>__construct</name>
        <full_name>\Haldayne\Fox\ExceptionToError::__construct()</full_name>
        <docblock line="41">
          <description>Create a new callable object that captures any exception when the given
callable is invoked.</description>
          <long-description></long-description>
          <tag name="param" line="41" description="" type="callable" variable="$code">
            <type>callable</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Fox" line="58" package="Haldayne">
        <name>setErrorMessageFormat</name>
        <full_name>\Haldayne\Fox\ExceptionToError::setErrorMessageFormat()</full_name>
        <docblock line="58">
          <description>Change the format of the generated error messages. Accepts a printf-
style format string, where the following parameters are replaced:
- %1$s The exception message
- %2$d The exception code
- %3$s The file where the exception occurred
- %4$d The line where the exception occurred
- %5$s The class of the raised exception</description>
          <long-description>The default format is:
%1$s (%2$d) thrown at %3$s:%4$d as %5$s exception.</long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$format</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Fox" line="66" package="Haldayne">
        <name>getErrorMessageFormat</name>
        <full_name>\Haldayne\Fox\ExceptionToError::getErrorMessageFormat()</full_name>
        <docblock line="66">
          <description>Gets the current error message format.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Fox" line="75" package="Haldayne">
        <name>setErrorCode</name>
        <full_name>\Haldayne\Fox\ExceptionToError::setErrorCode()</full_name>
        <docblock line="75">
          <description>Change the code used to deliver the exceptions. By default, exceptions
converted to E_USER_ERROR errors.</description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Fox" line="83" package="Haldayne">
        <name>getErrorCode</name>
        <full_name>\Haldayne\Fox\ExceptionToError::getErrorCode()</full_name>
        <docblock line="83">
          <description>Gets the current error code.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Fox" line="91" package="Haldayne">
        <name>formatException</name>
        <full_name>\Haldayne\Fox\ExceptionToError::formatException()</full_name>
        <docblock line="91">
          <description>Pass the given exception into the error message format string.</description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$ex</name>
          <default></default>
          <type>\Exception</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Fox" line="108" package="Haldayne">
        <name>__invoke</name>
        <full_name>\Haldayne\Fox\ExceptionToError::__invoke()</full_name>
        <docblock line="108">
          <description>Invoke the helper. Passes any arguments into the callable given during
helper construction. Returns any result from the callable, unless the
callable raises an exception: in which case, returns false.</description>
          <long-description></long-description>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="58" code="PPC:ERR-50015">Argument $format is missing from the Docblock of setErrorMessageFormat</error>
      <error line="75" code="PPC:ERR-50015">Argument $code is missing from the Docblock of setErrorCode</error>
      <error line="91" code="PPC:ERR-50015">Argument $ex is missing from the Docblock of formatException</error>
      <error line="121" code="PPC:ERR-50007">No summary for property $code</error>
      <error line="122" code="PPC:ERR-50007">No summary for property $errorMessageFormat</error>
      <error line="123" code="PPC:ERR-50007">No summary for property $errorCode</error>
    </parse_markers>
    <source>eJyVVttu4zYQffdXsIALy4HjNL28xE3abOB0A+wigTftUwCFkUaydmlSIKk4xiL/3hmSkiXFdlO+2OLMHM7lzJC//1Euy4HkKzAlT4B95CLlGwkP1+plNhhUprX1QSljHz7zcrZn/za7UkJAYgslDVqfHB0N2BFbVNIwzhIuBH8SMMF/NlkWMmdcbhi8JFCSBX6lTEPmAFBYWFZIq9DS6iLPQUNKaKC10lP8Rx/3ywKhhVBrwzaqYqieqNVTIaGFm4MEzR1molJg68Iu8SCrN/7bKoKymuK3S7KEpHKW6hm02wram0TAlM1f+KoUcBZ8eHx8pJ+h1zlnEtbsoZ3HhwVJIlJya5jw0lYadupeedmcojRbG1pvled1jPfKGXT1aWWVdOVg0Zh9x1C0WnucxjQa3arS/DCaMI0FiE4npz+NxzP22oEaN1/u33gWIjaVsBiGjz3y20XGoowLZMj5+XmthKfXEGkBHT/rdBxftHdzsCEVacjFuKtQiir5Fo2QuIbnMOpJiTkRBepo+QUZJHPT0/mqChndfbyL57efmgB9DBT9ySAR3BjWT/IAI8HlyE3riF1p4BaQqHRgTXOmnr4ikzHn3LIQoukxfr0E6fiVF88ga7gGAbldyGf1DdJpkNUqf5Zc89VWc0hEDsIT91tWT6JItvWP4wSb0uoqsVHXbOz0fVCuHhab6vjCtca5V5k54evgTeBLLnPfNJnSKwxUZT4e33KQ+nZloUpmyi4TCp7mQYk1sdlxjWXsRjQwxhVsQgnSNT51OfWwCx0saATR1JqlwM5Nz2qgY/bj6dDgaGjPgOBAS+fnYdrTaeWQFH4JIFmBfm0d2eqrJKm0m0qNza8BVNAEeqfNb+Ecz7aQQM0LQ9mrDXv1J/0UMk7tF1JWmCYDLv6IIhz7lsfZal1AZ85DbvypDfr0IHUMWEf8zz6H1+68aOjP3cMeeGNAXPIm+9j0FyAvKHiXImm73AlxHnY13+lq30ecVpWW+119B91dd1RUIrxyUhBFfVM0OUWuf9jURZq09ps2VxKNrIeYx39/mS/i+WJxu/Bxm/cV5QodiQ71MdRa/9XMe9JPJu9LunPlHbm+OuDEHfVAMxFbjeOeAi7BO0gR5sVhN73q9t7bXoFsCC97/DZ+SkXN/kGOT7pq8HJ8gckJKtF4t9inbbfsGmfPPtknnDF9GW7Hbo5ETUi0xvvSfeOuF5fXJYgS9NRVIFxUXOfVCplgttlvrg5fn7SivNdoHoI1Fw1NFrZwifSA4cGQabXqoE1YJQX4yr+5Bd0oJPstG87QIRyvRbJENYPmOhzi3h2HaRDH/k6NTo7YdDqlIA3q9utPb7nvndwGRpBfMXa+jgky5lrzTdS6MyfuqJgqQdARPqYGDc6rf/uyPvl6R4UHb+wYVoP3+Ut2kzeNFUrdc9rlZSt57dDhhN0tbv65vJ+zy7sbv4esf6YnzTC8AmQlxKwr2TnhR///6hntwg3zqj0VZ4PXwb/wRcM0</source>
  </file>
  <file path="fox/src/CaptureErrors.php" generated-path="fox.src.CaptureErrors.html" hash="9da6fac8d3c2e0387fe971190e6153af" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <namespace-alias name="Map">\Haldayne\Boost\Map</namespace-alias>
    <namespace-alias name="MapOfCollections">\Haldayne\Boost\MapOfCollections</namespace-alias>
    <class final="false" abstract="false" namespace="Haldayne\Fox" line="30" package="Haldayne">
      <extends/>
      <name>CaptureErrors</name>
      <full_name>\Haldayne\Fox\CaptureErrors</full_name>
      <docblock line="30">
        <description>Runs a callable, capturing all error messages, then provides a method to
extract any errors raised during execution.</description>
        <long-description>```
use Haldayne\Fox\CaptureErrors;
$helper = new CaptureErrors(function ($src, $dst) { return copy($src, $dst); });
if (false === $helper('foo', 'bar')) {
    throw new \RuntimeException($helper-&gt;getCapturedErrors()-&gt;pop()-&gt;get('message'));
}
```

PHP itself, as well as many libraries, rely upon triggered errors to notify
developers of problems. Many frameworks provide methods to capure these
errors globally and convert them to exceptions, but you do not always have
access to those frameworks.  Worse, you may be using code that deliberately
silences errors.

Errors raised inside the CaptureErrors helper is pushed into a Map stack,
with each element also a Map of the error details: error code, error
string, file and line where raised, and an array context of variables
set at time of error.</long-description>
        <tag name="package" line="30" description="Haldayne"/>
      </docblock>
      <property static="false" visibility="private" namespace="Haldayne\Fox" line="94" package="Haldayne">
        <name>$code</name>
        <full_name>\Haldayne\Fox\CaptureErrors::code</full_name>
        <default>null</default>
        <docblock line="94">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Fox" line="95" package="Haldayne">
        <name>$capturedErrorTypes</name>
        <full_name>\Haldayne\Fox\CaptureErrors::capturedErrorTypes</full_name>
        <default>null</default>
        <docblock line="95">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Fox" line="96" package="Haldayne">
        <name>$map</name>
        <full_name>\Haldayne\Fox\CaptureErrors::map</full_name>
        <default>null</default>
        <docblock line="96">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Fox" line="39" package="Haldayne">
        <name>__construct</name>
        <full_name>\Haldayne\Fox\CaptureErrors::__construct()</full_name>
        <docblock line="39">
          <description>Create a new callable object that captures errors when the given code
is invoked. By default, all errors (E_ALL) are captured. You can set
which errors will be captured using the `setCapturedErrorTypes` method.</description>
          <long-description></long-description>
          <tag name="param" line="39" description="" type="callable" variable="$code">
            <type>callable</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Fox" line="54" package="Haldayne">
        <name>setCapturedErrorTypes</name>
        <full_name>\Haldayne\Fox\CaptureErrors::setCapturedErrorTypes()</full_name>
        <docblock line="54">
          <description>Set the error types to capture. Acts as a filter: only those errors
matching this value will be captured.</description>
          <long-description></long-description>
          <tag name="param" line="54" description="&lt;p&gt;One or more of the E_* error constants&lt;/p&gt;" type="integer" variable="$capturedErrorTypes">
            <type>integer</type>
          </tag>
          <tag name="return" line="54" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="throws" line="54" description="If $capturedErrorTypes isn't an int" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$capturedErrorTypes</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Fox" line="67" package="Haldayne">
        <name>__invoke</name>
        <full_name>\Haldayne\Fox\CaptureErrors::__invoke()</full_name>
        <docblock line="67">
          <description>Invoke the helper. Passes any arguments into the callable given during
helper construction. Returns any result from the callable.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Fox" line="87" package="Haldayne">
        <name>getCapturedErrors</name>
        <full_name>\Haldayne\Fox\CaptureErrors::getCapturedErrors()</full_name>
        <docblock line="87">
          <description>Get the captured errors.</description>
          <long-description></long-description>
          <tag name="return" line="87" description="" type="\Haldayne\Boost\MapOfCollections">
            <type>\Haldayne\Boost\MapOfCollections</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="94" code="PPC:ERR-50007">No summary for property $code</error>
      <error line="95" code="PPC:ERR-50007">No summary for property $capturedErrorTypes</error>
      <error line="96" code="PPC:ERR-50007">No summary for property $map</error>
    </parse_markers>
    <source>eJyNVttu4zYQffdXzIMBy4HivG+adLOB2w2wiw22ixYFDDi0NLbYyKRAUnaMIv/eM5Tkezb1Q6SIwzNnzlzIX36tiqpn1JJ9pTKmz6rM1cbw5Df7ct3r1X7v0ydrfZh8VdX1G9+/ze9tWXIWtDUeu68uLnp0Qd9r40lRpspSzUpO8VaF2mmzIHwids46AgGvFuxTCgUbqpxd6Zxl35JDYXMKVrD4JTiVBVJm02z05JT2nFPeIPILZ7UQGMFcdjw9PcnjgDGCm9xHEjyOINdi0i+4rNjRDRle08F6Mq9NDIuSvndZSv3chyH9S45hZCiz1WZ/5ZpehxFTzymZqxLOb25uOg/JYG7tIKXBTLnBEDBiKb9QOLuO3icQLeglj18yrsRx0u69vF1waLnlLbnh5W1lK3lgLRm0UgI5UnjdqSBvj58fSQfP5Twl5WnNSAGeS1G01DOnnJYsOC43VFeIODi9WDC8dYIHS8YGPd8IXM4rLi2IebJzSRsyvPQj+ip4c4fCWlv37LuEttmMICgDBCH59hxz28AvSjtDXWyQ4xzCmhW7IEZL2cOdHqA4qwNtbE155INaWquNp0KtIprKMugge+AQ+u+4jIj+giMUouxeqg3NGPUh1ZPZXAipgLggBjsVoIPAeV2yAWLLsquu8UENauN1BODD8qG2sjR0qH0RLUFMQaWKfFDZcypgax0KYpXhD0RkIzH5zgzqCm7TLTkHpUv/of1XaKfNe+QapBVSmoNzVLHUhmldIIkt0zR+VoaUc4gfKgd0lvhYIf/SpT4CMShAfBSirEUHEvlVLysVxD0Isocyxi82vfwu6N4x9AN/qeiu/cnO/sGIaFRuJsFWVeFoYpgLvWIT4+rAoJ02K/vM+Yg+baDAXNVlSHcjxFMynt59+TJEUNwhw/hvJDlDqAimw1oXWkRufWogzHY72lIQFk/+qNd+bCr2T20Rj1q4DvVjpVBju0D7e/Sv4rOqZ6XOaDtMplMoj2zVWUgOtw2jfaOo/Pqh0P7yNtbnTWNyfbJ4whSmUZIT0yUKqhlzx2M7GTbGr73jbP7BYa8CQ8Rvuli8juguC14miZK6C+w+kDXo4qb7Gq07qKUKWdGIjLSuVFnzSRreUBeNg/BPI/2GCpdjxDruWmU8vdj2B1RWJmwJfGzn9srqfPstTl9PkwcDRjq/c4tamnA7gulhfta19mYgJ5Jw+2m6z1ZTcgbyOPtyimg/Bf5Z6+Ge6Xv1cGb/rjpeMXiQrEO0vUPpLWWSwTldlrUPklHQZhwgg+Geozdq7CF2eMxeMzJH9IhBI/cAHCeq9eub8SlW265pBkZzCejQ2qm77TG5FdD3mPkGEJMHMwRHg10eoI3e6dpmECVXFzQajYSWh+1x0pDtaSy/aYFhW+LYP5B170bRjO9+e27jTQY3HjK2U2n2OJ2Ps3zYzrgC4GRJTizk1/Z5ktklLnm4IYhDuX90NwW8ikt5ik95tk5xiTiB3MtjzGL6/4qvd2Z/v83ATZR+ikuam4ow03guJXtTL42CTXHBmYreyXAPBSABfX+k9oFB7PbW21sD7vd2wG0Pgu1RH9ePZ8fknQvwT2vozCXuqHw6ztsMH9K+osfvD3/e/RjT3eND861yeiXnbb89JUxdltdHK+dGwhm79nyIC6+9/wDO2NXk</source>
  </file>
  <file path="boost/src/functions/bytes.php" generated-path="boost.src.functions.bytes.html" hash="3a3ffcfbeb9a18dcb3f7b12947b00517" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <function namespace="Haldayne\Boost" line="22" package="Haldayne">
      <name>bytes</name>
      <full_name>\Haldayne\Boost\bytes()</full_name>
      <docblock line="22">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="22" description="Haldayne"/>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$string</name>
        <default></default>
        <type/>
      </argument>
    </function>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="22" code="PPC:ERR-50015">Argument $string is missing from the Docblock of bytes</error>
      <error line="22" code="PPC:ERR-50011">No summary for function \Haldayne\Boost\bytes()</error>
    </parse_markers>
    <source>eJyVkk9LxDAQxe/5FHMQu13WFjyJKyie9riIR2E7bafbQDstyVQtst/dpH92VxHFQE557/deJrm7b8tWMdZkW8wINljl2DO9PDaNlbVS8XKpYAmJZoG0F7ILK0bzPkzgCp5IOsMgJQF3dUoGmmJUgWZAGKWRA3jGdrOFvMm6mlisM6EMzsSpKuIEio4z0Q2DGbD2J67nnKPhudQuzGlNRyvouCI7GpM6HTUJ0LsQW08ucSA0r2SMznPiU7o0U+632KxEg5mQsf4e4PeQeWyL1Rv29rfS541XTrhHk/ueQ5UCkHuYy87VyM5Te7BEUIq0t3Hs3ipikrhG7rCKieO5RTReI/Kv+adpDot8WNVgPtlipQtYXMOlK6x3e5JFcJT6oN2sD8IQPhS4dZzC+Dcups8xnfo1DbVOd2PFWbOC4CbVEoTrQXpQB6DK0n+5X6EnmPoEQLX02w==</source>
  </file>
  <file path="boost/src/functions/ini_size_to_bytes.php" generated-path="boost.src.functions.ini_size_to_bytes.html" hash="539c1ec1633e433c12d1b02ee093a2c4" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <function namespace="Haldayne\Boost" line="23" package="Haldayne">
      <name>ini_size_to_bytes</name>
      <full_name>\Haldayne\Boost\ini_size_to_bytes()</full_name>
      <docblock line="23">
        <description>`int ini_size_to_bytes(string)` - Convert a short-hand bytes specification
into integer bytes.</description>
        <long-description>Some PHP ini values (like `upload_max_filesize`) allow you to specify the
number of bytes in a short-hand, like "10M" or "1G". But, when you call
`ini_get` you'll get these actual short-hand values, instead of the byte
equivalent (which usually you want).

This function converts a super-set of documented short-hand into bytes:
  * An optional leading +
  * Number specification in hex, octal, or decimal
  * Kilo-, Mega-, Giga-, and Tera-bytes expressed using single or double
    characters in either lower or upper case: "k", "kB", "G", "Pb", etc.</long-description>
        <tag name="package" line="23" description="Haldayne"/>
        <tag name="param" line="23" description="&lt;p&gt;A value from an &lt;code&gt;ini_get&lt;/code&gt; call to process&lt;/p&gt;" type="string" variable="$string">
          <type>string</type>
        </tag>
        <tag name="return" line="23" description="Number of bytes the short-hand string represents" type="integer">
          <type>integer</type>
        </tag>
        <tag name="see" line="23" description="Documents the short-hand" link="http://php.net/manual/en/faq.using.php#faq.using.shorthandbytes"/>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$string</name>
        <default></default>
        <type>string</type>
      </argument>
    </function>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>eJyNVG2P2kYQ/u5fMaKVDBeDj/RyXKCozbXSRapSndR8jARrM+DVrXedfQmQKP+9M2vDAYnSInltdmeeZ+aZmf31t6ZqEi1qdI0oEd4KtRJ7jR/ujXF+liT51VUCV7CU2oPUcuHkZ1x4syj2Hl3feSv1ZrCEIfxh9Ce0HgS4ylg/rIReQbQC12Ap17IUXhrNaARmeMEN2tZmRNt88o+pER7fPjIXfBIqkHtfySeEZWiUEatFLXaLtVTIgSwHIJQyW9ibAATZEu3BV8hgOtQFEZh1F4fUZ9FlEIF74+t3PTCWPh56I7gPPoNthTqCloTf5S8XG/RL3k2VAvpmGocgSh+EOs26jTsjPudRrDgAMo1BMBZ+DJJMkBTtbytZVhAcIah9ZNwK7QcHOd5X0sE66JKVg7KV2HEWoUE7dBQEga9MGWqCw9VpFFHkmPiUoYCeNxpMw1AUr6LIqHbw4nD4d6vWWbFYsgp3GZjSC5WxSis6roU6eP0llRlm8A43gl4PMr6Y/j1aMWx1x11j0TkKLzim5EVhBDOhUNhiAZSVsKQm2lgqlCSaBSov19BCaChlKojDKfSeehkt97w+8PJY0Iq+PAj3e0NQNbT9CT937zdtaWBtTU1BnlSV68wd1FhTUqgRwqIPliXwB22OncTlPJG6g7fIeVIhWn+HCJX3zTTPachGGn1eC02VzlHna/FxFNUY0dlPz/8iKoO2RH92pb2kJII8OTbGt4PZZTxIviSsbJ4DKllLLTxSG9WNwp30+ylsDE9QK3K0PEg156S8iQdHNLoPOrQtUu106kk4SyNQmECTr/fHrkpfpFwz3vJWSBX3ijSDlTUN51JfsCn6qA9EGfsT27mJvTAp0pOAutmAgvoj7sk19K9hPo+JNMadOF7v0sEAWmUiRXdRzLnW1CHPpuPbLoqvpB/N+o9A/y/m3Tnkf7sc7I+51kF52dB9wcnS9aJBCeefxyfaua30dLX0XSgI5pl+OD6Lk+cJUp9Oj/RXcxhfv379ajy+fTmZTG5nUFgUT7MLl82ly+SXyc347uXNjG2+61JfutzcvWL89vddl6dLlw7/G5dOnW5mO5dZ8jX5F2EoJi0=</source>
  </file>
  <file path="boost/src/MapOfNumerics.php" generated-path="boost.src.MapOfNumerics.html" hash="966a5b6feb2c9542dcff5a04f6cec633" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Boost" line="8" package="Haldayne">
      <extends>\Haldayne\Boost\GuardedMapAbstract</extends>
      <name>MapOfNumerics</name>
      <full_name>\Haldayne\Boost\MapOfNumerics</full_name>
      <docblock line="8">
        <description>Implements a map of numbers, that is a Map whose values must all pass the
`is_numeric` test.</description>
        <long-description>Methods accepting a `$collection` may receive any of these types:
  - array
  - object
  - \Traversable
  - \Haldayne\Boost\Map
  - \Haldayne\Boost\Contract\Arrayable
  - \Haldayne\Boost\Contract\Jsonable

Methods accept a `$key` may be of any type: boolean, integer, float,
string, array, object, closure, or resource.

Methods accepting an `$expression` may receive a [PHP callable][1] or a
string. When given a string, the library wraps an anonymous function around
the string code body and returns the result. By way of example, these
are equivalent and both acceptable as an `$expression`:
  - `$_0 &lt; $_1`
  - `function ($_0, $_1) { return $_0 &lt; $_1; }

Expressions lets you write extremely compact code for filtering, at the
one-time run-time cost of converting the string to the body of an anonymous
function.

Expressions, whether given as a callable or a string, receive two formal
arguments: the current value and the current key.  Note that, inside string
expressions, these are represented by `$_0` and `$_1` respectively.</long-description>
        <tag name="package" line="8" description="Haldayne"/>
        <tag name="inherited_from" description="\Haldayne\Boost\GuardedMapAbstract" refers="\Haldayne\Boost\GuardedMapAbstract" link="/classes/Haldayne.Boost.GuardedMapAbstract.html"/>
      </docblock>
      <constant namespace="Haldayne\Boost" line="46" package="Haldayne">
        <name>LOOSE</name>
        <full_name>\Haldayne\Boost\Map::LOOSE</full_name>
        <value>true</value>
        <docblock line="46">
          <description>Should the comparison be made loosely?</description>
          <long-description></long-description>
          <tag name="see" line="46" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="46" description="" link="\Haldayne\Boost\Map::intersect"/>
          <tag name="api" line="46" description=""/>
        </docblock>
      </constant>
      <constant namespace="Haldayne\Boost" line="54" package="Haldayne">
        <name>STRICT</name>
        <full_name>\Haldayne\Boost\Map::STRICT</full_name>
        <value>false</value>
        <docblock line="54">
          <description>Should the comparison be made strictly?</description>
          <long-description></long-description>
          <tag name="see" line="54" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="54" description="" link="\Haldayne\Boost\Map::intersect"/>
          <tag name="api" line="54" description=""/>
        </docblock>
      </constant>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="961" package="Haldayne">
        <name>$array</name>
        <full_name>\Haldayne\Boost\Map::array</full_name>
        <default>array()</default>
        <docblock line="961">
          <description>The internal array representation of the map.</description>
          <long-description></long-description>
          <tag name="var" line="961" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="967" package="Haldayne">
        <name>$map_key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::map_key_to_hash</full_name>
        <default>array()</default>
        <docblock line="967">
          <description>Track hashes we've created for non-string keys.</description>
          <long-description></long-description>
          <tag name="var" line="967" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="20" package="Haldayne">
        <name>translate</name>
        <full_name>\Haldayne\Boost\MapOfNumerics::translate()</full_name>
        <docblock line="20">
          <description>Translate this map by the quantities given in the other collection.</description>
          <long-description>This is like addition or subtraction.</long-description>
          <tag name="param" line="20" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Arrayable|\Haldayne\Boost\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Arrayable</type>
            <type>\Haldayne\Boost\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="return" line="20" description="" type="\Haldayne\Boost\MapOfNumerics">
            <type>\Haldayne\Boost\MapOfNumerics</type>
          </tag>
          <tag name="api" line="20" description=""/>
          <tag name="see" line="20" description="" link="https://en.wikipedia.org/wiki/Translation_(geometry)"/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Arrayable|\Haldayne\Boost\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="39" package="Haldayne">
        <name>scale</name>
        <full_name>\Haldayne\Boost\MapOfNumerics::scale()</full_name>
        <docblock line="39">
          <description>Scale this map by the factors given in the other collection.</description>
          <long-description>This is like multiplication or division.</long-description>
          <tag name="param" line="39" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Arrayable|\Haldayne\Boost\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Arrayable</type>
            <type>\Haldayne\Boost\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="return" line="39" description="" type="\Haldayne\Boost\MapOfNumerics">
            <type>\Haldayne\Boost\MapOfNumerics</type>
          </tag>
          <tag name="api" line="39" description=""/>
          <tag name="see" line="39" description="" link="https://en.wikipedia.org/wiki/Scaling_(geometry)"/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Arrayable|\Haldayne\Boost\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="54" package="Haldayne">
        <name>sum</name>
        <full_name>\Haldayne\Boost\MapOfNumerics::sum()</full_name>
        <docblock line="54">
          <description>Return the sum of all elements in the map.</description>
          <long-description></long-description>
          <tag name="return" line="54" description="" type="\Haldayne\Boost\numeric">
            <type>\Haldayne\Boost\numeric</type>
          </tag>
          <tag name="api" line="54" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="68" package="Haldayne">
        <name>product</name>
        <full_name>\Haldayne\Boost\MapOfNumerics::product()</full_name>
        <docblock line="68">
          <description>Return the product of all elements in the map.</description>
          <long-description></long-description>
          <tag name="return" line="68" description="" type="\Haldayne\Boost\numeric">
            <type>\Haldayne\Boost\numeric</type>
          </tag>
          <tag name="api" line="68" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="82" package="Haldayne">
        <name>mean</name>
        <full_name>\Haldayne\Boost\MapOfNumerics::mean()</full_name>
        <docblock line="82">
          <description>Return the arithmetic mean ("average") of all elements in the map.</description>
          <long-description></long-description>
          <tag name="return" line="82" description="" type="\Haldayne\Boost\numeric">
            <type>\Haldayne\Boost\numeric</type>
          </tag>
          <tag name="api" line="82" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="95" package="Haldayne">
        <name>min</name>
        <full_name>\Haldayne\Boost\MapOfNumerics::min()</full_name>
        <docblock line="95">
          <description>Return the minimum value from the elements in the map. If there are no
elements, throws a \RangeException.</description>
          <long-description></long-description>
          <tag name="return" line="95" description="" type="\Haldayne\Boost\numeric">
            <type>\Haldayne\Boost\numeric</type>
          </tag>
          <tag name="throws" line="95" description="" type="\RangeException">
            <type>\RangeException</type>
          </tag>
          <tag name="api" line="95" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="112" package="Haldayne">
        <name>max</name>
        <full_name>\Haldayne\Boost\MapOfNumerics::max()</full_name>
        <docblock line="112">
          <description>Return the maximum value from the elements in the map. If there are no
elements, throws a \RangeException.</description>
          <long-description></long-description>
          <tag name="return" line="112" description="" type="\Haldayne\Boost\numeric">
            <type>\Haldayne\Boost\numeric</type>
          </tag>
          <tag name="throws" line="112" description="" type="\RangeException">
            <type>\RangeException</type>
          </tag>
          <tag name="api" line="112" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="126" package="Haldayne">
        <name>allowed</name>
        <full_name>\Haldayne\Boost\MapOfNumerics::allowed()</full_name>
        <docblock line="126">
          <description>Decides if the given element should be allowed into the map.</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\Haldayne\Boost\GuardedMapAbstract::allowed()" refers="\Haldayne\Boost\GuardedMapAbstract::allowed()" link="/classes/Haldayne.Boost.GuardedMapAbstract.html#method_allowed"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="Haldayne\Boost" line="16" package="Haldayne">
        <name>allowed</name>
        <full_name>\Haldayne\Boost\GuardedMapAbstract::allowed()</full_name>
        <docblock line="16">
          <description>Decides if the given element should be allowed into the map.</description>
          <long-description></long-description>
          <tag name="param" line="16" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="16" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\GuardedMapAbstract</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="741" package="Haldayne">
        <name>offsetSet</name>
        <full_name>\Haldayne\Boost\Map::offsetSet()</full_name>
        <docblock line="741">
          <description>Set the value at a given key.</description>
          <long-description>If key is null, the value is appended to the array using numeric
indexes, just like native PHP. Unlike native-PHP, $key can be of any
type: boolean, int, float, string, array, object, closure, resource.</long-description>
          <tag name="param" line="741" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="741" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="741" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="49" package="Haldayne">
        <name>normalize</name>
        <full_name>\Haldayne\Boost\GuardedMapAbstract::normalize()</full_name>
        <docblock line="49">
          <description>Normalize the value before storing.</description>
          <long-description>This default implementation does nothing.</long-description>
          <tag name="param" line="49" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="49" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\GuardedMapAbstract</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="67" package="Haldayne">
        <name>__construct</name>
        <full_name>\Haldayne\Boost\Map::__construct()</full_name>
        <docblock line="67">
          <description>Create a new map.</description>
          <long-description>Initialize the map with the given collection, which can be any type
that is "collection-like": array, object, Traversable, another Map,
etc.</long-description>
          <tag name="param" line="67" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="throws" line="67" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="api" line="67" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default>null</default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="96" package="Haldayne">
        <name>all</name>
        <full_name>\Haldayne\Boost\Map::all()</full_name>
        <docblock line="96">
          <description>Create a new map containing all members from this map whose elements
satisfy the expression.</description>
          <long-description>The expression decides whether an element is in or out. If the
expression returns boolean false, the element is out.  Otherwise, it's
in.

```
$nums = new Map(range(0, 9));
$even = $nums-&gt;all(function ($val, $key) { return 0 == $val % 2; });
$odds = $nums-&gt;all('$_0 &amp; 1');
```</long-description>
          <tag name="param" line="96" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="96" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="96" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="117" package="Haldayne">
        <name>filter</name>
        <full_name>\Haldayne\Boost\Map::filter()</full_name>
        <docblock line="117">
          <description>Apply the filter to every element, creating a new map with only those
elements from the original map that do not fail this filter.</description>
          <long-description>The filter expressions receives two arguments:
  - The current value
  - The current key

If the filter returns exactly boolean false, the element is not copied
into the new map.  Otherwise, it is.  Keys from the original map carry
into the new map.</long-description>
          <tag name="param" line="117" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="117" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="117" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="148" package="Haldayne">
        <name>first</name>
        <full_name>\Haldayne\Boost\Map::first()</full_name>
        <docblock line="148">
          <description>Return a new map containing the first N elements passing the
expression.</description>
          <long-description>Like `find`, but stop after finding N elements from the front. Defaults
to N = 1.

```
$nums = new Map(range(0, 9));
$odd3 = $nums-&gt;first('1 == ($_0 % 2)', 3); // first three odds
```</long-description>
          <tag name="param" line="148" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="148" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="148" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="148" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="172" package="Haldayne">
        <name>last</name>
        <full_name>\Haldayne\Boost\Map::last()</full_name>
        <docblock line="172">
          <description>Return a new map containing the last N elements passing the expression.</description>
          <long-description>Like `first`, but stop after finding N elements from the *end*.
Defaults to N = 1.

```
$nums = new Map(range(0, 9));
$odds = $nums-&gt;last('1 == ($_0 % 2)', 2); // last two odd numbers
```</long-description>
          <tag name="param" line="172" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="172" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="172" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="172" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="187" package="Haldayne">
        <name>every</name>
        <full_name>\Haldayne\Boost\Map::every()</full_name>
        <docblock line="187">
          <description>Test if every element passes the expression.</description>
          <long-description></long-description>
          <tag name="param" line="187" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="187" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="187" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="199" package="Haldayne">
        <name>some</name>
        <full_name>\Haldayne\Boost\Map::some()</full_name>
        <docblock line="199">
          <description>Test if at least one element passes the expression.</description>
          <long-description></long-description>
          <tag name="param" line="199" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="199" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="199" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="211" package="Haldayne">
        <name>none</name>
        <full_name>\Haldayne\Boost\Map::none()</full_name>
        <docblock line="211">
          <description>Test that no elements pass the expression.</description>
          <long-description></long-description>
          <tag name="param" line="211" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="211" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="211" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="225" package="Haldayne">
        <name>has</name>
        <full_name>\Haldayne\Boost\Map::has()</full_name>
        <docblock line="225">
          <description>Determine if a key exists the map.</description>
          <long-description>This is the object method equivalent of the magic isset($map[$key]);</long-description>
          <tag name="param" line="225" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="225" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="225" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="242" package="Haldayne">
        <name>get</name>
        <full_name>\Haldayne\Boost\Map::get()</full_name>
        <docblock line="242">
          <description>Get the value corresponding to the given key.</description>
          <long-description>If the key does not exist in the map, return the default.

This is the object method equivalent of the magic $map[$key].</long-description>
          <tag name="param" line="242" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="242" description="" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="242" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="242" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="260" package="Haldayne">
        <name>set</name>
        <full_name>\Haldayne\Boost\Map::set()</full_name>
        <docblock line="260">
          <description>Set a key and its corresponding value into the map.</description>
          <long-description>This is the object method equivalent of the magic $map[$key] = 'foo'.</long-description>
          <tag name="param" line="260" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="260" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="260" description="" type="\Haldayne\Boost\MapOfNumerics">
            <type>\Haldayne\Boost\MapOfNumerics</type>
          </tag>
          <tag name="api" line="260" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="275" package="Haldayne">
        <name>forget</name>
        <full_name>\Haldayne\Boost\Map::forget()</full_name>
        <docblock line="275">
          <description>Remove a key and its corresponding value from the map.</description>
          <long-description>This is the object method equivalent of the magic unset($map[$key]);</long-description>
          <tag name="param" line="275" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="275" description="" type="\Haldayne\Boost\MapOfNumerics">
            <type>\Haldayne\Boost\MapOfNumerics</type>
          </tag>
          <tag name="api" line="275" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="287" package="Haldayne">
        <name>isEmpty</name>
        <full_name>\Haldayne\Boost\Map::isEmpty()</full_name>
        <docblock line="287">
          <description>Determine if any key and their values have been set into the map.</description>
          <long-description></long-description>
          <tag name="return" line="287" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="287" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="305" package="Haldayne">
        <name>diff</name>
        <full_name>\Haldayne\Boost\Map::diff()</full_name>
        <docblock line="305">
          <description>Return a new map containing those keys and values that are not present
in the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose values match will
be removed.  Otherwise, comparison is strict, and elements whose keys
and values match will be removed.</long-description>
          <tag name="param" line="305" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="305" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="305" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="305" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="326" package="Haldayne">
        <name>intersect</name>
        <full_name>\Haldayne\Boost\Map::intersect()</full_name>
        <docblock line="326">
          <description>Return a new map containing those keys and values that are present in
the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose value match will
be included.  Otherise, comparison is strict, and elements whose keys &amp;
values match will be included.</long-description>
          <tag name="param" line="326" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="326" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="326" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="326" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="357" package="Haldayne">
        <name>partition</name>
        <full_name>\Haldayne\Boost\Map::partition()</full_name>
        <docblock line="357">
          <description>Groups elements of this map based on the result of an expression.</description>
          <long-description>Calls the expression for each element in this map. The expression
receives the value and key, respectively.  The expression may return
any value: this value is the grouping key and the element is put into
that group.

```
$nums = new Map(range(0, 9));
$part = $nums-&gt;partition(function ($value, $key) {
   return 0 == $value % 2 ? 'even' : 'odd';
});
var_dump(
    $part['odd']-&gt;count(), // 5
    array_sum($part['even']-&gt;toArray()) // 20
);
```</long-description>
          <tag name="param" line="357" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="357" description="" type="\Haldayne\Boost\MapOfCollections">
            <type>\Haldayne\Boost\MapOfCollections</type>
          </tag>
          <tag name="api" line="357" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="398" package="Haldayne">
        <name>map</name>
        <full_name>\Haldayne\Boost\Map::map()</full_name>
        <docblock line="398">
          <description>Walk the map, applying the expression to every element, transforming
them into a new map.</description>
          <long-description>```
$nums = new Map(range(0, 9));
$doubled = $nums-&gt;map('$_0 * 2');
```

The expression receives two arguments:
  - The current value in `$_0`
  - The current key in `$_1`

The keys in the resulting map will be the same as the keys in the
original map: only the values have (potentially) changed.

Recommended to use this method when you are mapping from one type to
the same type: int to int, string to string, etc. If you are changing
types, use the more powerful `transform` method.</long-description>
          <tag name="param" line="398" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="398" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="api" line="398" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="440" package="Haldayne">
        <name>reduce</name>
        <full_name>\Haldayne\Boost\Map::reduce()</full_name>
        <docblock line="440">
          <description>Walk the map, applying a reducing expression to every element, so as to
reduce the map to a single value.</description>
          <long-description>The `$reducer` expression receives three arguments:
  - The current reduction (`$_0`)
  - The current value (`$_1`)
  - The current key (`$_2`)

The initial value, if given or null if not, is passed as the current
reduction on the first invocation of `$reducer`. The return value from
`$reducer` then becomes the new, current reduced value.

```
$nums = new Map(range(0, 3));
$sum = $nums-&gt;reduce('$_0 + $_1');
// $sum == 6
```

If `$finisher` is a callable or string expression, then it will be
called last, after iterating over all elements. It will be passed
reduced value. The `$finisher` must return the new final value.</long-description>
          <tag name="param" line="440" description="" type="callable|string" variable="$reducer">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="440" description="" type="mixed" variable="$initial">
            <type>mixed</type>
          </tag>
          <tag name="param" line="440" description="" type="callable|string|null" variable="$finisher">
            <type>callable</type>
            <type>string</type>
            <type>null</type>
          </tag>
          <tag name="return" line="440" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="440" description=""/>
          <tag name="see" line="440" description="" link="http://php.net/manual/en/function.array-reduce.php"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$reducer</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$initial</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finisher</name>
          <default>null</default>
          <type>callable|string|null</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="467" package="Haldayne">
        <name>rekey</name>
        <full_name>\Haldayne\Boost\Map::rekey()</full_name>
        <docblock line="467">
          <description>Change the key for every element in the map using an expression to
calculate the new key.</description>
          <long-description>```
$keyed_by_bytecode = new Map(count_chars('war of the worlds', 1));
$keyed_by_letter   = $keyed_by_bytecode-&gt;rekey('chr($_1)');
```</long-description>
          <tag name="param" line="467" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="467" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="467" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="497" package="Haldayne">
        <name>merge</name>
        <full_name>\Haldayne\Boost\Map::merge()</full_name>
        <docblock line="497">
          <description>Merge the given collection into this map.</description>
          <long-description>The merger callable decides how to merge the current map's value with
the given collection's value.  The merger callable receives two
arguments:
  - This map's value at the given key
  - The collection's value at the given key

If the current map does not have a value for a key in the collection,
then the default value is assumed.</long-description>
          <tag name="param" line="497" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="497" description="" type="callable" variable="$merger">
            <type>callable</type>
          </tag>
          <tag name="param" line="497" description="" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="497" description="" type="\Haldayne\Boost\MapOfNumerics">
            <type>\Haldayne\Boost\MapOfNumerics</type>
          </tag>
          <tag name="api" line="497" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$merger</name>
          <default></default>
          <type>callable</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="577" package="Haldayne">
        <name>transform</name>
        <full_name>\Haldayne\Boost\Map::transform()</full_name>
        <docblock line="577">
          <description>Flexibly and thoroughly change this map into another map.</description>
          <long-description>```
// transform a word list into a map of word to frequency in the list
use Haldayne\Boost\Map;
$words   = new Map([ 'bear', 'bee', 'goose', 'bee' ]);
$lengths = $words-&gt;transform(
    function (Map $new, $word) {
        if ($new-&gt;has($word)) {
            $new-&gt;set($word, $new-&gt;get($word)+1);
        } else {
            $new-&gt;set($word, 1);
        }
    }
);
```

Sometimes you need to create one map from another using a strategy
that isn't one-to-one. You may need to change keys. You may need to
add multiple elements. You may need to delete elements. You may need
to change from a map to a number.

Whatever the case, the other simpler methods in Map don't quite fit the
problem. What you need, and what this method provides, is a complete
machine to transform this map into something else:

```
// convert a word list into a count of unique letters in those words
use Haldayne\Boost\Map;
$words   = new Map([ 'bear', 'bee', 'goose', 'bee' ]);
$letters = $words-&gt;transform(
    function ($frequencies, $word) {
        foreach (count_chars($word, 1) as $byte =&gt; $frequency) {
            $letter = chr($byte);
            if ($frequencies-&gt;has($letter)) {
                $new-&gt;set($letter, $frequencies-&gt;get($letter)+1);
            } else {
                $new-&gt;set($letter, 1);
            }
        }
    },
    function (Map $original) { return new MapOfIntegers(); },
    function (MapOfIntegers $new) { return $new-&gt;sum(); }
);
```

This method accepts three callables
1. `$creator`, which is called first with the current map, performs any
initialization needed.  The result of this callable will be passed to
all the other callables.  If no creator is given, then use a default
one that returns an empty Map.

2. `$transformer`, which is called for every element in this map and
receives the initialized value, the current value, and the current key
in that order. The transformer should modify the initialized value
appropriately. Often this means adding to a new map zero or more
tranformed values.

3. `$finisher`, which is called last, receives the initialized value
that was modified by the transformer calls. The finisher may transform
that value once more as needed. If no finisher given, then no finishing
step is made.</long-description>
          <tag name="param" line="577" description="" type="callable" variable="$tranformer">
            <type>callable</type>
          </tag>
          <tag name="param" line="577" description="" type="callable|null" variable="$creator">
            <type>callable</type>
            <type>null</type>
          </tag>
          <tag name="param" line="577" description="" type="callable|null" variable="$finisher">
            <type>callable</type>
            <type>null</type>
          </tag>
          <tag name="return" line="577" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="577" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$transformer</name>
          <default></default>
          <type>callable</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$creator</name>
          <default>null</default>
          <type>callable|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finisher</name>
          <default>null</default>
          <type>callable|null</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="613" package="Haldayne">
        <name>into</name>
        <full_name>\Haldayne\Boost\Map::into()</full_name>
        <docblock line="613">
          <description>Put all of this map's elements into the target and return the target.</description>
          <long-description>```
$words = new MapOfStrings([ 'foo', 'bar' ]);
$words-&gt;map('strlen($_0)')-&gt;into(new MapOfInts)-&gt;sum(); // 6
```

Use when you've mapped your elements into a different type, and you
want to fluently perform operations on the new type. In the example,
the sum of the words' lengths was calculated.</long-description>
          <tag name="return" line="613" description="" type="\Haldayne\Boost\$target">
            <type>\Haldayne\Boost\$target</type>
          </tag>
          <tag name="api" line="613" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$target</name>
          <default></default>
          <type>\Haldayne\Boost\Map</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="627" package="Haldayne">
        <name>push</name>
        <full_name>\Haldayne\Boost\Map::push()</full_name>
        <docblock line="627">
          <description>Treat the map as a stack and push an element onto its end.</description>
          <long-description></long-description>
          <tag name="return" line="627" description="" type="\Haldayne\Boost\MapOfNumerics">
            <type>\Haldayne\Boost\MapOfNumerics</type>
          </tag>
          <tag name="api" line="627" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$element</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="639" package="Haldayne">
        <name>pop</name>
        <full_name>\Haldayne\Boost\Map::pop()</full_name>
        <docblock line="639">
          <description>Treat the map as a stack and pop an element off its end.</description>
          <long-description></long-description>
          <tag name="return" line="639" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="639" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="662" package="Haldayne">
        <name>count</name>
        <full_name>\Haldayne\Boost\Map::count()</full_name>
        <docblock line="662">
          <description>Count the number of items in the map.</description>
          <long-description></long-description>
          <tag name="return" line="662" description="" type="integer">
            <type>integer</type>
          </tag>
          <tag name="api" line="662" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="676" package="Haldayne">
        <name>toArray</name>
        <full_name>\Haldayne\Boost\Map::toArray()</full_name>
        <docblock line="676">
          <description>Copy this map into an array, recursing as necessary to convert
contained collections into arrays.</description>
          <long-description></long-description>
          <tag name="api" line="676" description=""/>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Arrayable::toArray()" refers="\Haldayne\Boost\Contract\Arrayable::toArray()" link="/classes/Haldayne.Boost.Contract.Arrayable.html#method_toArray"/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="698" package="Haldayne">
        <name>toJson</name>
        <full_name>\Haldayne\Boost\Map::toJson()</full_name>
        <docblock line="698">
          <description>Return a JSON representation of the object.</description>
          <long-description></long-description>
          <tag name="api" line="698" description=""/>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Jsonable::toJson()" refers="\Haldayne\Boost\Contract\Jsonable::toJson()" link="/classes/Haldayne.Boost.Contract.Jsonable.html#method_toJson"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>0</default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="712" package="Haldayne">
        <name>offsetExists</name>
        <full_name>\Haldayne\Boost\Map::offsetExists()</full_name>
        <docblock line="712">
          <description>Determine if a value exists at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="712" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="712" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="724" package="Haldayne">
        <name>offsetGet</name>
        <full_name>\Haldayne\Boost\Map::offsetGet()</full_name>
        <docblock line="724">
          <description>Get a value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="724" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="724" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="768" package="Haldayne">
        <name>offsetUnset</name>
        <full_name>\Haldayne\Boost\Map::offsetUnset()</full_name>
        <docblock line="768">
          <description>Unset the value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="768" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="768" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="782" package="Haldayne">
        <name>getIterator</name>
        <full_name>\Haldayne\Boost\Map::getIterator()</full_name>
        <docblock line="782">
          <description>Get an iterator for a copy of the map.</description>
          <long-description></long-description>
          <tag name="return" line="782" description="" type="\ArrayIterator">
            <type>\ArrayIterator</type>
          </tag>
          <tag name="api" line="782" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="802" package="Haldayne">
        <name>passes</name>
        <full_name>\Haldayne\Boost\Map::passes()</full_name>
        <docblock line="802">
          <description>Decide if the given result is considered "passing" or "failing".</description>
          <long-description>This method provides a definitive reference for what this and all
derived classes consider passing:
  - if the result is strictly false, the result "failed"
  - otherwise, the result "succeeded"</long-description>
          <tag name="param" line="802" description="" type="mixed" variable="$result">
            <type>mixed</type>
          </tag>
          <tag name="return" line="802" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$result</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="813" package="Haldayne">
        <name>is_collection_like</name>
        <full_name>\Haldayne\Boost\Map::is_collection_like()</full_name>
        <docblock line="813">
          <description>Decide if the given value is considered collection-like.</description>
          <long-description></long-description>
          <tag name="param" line="813" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="813" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="843" package="Haldayne">
        <name>collection_to_array</name>
        <full_name>\Haldayne\Boost\Map::collection_to_array()</full_name>
        <docblock line="843">
          <description>Give me a native PHP array, regardless of what kind of collection-like
structure is given.</description>
          <long-description></long-description>
          <tag name="param" line="843" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Traversable|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|object|array" variable="$items">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="return" line="843" description="" type="array|boolean">
            <type>array</type>
            <type>boolean</type>
          </tag>
          <tag name="throws" line="843" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="880" package="Haldayne">
        <name>grep</name>
        <full_name>\Haldayne\Boost\Map::grep()</full_name>
        <docblock line="880">
          <description>Finds elements for which the given code passes, optionally limited to a
maximum count.</description>
          <long-description>If limit is null, no limit on number of matches. If limit is positive,
return that many from the front of the array. If limit is negative,
return that many from the end of the array.</long-description>
          <tag name="param" line="880" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="880" description="" type="integer|null" variable="$limit">
            <type>integer</type>
            <type>null</type>
          </tag>
          <tag name="return" line="880" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$limit</name>
          <default>null</default>
          <type>integer|null</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="925" package="Haldayne">
        <name>walk</name>
        <full_name>\Haldayne\Boost\Map::walk()</full_name>
        <docblock line="925">
          <description>Execute the given code over each element of the map. The code receives
the value by reference and then the key as formal parameters.</description>
          <long-description>The items are walked in the order they exist in the map. If the code
returns boolean false, then the iteration halts. Values can be modified
from within the callback, but not keys.

Example:
```
$map-&gt;each(function (&amp;$value, $key) { $value++; return true; })-&gt;sum();
```</long-description>
          <tag name="param" line="925" description="" type="callable" variable="$code">
            <type>callable</type>
          </tag>
          <tag name="return" line="925" description="" type="\Haldayne\Boost\MapOfNumerics">
            <type>\Haldayne\Boost\MapOfNumerics</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="942" package="Haldayne">
        <name>walk_backward</name>
        <full_name>\Haldayne\Boost\Map::walk_backward()</full_name>
        <docblock line="942">
          <description>Like `walk`, except walk from the end toward the front.</description>
          <long-description></long-description>
          <tag name="param" line="942" description="" type="callable" variable="$code">
            <type>callable</type>
          </tag>
          <tag name="return" line="942" description="" type="\Haldayne\Boost\MapOfNumerics">
            <type>\Haldayne\Boost\MapOfNumerics</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="977" package="Haldayne">
        <name>key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::key_to_hash()</full_name>
        <docblock line="977">
          <description>Lookup the hash for the given key. If a hash does not yet exist, one is
created.</description>
          <long-description></long-description>
          <tag name="param" line="977" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="977" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="throws" line="977" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="1015" package="Haldayne">
        <name>hash_to_key</name>
        <full_name>\Haldayne\Boost\Map::hash_to_key()</full_name>
        <docblock line="1015">
          <description>Lookup the key for the given hash.</description>
          <long-description></long-description>
          <tag name="param" line="1015" description="" type="string" variable="$hash">
            <type>string</type>
          </tag>
          <tag name="return" line="1015" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$hash</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="1035" package="Haldayne">
        <name>call</name>
        <full_name>\Haldayne\Boost\Map::call()</full_name>
        <docblock line="1035">
          <description>Call the expression with the arguments.</description>
          <long-description></long-description>
          <tag name="param" line="1035" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="throws" line="1035" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="126" code="PPC:ERR-50015">Argument $value is missing from the Docblock of allowed</error>
    </parse_markers>
    <source>eJzdlm1P2zAQx9/nU5ymSqSFNeztijbYQBuTNhDjJRJckkvrkdiZ7dBW0O++c9qk6dPokMbEIkQd3/nu/Pv7IQfv80HuSczI5BgRfMY0xrGkqw9KGdvzvKDT8aADp1meUkbSGkDIMAeVgCyykLTZAztAC8JZvrJlOFCG4A7TggxkhbGAaQo5GsOO5ILdCHPNg0mL6AYsGdvl3sCLUufDIc6Sb1OrARpZkrGBTwXqmGI2HoXGaoysd+8BP2V97unApUZpUrTEebgaV2U4djnhZ4HSCiu4oL64IwlClv2K/2mIVJpSZIWS3TqUC8B/qbglwDgWzgpKgynCMnvDuRpzmKPGzNX/cKQ1jjFM6eGLUbJscHF3DKtsq/AH53tA5wWtefo6kiZbaAktN4+6E3OxnNEQwcDa3LwNApLdobgVOcUCu0r3A/cWVEw4+rXfJ5WR1eP2LEBQ/uZFmIoIkkKWRYCtMPqN0qZDpsjd06zw9TsWq09+bXRPY+zegqHO47dwD1phG+7raAi73NODyeKQ/fqt3SubE29Z++8Rpqu6J6yU0k8SPStSK3IGg5X0sbgT5qXo7ngI2d9Wc+Pw/Qu9O+v0fvO43hfTCE5PU2TuNHKHDFVn1ExqXgoras1yz86fNZQ3ECoy//dQNMVFtESlMXkOwNOfnplNBq783crwlKXfQJFrxTXYZ8Axy/T3kHQ2Ivmz1YFa2AHvAC4+I+Ssr9x+xD69aj8DJpfyEUblwoKgeo1UIRnrFjPLhBQZkypvWki0ysrudbOB08S1tcNBIFUVrfJ1V7hWQ3eDX12g7NPJKKJ87SW3AcRs/NLo7TmJVUwiAX8fDpbAtBseDZgJpoZ6tWXCU+OPkEXXskaQNFwu099x3y0DNIxmzg9lPIWWqBJaBXyn3cizhUw4+n9kwtELkGkKfLNMAZxfnF2efLw8OYaj89MV8e4PheSAwh6raLLIQyvLdxzFcyR8gKghxX6r1HfDVp9/71Z+1f6eeL8AjAlLMQ==</source>
  </file>
  <file path="boost/src/GuardedMapAbstract.php" generated-path="boost.src.GuardedMapAbstract.html" hash="94510353b3c8a6ff10ce245983993f3e" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="true" namespace="Haldayne\Boost" line="8" package="Haldayne">
      <extends>\Haldayne\Boost\Map</extends>
      <name>GuardedMapAbstract</name>
      <full_name>\Haldayne\Boost\GuardedMapAbstract</full_name>
      <docblock line="8">
        <description>Restricts what can be set into a Map, optionally normalizing those values
that can be set.</description>
        <long-description>Methods accepting a `$collection` may receive any of these types:
  - array
  - object
  - \Traversable
  - \Haldayne\Boost\Map
  - \Haldayne\Boost\Contract\Arrayable
  - \Haldayne\Boost\Contract\Jsonable

Methods accept a `$key` may be of any type: boolean, integer, float,
string, array, object, closure, or resource.

Methods accepting an `$expression` may receive a [PHP callable][1] or a
string. When given a string, the library wraps an anonymous function around
the string code body and returns the result. By way of example, these
are equivalent and both acceptable as an `$expression`:
  - `$_0 &lt; $_1`
  - `function ($_0, $_1) { return $_0 &lt; $_1; }

Expressions lets you write extremely compact code for filtering, at the
one-time run-time cost of converting the string to the body of an anonymous
function.

Expressions, whether given as a callable or a string, receive two formal
arguments: the current value and the current key.  Note that, inside string
expressions, these are represented by `$_0` and `$_1` respectively.</long-description>
        <tag name="package" line="8" description="Haldayne"/>
        <tag name="inherited_from" description="\Haldayne\Boost\Map" refers="\Haldayne\Boost\Map" link="/classes/Haldayne.Boost.Map.html"/>
      </docblock>
      <constant namespace="Haldayne\Boost" line="46" package="Haldayne">
        <name>LOOSE</name>
        <full_name>\Haldayne\Boost\Map::LOOSE</full_name>
        <value>true</value>
        <docblock line="46">
          <description>Should the comparison be made loosely?</description>
          <long-description></long-description>
          <tag name="see" line="46" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="46" description="" link="\Haldayne\Boost\Map::intersect"/>
          <tag name="api" line="46" description=""/>
        </docblock>
      </constant>
      <constant namespace="Haldayne\Boost" line="54" package="Haldayne">
        <name>STRICT</name>
        <full_name>\Haldayne\Boost\Map::STRICT</full_name>
        <value>false</value>
        <docblock line="54">
          <description>Should the comparison be made strictly?</description>
          <long-description></long-description>
          <tag name="see" line="54" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="54" description="" link="\Haldayne\Boost\Map::intersect"/>
          <tag name="api" line="54" description=""/>
        </docblock>
      </constant>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="961" package="Haldayne">
        <name>$array</name>
        <full_name>\Haldayne\Boost\Map::array</full_name>
        <default>array()</default>
        <docblock line="961">
          <description>The internal array representation of the map.</description>
          <long-description></long-description>
          <tag name="var" line="961" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="967" package="Haldayne">
        <name>$map_key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::map_key_to_hash</full_name>
        <default>array()</default>
        <docblock line="967">
          <description>Track hashes we've created for non-string keys.</description>
          <long-description></long-description>
          <tag name="var" line="967" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="Haldayne\Boost" line="16" package="Haldayne">
        <name>allowed</name>
        <full_name>\Haldayne\Boost\GuardedMapAbstract::allowed()</full_name>
        <docblock line="16">
          <description>Decides if the given element should be allowed into the map.</description>
          <long-description></long-description>
          <tag name="param" line="16" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="16" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="25" package="Haldayne">
        <name>offsetSet</name>
        <full_name>\Haldayne\Boost\GuardedMapAbstract::offsetSet()</full_name>
        <docblock line="25">
          <description>Set the value at a given key, provided that the value passes the
defined guard.</description>
          <long-description>If key is null, the value is appended to the array using numeric
indexes, just like native PHP. Unlike native-PHP, $key can be of any
type: boolean, int, float, string, array, object, closure, resource.</long-description>
          <tag name="throws" line="25" description="" type="\UnexpectedValueException">
            <type>\UnexpectedValueException</type>
          </tag>
          <tag name="inherited_from" description="\Haldayne\Boost\Map::offsetSet()" refers="\Haldayne\Boost\Map::offsetSet()" link="/classes/Haldayne.Boost.Map.html#method_offsetSet"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="49" package="Haldayne">
        <name>normalize</name>
        <full_name>\Haldayne\Boost\GuardedMapAbstract::normalize()</full_name>
        <docblock line="49">
          <description>Normalize the value before storing.</description>
          <long-description>This default implementation does nothing.</long-description>
          <tag name="param" line="49" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="49" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="67" package="Haldayne">
        <name>__construct</name>
        <full_name>\Haldayne\Boost\Map::__construct()</full_name>
        <docblock line="67">
          <description>Create a new map.</description>
          <long-description>Initialize the map with the given collection, which can be any type
that is "collection-like": array, object, Traversable, another Map,
etc.</long-description>
          <tag name="param" line="67" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="throws" line="67" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="api" line="67" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default>null</default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="96" package="Haldayne">
        <name>all</name>
        <full_name>\Haldayne\Boost\Map::all()</full_name>
        <docblock line="96">
          <description>Create a new map containing all members from this map whose elements
satisfy the expression.</description>
          <long-description>The expression decides whether an element is in or out. If the
expression returns boolean false, the element is out.  Otherwise, it's
in.

```
$nums = new Map(range(0, 9));
$even = $nums-&gt;all(function ($val, $key) { return 0 == $val % 2; });
$odds = $nums-&gt;all('$_0 &amp; 1');
```</long-description>
          <tag name="param" line="96" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="96" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="96" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="117" package="Haldayne">
        <name>filter</name>
        <full_name>\Haldayne\Boost\Map::filter()</full_name>
        <docblock line="117">
          <description>Apply the filter to every element, creating a new map with only those
elements from the original map that do not fail this filter.</description>
          <long-description>The filter expressions receives two arguments:
  - The current value
  - The current key

If the filter returns exactly boolean false, the element is not copied
into the new map.  Otherwise, it is.  Keys from the original map carry
into the new map.</long-description>
          <tag name="param" line="117" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="117" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="117" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="148" package="Haldayne">
        <name>first</name>
        <full_name>\Haldayne\Boost\Map::first()</full_name>
        <docblock line="148">
          <description>Return a new map containing the first N elements passing the
expression.</description>
          <long-description>Like `find`, but stop after finding N elements from the front. Defaults
to N = 1.

```
$nums = new Map(range(0, 9));
$odd3 = $nums-&gt;first('1 == ($_0 % 2)', 3); // first three odds
```</long-description>
          <tag name="param" line="148" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="148" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="148" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="148" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="172" package="Haldayne">
        <name>last</name>
        <full_name>\Haldayne\Boost\Map::last()</full_name>
        <docblock line="172">
          <description>Return a new map containing the last N elements passing the expression.</description>
          <long-description>Like `first`, but stop after finding N elements from the *end*.
Defaults to N = 1.

```
$nums = new Map(range(0, 9));
$odds = $nums-&gt;last('1 == ($_0 % 2)', 2); // last two odd numbers
```</long-description>
          <tag name="param" line="172" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="172" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="172" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="172" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="187" package="Haldayne">
        <name>every</name>
        <full_name>\Haldayne\Boost\Map::every()</full_name>
        <docblock line="187">
          <description>Test if every element passes the expression.</description>
          <long-description></long-description>
          <tag name="param" line="187" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="187" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="187" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="199" package="Haldayne">
        <name>some</name>
        <full_name>\Haldayne\Boost\Map::some()</full_name>
        <docblock line="199">
          <description>Test if at least one element passes the expression.</description>
          <long-description></long-description>
          <tag name="param" line="199" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="199" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="199" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="211" package="Haldayne">
        <name>none</name>
        <full_name>\Haldayne\Boost\Map::none()</full_name>
        <docblock line="211">
          <description>Test that no elements pass the expression.</description>
          <long-description></long-description>
          <tag name="param" line="211" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="211" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="211" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="225" package="Haldayne">
        <name>has</name>
        <full_name>\Haldayne\Boost\Map::has()</full_name>
        <docblock line="225">
          <description>Determine if a key exists the map.</description>
          <long-description>This is the object method equivalent of the magic isset($map[$key]);</long-description>
          <tag name="param" line="225" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="225" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="225" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="242" package="Haldayne">
        <name>get</name>
        <full_name>\Haldayne\Boost\Map::get()</full_name>
        <docblock line="242">
          <description>Get the value corresponding to the given key.</description>
          <long-description>If the key does not exist in the map, return the default.

This is the object method equivalent of the magic $map[$key].</long-description>
          <tag name="param" line="242" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="242" description="" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="242" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="242" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="260" package="Haldayne">
        <name>set</name>
        <full_name>\Haldayne\Boost\Map::set()</full_name>
        <docblock line="260">
          <description>Set a key and its corresponding value into the map.</description>
          <long-description>This is the object method equivalent of the magic $map[$key] = 'foo'.</long-description>
          <tag name="param" line="260" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="260" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="260" description="" type="\Haldayne\Boost\GuardedMapAbstract">
            <type>\Haldayne\Boost\GuardedMapAbstract</type>
          </tag>
          <tag name="api" line="260" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="275" package="Haldayne">
        <name>forget</name>
        <full_name>\Haldayne\Boost\Map::forget()</full_name>
        <docblock line="275">
          <description>Remove a key and its corresponding value from the map.</description>
          <long-description>This is the object method equivalent of the magic unset($map[$key]);</long-description>
          <tag name="param" line="275" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="275" description="" type="\Haldayne\Boost\GuardedMapAbstract">
            <type>\Haldayne\Boost\GuardedMapAbstract</type>
          </tag>
          <tag name="api" line="275" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="287" package="Haldayne">
        <name>isEmpty</name>
        <full_name>\Haldayne\Boost\Map::isEmpty()</full_name>
        <docblock line="287">
          <description>Determine if any key and their values have been set into the map.</description>
          <long-description></long-description>
          <tag name="return" line="287" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="287" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="305" package="Haldayne">
        <name>diff</name>
        <full_name>\Haldayne\Boost\Map::diff()</full_name>
        <docblock line="305">
          <description>Return a new map containing those keys and values that are not present
in the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose values match will
be removed.  Otherwise, comparison is strict, and elements whose keys
and values match will be removed.</long-description>
          <tag name="param" line="305" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="305" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="305" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="305" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="326" package="Haldayne">
        <name>intersect</name>
        <full_name>\Haldayne\Boost\Map::intersect()</full_name>
        <docblock line="326">
          <description>Return a new map containing those keys and values that are present in
the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose value match will
be included.  Otherise, comparison is strict, and elements whose keys &amp;
values match will be included.</long-description>
          <tag name="param" line="326" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="326" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="326" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="326" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="357" package="Haldayne">
        <name>partition</name>
        <full_name>\Haldayne\Boost\Map::partition()</full_name>
        <docblock line="357">
          <description>Groups elements of this map based on the result of an expression.</description>
          <long-description>Calls the expression for each element in this map. The expression
receives the value and key, respectively.  The expression may return
any value: this value is the grouping key and the element is put into
that group.

```
$nums = new Map(range(0, 9));
$part = $nums-&gt;partition(function ($value, $key) {
   return 0 == $value % 2 ? 'even' : 'odd';
});
var_dump(
    $part['odd']-&gt;count(), // 5
    array_sum($part['even']-&gt;toArray()) // 20
);
```</long-description>
          <tag name="param" line="357" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="357" description="" type="\Haldayne\Boost\MapOfCollections">
            <type>\Haldayne\Boost\MapOfCollections</type>
          </tag>
          <tag name="api" line="357" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="398" package="Haldayne">
        <name>map</name>
        <full_name>\Haldayne\Boost\Map::map()</full_name>
        <docblock line="398">
          <description>Walk the map, applying the expression to every element, transforming
them into a new map.</description>
          <long-description>```
$nums = new Map(range(0, 9));
$doubled = $nums-&gt;map('$_0 * 2');
```

The expression receives two arguments:
  - The current value in `$_0`
  - The current key in `$_1`

The keys in the resulting map will be the same as the keys in the
original map: only the values have (potentially) changed.

Recommended to use this method when you are mapping from one type to
the same type: int to int, string to string, etc. If you are changing
types, use the more powerful `transform` method.</long-description>
          <tag name="param" line="398" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="398" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="api" line="398" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="440" package="Haldayne">
        <name>reduce</name>
        <full_name>\Haldayne\Boost\Map::reduce()</full_name>
        <docblock line="440">
          <description>Walk the map, applying a reducing expression to every element, so as to
reduce the map to a single value.</description>
          <long-description>The `$reducer` expression receives three arguments:
  - The current reduction (`$_0`)
  - The current value (`$_1`)
  - The current key (`$_2`)

The initial value, if given or null if not, is passed as the current
reduction on the first invocation of `$reducer`. The return value from
`$reducer` then becomes the new, current reduced value.

```
$nums = new Map(range(0, 3));
$sum = $nums-&gt;reduce('$_0 + $_1');
// $sum == 6
```

If `$finisher` is a callable or string expression, then it will be
called last, after iterating over all elements. It will be passed
reduced value. The `$finisher` must return the new final value.</long-description>
          <tag name="param" line="440" description="" type="callable|string" variable="$reducer">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="440" description="" type="mixed" variable="$initial">
            <type>mixed</type>
          </tag>
          <tag name="param" line="440" description="" type="callable|string|null" variable="$finisher">
            <type>callable</type>
            <type>string</type>
            <type>null</type>
          </tag>
          <tag name="return" line="440" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="440" description=""/>
          <tag name="see" line="440" description="" link="http://php.net/manual/en/function.array-reduce.php"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$reducer</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$initial</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finisher</name>
          <default>null</default>
          <type>callable|string|null</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="467" package="Haldayne">
        <name>rekey</name>
        <full_name>\Haldayne\Boost\Map::rekey()</full_name>
        <docblock line="467">
          <description>Change the key for every element in the map using an expression to
calculate the new key.</description>
          <long-description>```
$keyed_by_bytecode = new Map(count_chars('war of the worlds', 1));
$keyed_by_letter   = $keyed_by_bytecode-&gt;rekey('chr($_1)');
```</long-description>
          <tag name="param" line="467" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="467" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="467" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="497" package="Haldayne">
        <name>merge</name>
        <full_name>\Haldayne\Boost\Map::merge()</full_name>
        <docblock line="497">
          <description>Merge the given collection into this map.</description>
          <long-description>The merger callable decides how to merge the current map's value with
the given collection's value.  The merger callable receives two
arguments:
  - This map's value at the given key
  - The collection's value at the given key

If the current map does not have a value for a key in the collection,
then the default value is assumed.</long-description>
          <tag name="param" line="497" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="497" description="" type="callable" variable="$merger">
            <type>callable</type>
          </tag>
          <tag name="param" line="497" description="" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="497" description="" type="\Haldayne\Boost\GuardedMapAbstract">
            <type>\Haldayne\Boost\GuardedMapAbstract</type>
          </tag>
          <tag name="api" line="497" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$merger</name>
          <default></default>
          <type>callable</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="577" package="Haldayne">
        <name>transform</name>
        <full_name>\Haldayne\Boost\Map::transform()</full_name>
        <docblock line="577">
          <description>Flexibly and thoroughly change this map into another map.</description>
          <long-description>```
// transform a word list into a map of word to frequency in the list
use Haldayne\Boost\Map;
$words   = new Map([ 'bear', 'bee', 'goose', 'bee' ]);
$lengths = $words-&gt;transform(
    function (Map $new, $word) {
        if ($new-&gt;has($word)) {
            $new-&gt;set($word, $new-&gt;get($word)+1);
        } else {
            $new-&gt;set($word, 1);
        }
    }
);
```

Sometimes you need to create one map from another using a strategy
that isn't one-to-one. You may need to change keys. You may need to
add multiple elements. You may need to delete elements. You may need
to change from a map to a number.

Whatever the case, the other simpler methods in Map don't quite fit the
problem. What you need, and what this method provides, is a complete
machine to transform this map into something else:

```
// convert a word list into a count of unique letters in those words
use Haldayne\Boost\Map;
$words   = new Map([ 'bear', 'bee', 'goose', 'bee' ]);
$letters = $words-&gt;transform(
    function ($frequencies, $word) {
        foreach (count_chars($word, 1) as $byte =&gt; $frequency) {
            $letter = chr($byte);
            if ($frequencies-&gt;has($letter)) {
                $new-&gt;set($letter, $frequencies-&gt;get($letter)+1);
            } else {
                $new-&gt;set($letter, 1);
            }
        }
    },
    function (Map $original) { return new MapOfIntegers(); },
    function (MapOfIntegers $new) { return $new-&gt;sum(); }
);
```

This method accepts three callables
1. `$creator`, which is called first with the current map, performs any
initialization needed.  The result of this callable will be passed to
all the other callables.  If no creator is given, then use a default
one that returns an empty Map.

2. `$transformer`, which is called for every element in this map and
receives the initialized value, the current value, and the current key
in that order. The transformer should modify the initialized value
appropriately. Often this means adding to a new map zero or more
tranformed values.

3. `$finisher`, which is called last, receives the initialized value
that was modified by the transformer calls. The finisher may transform
that value once more as needed. If no finisher given, then no finishing
step is made.</long-description>
          <tag name="param" line="577" description="" type="callable" variable="$tranformer">
            <type>callable</type>
          </tag>
          <tag name="param" line="577" description="" type="callable|null" variable="$creator">
            <type>callable</type>
            <type>null</type>
          </tag>
          <tag name="param" line="577" description="" type="callable|null" variable="$finisher">
            <type>callable</type>
            <type>null</type>
          </tag>
          <tag name="return" line="577" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="577" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$transformer</name>
          <default></default>
          <type>callable</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$creator</name>
          <default>null</default>
          <type>callable|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finisher</name>
          <default>null</default>
          <type>callable|null</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="613" package="Haldayne">
        <name>into</name>
        <full_name>\Haldayne\Boost\Map::into()</full_name>
        <docblock line="613">
          <description>Put all of this map's elements into the target and return the target.</description>
          <long-description>```
$words = new MapOfStrings([ 'foo', 'bar' ]);
$words-&gt;map('strlen($_0)')-&gt;into(new MapOfInts)-&gt;sum(); // 6
```

Use when you've mapped your elements into a different type, and you
want to fluently perform operations on the new type. In the example,
the sum of the words' lengths was calculated.</long-description>
          <tag name="return" line="613" description="" type="\Haldayne\Boost\$target">
            <type>\Haldayne\Boost\$target</type>
          </tag>
          <tag name="api" line="613" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$target</name>
          <default></default>
          <type>\Haldayne\Boost\Map</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="627" package="Haldayne">
        <name>push</name>
        <full_name>\Haldayne\Boost\Map::push()</full_name>
        <docblock line="627">
          <description>Treat the map as a stack and push an element onto its end.</description>
          <long-description></long-description>
          <tag name="return" line="627" description="" type="\Haldayne\Boost\GuardedMapAbstract">
            <type>\Haldayne\Boost\GuardedMapAbstract</type>
          </tag>
          <tag name="api" line="627" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$element</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="639" package="Haldayne">
        <name>pop</name>
        <full_name>\Haldayne\Boost\Map::pop()</full_name>
        <docblock line="639">
          <description>Treat the map as a stack and pop an element off its end.</description>
          <long-description></long-description>
          <tag name="return" line="639" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="639" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="662" package="Haldayne">
        <name>count</name>
        <full_name>\Haldayne\Boost\Map::count()</full_name>
        <docblock line="662">
          <description>Count the number of items in the map.</description>
          <long-description></long-description>
          <tag name="return" line="662" description="" type="integer">
            <type>integer</type>
          </tag>
          <tag name="api" line="662" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="676" package="Haldayne">
        <name>toArray</name>
        <full_name>\Haldayne\Boost\Map::toArray()</full_name>
        <docblock line="676">
          <description>Copy this map into an array, recursing as necessary to convert
contained collections into arrays.</description>
          <long-description></long-description>
          <tag name="api" line="676" description=""/>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Arrayable::toArray()" refers="\Haldayne\Boost\Contract\Arrayable::toArray()" link="/classes/Haldayne.Boost.Contract.Arrayable.html#method_toArray"/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="698" package="Haldayne">
        <name>toJson</name>
        <full_name>\Haldayne\Boost\Map::toJson()</full_name>
        <docblock line="698">
          <description>Return a JSON representation of the object.</description>
          <long-description></long-description>
          <tag name="api" line="698" description=""/>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Jsonable::toJson()" refers="\Haldayne\Boost\Contract\Jsonable::toJson()" link="/classes/Haldayne.Boost.Contract.Jsonable.html#method_toJson"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>0</default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="712" package="Haldayne">
        <name>offsetExists</name>
        <full_name>\Haldayne\Boost\Map::offsetExists()</full_name>
        <docblock line="712">
          <description>Determine if a value exists at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="712" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="712" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="724" package="Haldayne">
        <name>offsetGet</name>
        <full_name>\Haldayne\Boost\Map::offsetGet()</full_name>
        <docblock line="724">
          <description>Get a value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="724" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="724" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="741" package="Haldayne">
        <name>offsetSet</name>
        <full_name>\Haldayne\Boost\Map::offsetSet()</full_name>
        <docblock line="741">
          <description>Set the value at a given key.</description>
          <long-description>If key is null, the value is appended to the array using numeric
indexes, just like native PHP. Unlike native-PHP, $key can be of any
type: boolean, int, float, string, array, object, closure, resource.</long-description>
          <tag name="param" line="741" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="741" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="741" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="768" package="Haldayne">
        <name>offsetUnset</name>
        <full_name>\Haldayne\Boost\Map::offsetUnset()</full_name>
        <docblock line="768">
          <description>Unset the value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="768" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="768" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="782" package="Haldayne">
        <name>getIterator</name>
        <full_name>\Haldayne\Boost\Map::getIterator()</full_name>
        <docblock line="782">
          <description>Get an iterator for a copy of the map.</description>
          <long-description></long-description>
          <tag name="return" line="782" description="" type="\ArrayIterator">
            <type>\ArrayIterator</type>
          </tag>
          <tag name="api" line="782" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="802" package="Haldayne">
        <name>passes</name>
        <full_name>\Haldayne\Boost\Map::passes()</full_name>
        <docblock line="802">
          <description>Decide if the given result is considered "passing" or "failing".</description>
          <long-description>This method provides a definitive reference for what this and all
derived classes consider passing:
  - if the result is strictly false, the result "failed"
  - otherwise, the result "succeeded"</long-description>
          <tag name="param" line="802" description="" type="mixed" variable="$result">
            <type>mixed</type>
          </tag>
          <tag name="return" line="802" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$result</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="813" package="Haldayne">
        <name>is_collection_like</name>
        <full_name>\Haldayne\Boost\Map::is_collection_like()</full_name>
        <docblock line="813">
          <description>Decide if the given value is considered collection-like.</description>
          <long-description></long-description>
          <tag name="param" line="813" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="813" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="843" package="Haldayne">
        <name>collection_to_array</name>
        <full_name>\Haldayne\Boost\Map::collection_to_array()</full_name>
        <docblock line="843">
          <description>Give me a native PHP array, regardless of what kind of collection-like
structure is given.</description>
          <long-description></long-description>
          <tag name="param" line="843" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Traversable|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|object|array" variable="$items">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="return" line="843" description="" type="array|boolean">
            <type>array</type>
            <type>boolean</type>
          </tag>
          <tag name="throws" line="843" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="880" package="Haldayne">
        <name>grep</name>
        <full_name>\Haldayne\Boost\Map::grep()</full_name>
        <docblock line="880">
          <description>Finds elements for which the given code passes, optionally limited to a
maximum count.</description>
          <long-description>If limit is null, no limit on number of matches. If limit is positive,
return that many from the front of the array. If limit is negative,
return that many from the end of the array.</long-description>
          <tag name="param" line="880" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="880" description="" type="integer|null" variable="$limit">
            <type>integer</type>
            <type>null</type>
          </tag>
          <tag name="return" line="880" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$limit</name>
          <default>null</default>
          <type>integer|null</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="925" package="Haldayne">
        <name>walk</name>
        <full_name>\Haldayne\Boost\Map::walk()</full_name>
        <docblock line="925">
          <description>Execute the given code over each element of the map. The code receives
the value by reference and then the key as formal parameters.</description>
          <long-description>The items are walked in the order they exist in the map. If the code
returns boolean false, then the iteration halts. Values can be modified
from within the callback, but not keys.

Example:
```
$map-&gt;each(function (&amp;$value, $key) { $value++; return true; })-&gt;sum();
```</long-description>
          <tag name="param" line="925" description="" type="callable" variable="$code">
            <type>callable</type>
          </tag>
          <tag name="return" line="925" description="" type="\Haldayne\Boost\GuardedMapAbstract">
            <type>\Haldayne\Boost\GuardedMapAbstract</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="942" package="Haldayne">
        <name>walk_backward</name>
        <full_name>\Haldayne\Boost\Map::walk_backward()</full_name>
        <docblock line="942">
          <description>Like `walk`, except walk from the end toward the front.</description>
          <long-description></long-description>
          <tag name="param" line="942" description="" type="callable" variable="$code">
            <type>callable</type>
          </tag>
          <tag name="return" line="942" description="" type="\Haldayne\Boost\GuardedMapAbstract">
            <type>\Haldayne\Boost\GuardedMapAbstract</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="977" package="Haldayne">
        <name>key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::key_to_hash()</full_name>
        <docblock line="977">
          <description>Lookup the hash for the given key. If a hash does not yet exist, one is
created.</description>
          <long-description></long-description>
          <tag name="param" line="977" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="977" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="throws" line="977" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="1015" package="Haldayne">
        <name>hash_to_key</name>
        <full_name>\Haldayne\Boost\Map::hash_to_key()</full_name>
        <docblock line="1015">
          <description>Lookup the key for the given hash.</description>
          <long-description></long-description>
          <tag name="param" line="1015" description="" type="string" variable="$hash">
            <type>string</type>
          </tag>
          <tag name="return" line="1015" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$hash</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="1035" package="Haldayne">
        <name>call</name>
        <full_name>\Haldayne\Boost\Map::call()</full_name>
        <docblock line="1035">
          <description>Call the expression with the arguments.</description>
          <long-description></long-description>
          <tag name="param" line="1035" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="throws" line="1035" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="25" code="PPC:ERR-50015">Argument $key is missing from the Docblock of offsetSet</error>
      <error line="25" code="PPC:ERR-50015">Argument $value is missing from the Docblock of offsetSet</error>
    </parse_markers>
    <source>eJyNU01v2zAMvftXEEXaOkHW3Nt9tFuCbYdtRZftVGBgLDoWZkuCJDfJivz3UbKdxEkHTAcbEMnHx8en1+9MYRKFFTmDGcEnLAVuFD2+19r5mySZjEYJjOCBnLcy8w5WBXrIUMGCwJEHqbwGhC9oxqCNl1phWW5AaVthKf9ItQRfaEfwhGVNLoD5PsQV300SXHAHzDhQonPwsUYrSDDsXRegtSclXGiVPCfAJ5ILZwRTyqQgBzJneIKlfCIFVFJFyoMrdF2K0I656RWJhnVIrNBctRgd1K1BixVUcs2Jg0h7F7Lka8vEtS7bu0n879gbqz1lnivzWmVBjq5n2kANWdQj7t9ZxsAlxoG1wZb/b9qMA+ITjyYa2fZ5hmXigfmiwxGUS8WJy6Dd8VTPt1IVZKWf6my7m8cXVq8cPP5QtDaR988APltnFHfZG9LUi1Jm+8F0nvP6mH06iEzbAWNus6BwBpZcXXp4AwNfSPfq7YkeXSbvLm1zmuHStnY4PMCLTNDyXq+vTxg01Z35qOtx0GTLrmA39vGiDKBo9W8lUmcsuyZPe4XhXMZEVgP8xhCcnbszyLVdSCF4h1JBIMV/51FlMe/cXY5PYJbkQ31H+cWEX/FxNCINewm9EZPm2/hsAvcP3+azD/PZFO7uP5+472sn1oG3FsQD8OP0mmdeHltpHuZhs2FYq6xM88owekJo9qTSTPC07j8eVoz1TXf6oC72+7142XMtWhO8aeXYJn8Bea9y/A==</source>
  </file>
  <file path="boost/src/MapOfCollections.php" generated-path="boost.src.MapOfCollections.html" hash="68884609df55d9f00beae77ded54d43d" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <class final="false" abstract="false" namespace="Haldayne\Boost" line="15" package="Haldayne">
      <extends>\Haldayne\Boost\GuardedMapAbstract</extends>
      <name>MapOfCollections</name>
      <full_name>\Haldayne\Boost\MapOfCollections</full_name>
      <docblock line="15">
        <description>Implements a map that may only contain collection-like values.</description>
        <long-description>A collection-like value may be any of:
  - array
  - object
  - \Traversable
  - \Haldayne\Boost\Map
  - \Haldayne\Boost\Contract\Arrayble
  - \Haldayne\Boost\Contract\Jsonable</long-description>
        <tag name="package" line="15" description="Haldayne"/>
        <tag name="inherited_from" description="\Haldayne\Boost\GuardedMapAbstract" refers="\Haldayne\Boost\GuardedMapAbstract" link="/classes/Haldayne.Boost.GuardedMapAbstract.html"/>
      </docblock>
      <constant namespace="Haldayne\Boost" line="46" package="Haldayne">
        <name>LOOSE</name>
        <full_name>\Haldayne\Boost\Map::LOOSE</full_name>
        <value>true</value>
        <docblock line="46">
          <description>Should the comparison be made loosely?</description>
          <long-description></long-description>
          <tag name="see" line="46" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="46" description="" link="\Haldayne\Boost\Map::intersect"/>
          <tag name="api" line="46" description=""/>
        </docblock>
      </constant>
      <constant namespace="Haldayne\Boost" line="54" package="Haldayne">
        <name>STRICT</name>
        <full_name>\Haldayne\Boost\Map::STRICT</full_name>
        <value>false</value>
        <docblock line="54">
          <description>Should the comparison be made strictly?</description>
          <long-description></long-description>
          <tag name="see" line="54" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="54" description="" link="\Haldayne\Boost\Map::intersect"/>
          <tag name="api" line="54" description=""/>
        </docblock>
      </constant>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="961" package="Haldayne">
        <name>$array</name>
        <full_name>\Haldayne\Boost\Map::array</full_name>
        <default>array()</default>
        <docblock line="961">
          <description>The internal array representation of the map.</description>
          <long-description></long-description>
          <tag name="var" line="961" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="967" package="Haldayne">
        <name>$map_key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::map_key_to_hash</full_name>
        <default>array()</default>
        <docblock line="967">
          <description>Track hashes we've created for non-string keys.</description>
          <long-description></long-description>
          <tag name="var" line="967" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="40" package="Haldayne">
        <name>pluck</name>
        <full_name>\Haldayne\Boost\MapOfCollections::pluck()</full_name>
        <docblock line="40">
          <description>Create a new map by pulling the given key out of all contained maps.</description>
          <long-description>Thinking of a Map of Collections as a two-dimensional array, this
method slices a column out:

```
use Haldayne\Boost\MapOfCollections;
$map = new MapOfCollections;
$map-&gt;push([ 'id' =&gt; 5, 'name' =&gt; 'Ada', 'age' =&gt; 16 ]);
$map-&gt;push([ 'id' =&gt; 6, 'name' =&gt; 'Bee', 'age' =&gt; 12 ]);
$map-&gt;push([ 'id' =&gt; 7, 'name' =&gt; 'Cam', 'age' =&gt; 37 ]);
var_dump(
  $map-&gt;pluck('name')-&gt;toArray();       // [ 'Ada', 'Bee', 'Cam' ]
  $map-&gt;pluck('name', 'id')-&gt;toArray(); // [ 5=&gt;'Ada', 6=&gt;'Bee', 7=&gt;'Cam' ]
);
```</long-description>
          <tag name="param" line="40" description="&lt;p&gt;$key_for_value The key holding the new value.&lt;/p&gt;" type="" variable="$mixed"/>
          <tag name="param" line="40" description="&lt;p&gt;$key_for_key The key holding the new value's key.&lt;/p&gt;" type="" variable="$mixed"/>
          <tag name="return" line="40" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="api" line="40" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key_for_value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$key_for_key</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="68" package="Haldayne">
        <name>allowed</name>
        <full_name>\Haldayne\Boost\MapOfCollections::allowed()</full_name>
        <docblock line="68">
          <description>Decides if the given element should be allowed into the map.</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\Haldayne\Boost\GuardedMapAbstract::allowed()" refers="\Haldayne\Boost\GuardedMapAbstract::allowed()" link="/classes/Haldayne.Boost.GuardedMapAbstract.html#method_allowed"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="75" package="Haldayne">
        <name>normalize</name>
        <full_name>\Haldayne\Boost\MapOfCollections::normalize()</full_name>
        <docblock line="75">
          <description>Normalize the value before storing.</description>
          <long-description>This default implementation does nothing.</long-description>
          <tag name="inherited_from" description="\Haldayne\Boost\GuardedMapAbstract::normalize()" refers="\Haldayne\Boost\GuardedMapAbstract::normalize()" link="/classes/Haldayne.Boost.GuardedMapAbstract.html#method_normalize"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="Haldayne\Boost" line="16" package="Haldayne">
        <name>allowed</name>
        <full_name>\Haldayne\Boost\GuardedMapAbstract::allowed()</full_name>
        <docblock line="16">
          <description>Decides if the given element should be allowed into the map.</description>
          <long-description></long-description>
          <tag name="param" line="16" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="16" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\GuardedMapAbstract</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="741" package="Haldayne">
        <name>offsetSet</name>
        <full_name>\Haldayne\Boost\Map::offsetSet()</full_name>
        <docblock line="741">
          <description>Set the value at a given key.</description>
          <long-description>If key is null, the value is appended to the array using numeric
indexes, just like native PHP. Unlike native-PHP, $key can be of any
type: boolean, int, float, string, array, object, closure, resource.</long-description>
          <tag name="param" line="741" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="741" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="741" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="49" package="Haldayne">
        <name>normalize</name>
        <full_name>\Haldayne\Boost\GuardedMapAbstract::normalize()</full_name>
        <docblock line="49">
          <description>Normalize the value before storing.</description>
          <long-description>This default implementation does nothing.</long-description>
          <tag name="param" line="49" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="49" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\GuardedMapAbstract</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="67" package="Haldayne">
        <name>__construct</name>
        <full_name>\Haldayne\Boost\Map::__construct()</full_name>
        <docblock line="67">
          <description>Create a new map.</description>
          <long-description>Initialize the map with the given collection, which can be any type
that is "collection-like": array, object, Traversable, another Map,
etc.</long-description>
          <tag name="param" line="67" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="throws" line="67" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="api" line="67" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default>null</default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="96" package="Haldayne">
        <name>all</name>
        <full_name>\Haldayne\Boost\Map::all()</full_name>
        <docblock line="96">
          <description>Create a new map containing all members from this map whose elements
satisfy the expression.</description>
          <long-description>The expression decides whether an element is in or out. If the
expression returns boolean false, the element is out.  Otherwise, it's
in.

```
$nums = new Map(range(0, 9));
$even = $nums-&gt;all(function ($val, $key) { return 0 == $val % 2; });
$odds = $nums-&gt;all('$_0 &amp; 1');
```</long-description>
          <tag name="param" line="96" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="96" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="96" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="117" package="Haldayne">
        <name>filter</name>
        <full_name>\Haldayne\Boost\Map::filter()</full_name>
        <docblock line="117">
          <description>Apply the filter to every element, creating a new map with only those
elements from the original map that do not fail this filter.</description>
          <long-description>The filter expressions receives two arguments:
  - The current value
  - The current key

If the filter returns exactly boolean false, the element is not copied
into the new map.  Otherwise, it is.  Keys from the original map carry
into the new map.</long-description>
          <tag name="param" line="117" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="117" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="117" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="148" package="Haldayne">
        <name>first</name>
        <full_name>\Haldayne\Boost\Map::first()</full_name>
        <docblock line="148">
          <description>Return a new map containing the first N elements passing the
expression.</description>
          <long-description>Like `find`, but stop after finding N elements from the front. Defaults
to N = 1.

```
$nums = new Map(range(0, 9));
$odd3 = $nums-&gt;first('1 == ($_0 % 2)', 3); // first three odds
```</long-description>
          <tag name="param" line="148" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="148" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="148" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="148" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="172" package="Haldayne">
        <name>last</name>
        <full_name>\Haldayne\Boost\Map::last()</full_name>
        <docblock line="172">
          <description>Return a new map containing the last N elements passing the expression.</description>
          <long-description>Like `first`, but stop after finding N elements from the *end*.
Defaults to N = 1.

```
$nums = new Map(range(0, 9));
$odds = $nums-&gt;last('1 == ($_0 % 2)', 2); // last two odd numbers
```</long-description>
          <tag name="param" line="172" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="172" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="172" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="172" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="187" package="Haldayne">
        <name>every</name>
        <full_name>\Haldayne\Boost\Map::every()</full_name>
        <docblock line="187">
          <description>Test if every element passes the expression.</description>
          <long-description></long-description>
          <tag name="param" line="187" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="187" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="187" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="199" package="Haldayne">
        <name>some</name>
        <full_name>\Haldayne\Boost\Map::some()</full_name>
        <docblock line="199">
          <description>Test if at least one element passes the expression.</description>
          <long-description></long-description>
          <tag name="param" line="199" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="199" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="199" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="211" package="Haldayne">
        <name>none</name>
        <full_name>\Haldayne\Boost\Map::none()</full_name>
        <docblock line="211">
          <description>Test that no elements pass the expression.</description>
          <long-description></long-description>
          <tag name="param" line="211" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="211" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="211" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="225" package="Haldayne">
        <name>has</name>
        <full_name>\Haldayne\Boost\Map::has()</full_name>
        <docblock line="225">
          <description>Determine if a key exists the map.</description>
          <long-description>This is the object method equivalent of the magic isset($map[$key]);</long-description>
          <tag name="param" line="225" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="225" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="225" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="242" package="Haldayne">
        <name>get</name>
        <full_name>\Haldayne\Boost\Map::get()</full_name>
        <docblock line="242">
          <description>Get the value corresponding to the given key.</description>
          <long-description>If the key does not exist in the map, return the default.

This is the object method equivalent of the magic $map[$key].</long-description>
          <tag name="param" line="242" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="242" description="" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="242" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="242" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="260" package="Haldayne">
        <name>set</name>
        <full_name>\Haldayne\Boost\Map::set()</full_name>
        <docblock line="260">
          <description>Set a key and its corresponding value into the map.</description>
          <long-description>This is the object method equivalent of the magic $map[$key] = 'foo'.</long-description>
          <tag name="param" line="260" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="260" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="260" description="" type="\Haldayne\Boost\MapOfCollections">
            <type>\Haldayne\Boost\MapOfCollections</type>
          </tag>
          <tag name="api" line="260" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="275" package="Haldayne">
        <name>forget</name>
        <full_name>\Haldayne\Boost\Map::forget()</full_name>
        <docblock line="275">
          <description>Remove a key and its corresponding value from the map.</description>
          <long-description>This is the object method equivalent of the magic unset($map[$key]);</long-description>
          <tag name="param" line="275" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="275" description="" type="\Haldayne\Boost\MapOfCollections">
            <type>\Haldayne\Boost\MapOfCollections</type>
          </tag>
          <tag name="api" line="275" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="287" package="Haldayne">
        <name>isEmpty</name>
        <full_name>\Haldayne\Boost\Map::isEmpty()</full_name>
        <docblock line="287">
          <description>Determine if any key and their values have been set into the map.</description>
          <long-description></long-description>
          <tag name="return" line="287" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="287" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="305" package="Haldayne">
        <name>diff</name>
        <full_name>\Haldayne\Boost\Map::diff()</full_name>
        <docblock line="305">
          <description>Return a new map containing those keys and values that are not present
in the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose values match will
be removed.  Otherwise, comparison is strict, and elements whose keys
and values match will be removed.</long-description>
          <tag name="param" line="305" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="305" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="305" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="305" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="326" package="Haldayne">
        <name>intersect</name>
        <full_name>\Haldayne\Boost\Map::intersect()</full_name>
        <docblock line="326">
          <description>Return a new map containing those keys and values that are present in
the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose value match will
be included.  Otherise, comparison is strict, and elements whose keys &amp;
values match will be included.</long-description>
          <tag name="param" line="326" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="326" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="326" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="326" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="357" package="Haldayne">
        <name>partition</name>
        <full_name>\Haldayne\Boost\Map::partition()</full_name>
        <docblock line="357">
          <description>Groups elements of this map based on the result of an expression.</description>
          <long-description>Calls the expression for each element in this map. The expression
receives the value and key, respectively.  The expression may return
any value: this value is the grouping key and the element is put into
that group.

```
$nums = new Map(range(0, 9));
$part = $nums-&gt;partition(function ($value, $key) {
   return 0 == $value % 2 ? 'even' : 'odd';
});
var_dump(
    $part['odd']-&gt;count(), // 5
    array_sum($part['even']-&gt;toArray()) // 20
);
```</long-description>
          <tag name="param" line="357" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="357" description="" type="\Haldayne\Boost\MapOfCollections">
            <type>\Haldayne\Boost\MapOfCollections</type>
          </tag>
          <tag name="api" line="357" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="398" package="Haldayne">
        <name>map</name>
        <full_name>\Haldayne\Boost\Map::map()</full_name>
        <docblock line="398">
          <description>Walk the map, applying the expression to every element, transforming
them into a new map.</description>
          <long-description>```
$nums = new Map(range(0, 9));
$doubled = $nums-&gt;map('$_0 * 2');
```

The expression receives two arguments:
  - The current value in `$_0`
  - The current key in `$_1`

The keys in the resulting map will be the same as the keys in the
original map: only the values have (potentially) changed.

Recommended to use this method when you are mapping from one type to
the same type: int to int, string to string, etc. If you are changing
types, use the more powerful `transform` method.</long-description>
          <tag name="param" line="398" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="398" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="api" line="398" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="440" package="Haldayne">
        <name>reduce</name>
        <full_name>\Haldayne\Boost\Map::reduce()</full_name>
        <docblock line="440">
          <description>Walk the map, applying a reducing expression to every element, so as to
reduce the map to a single value.</description>
          <long-description>The `$reducer` expression receives three arguments:
  - The current reduction (`$_0`)
  - The current value (`$_1`)
  - The current key (`$_2`)

The initial value, if given or null if not, is passed as the current
reduction on the first invocation of `$reducer`. The return value from
`$reducer` then becomes the new, current reduced value.

```
$nums = new Map(range(0, 3));
$sum = $nums-&gt;reduce('$_0 + $_1');
// $sum == 6
```

If `$finisher` is a callable or string expression, then it will be
called last, after iterating over all elements. It will be passed
reduced value. The `$finisher` must return the new final value.</long-description>
          <tag name="param" line="440" description="" type="callable|string" variable="$reducer">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="440" description="" type="mixed" variable="$initial">
            <type>mixed</type>
          </tag>
          <tag name="param" line="440" description="" type="callable|string|null" variable="$finisher">
            <type>callable</type>
            <type>string</type>
            <type>null</type>
          </tag>
          <tag name="return" line="440" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="440" description=""/>
          <tag name="see" line="440" description="" link="http://php.net/manual/en/function.array-reduce.php"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$reducer</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$initial</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finisher</name>
          <default>null</default>
          <type>callable|string|null</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="467" package="Haldayne">
        <name>rekey</name>
        <full_name>\Haldayne\Boost\Map::rekey()</full_name>
        <docblock line="467">
          <description>Change the key for every element in the map using an expression to
calculate the new key.</description>
          <long-description>```
$keyed_by_bytecode = new Map(count_chars('war of the worlds', 1));
$keyed_by_letter   = $keyed_by_bytecode-&gt;rekey('chr($_1)');
```</long-description>
          <tag name="param" line="467" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="467" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="467" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="497" package="Haldayne">
        <name>merge</name>
        <full_name>\Haldayne\Boost\Map::merge()</full_name>
        <docblock line="497">
          <description>Merge the given collection into this map.</description>
          <long-description>The merger callable decides how to merge the current map's value with
the given collection's value.  The merger callable receives two
arguments:
  - This map's value at the given key
  - The collection's value at the given key

If the current map does not have a value for a key in the collection,
then the default value is assumed.</long-description>
          <tag name="param" line="497" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="497" description="" type="callable" variable="$merger">
            <type>callable</type>
          </tag>
          <tag name="param" line="497" description="" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="497" description="" type="\Haldayne\Boost\MapOfCollections">
            <type>\Haldayne\Boost\MapOfCollections</type>
          </tag>
          <tag name="api" line="497" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$merger</name>
          <default></default>
          <type>callable</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="577" package="Haldayne">
        <name>transform</name>
        <full_name>\Haldayne\Boost\Map::transform()</full_name>
        <docblock line="577">
          <description>Flexibly and thoroughly change this map into another map.</description>
          <long-description>```
// transform a word list into a map of word to frequency in the list
use Haldayne\Boost\Map;
$words   = new Map([ 'bear', 'bee', 'goose', 'bee' ]);
$lengths = $words-&gt;transform(
    function (Map $new, $word) {
        if ($new-&gt;has($word)) {
            $new-&gt;set($word, $new-&gt;get($word)+1);
        } else {
            $new-&gt;set($word, 1);
        }
    }
);
```

Sometimes you need to create one map from another using a strategy
that isn't one-to-one. You may need to change keys. You may need to
add multiple elements. You may need to delete elements. You may need
to change from a map to a number.

Whatever the case, the other simpler methods in Map don't quite fit the
problem. What you need, and what this method provides, is a complete
machine to transform this map into something else:

```
// convert a word list into a count of unique letters in those words
use Haldayne\Boost\Map;
$words   = new Map([ 'bear', 'bee', 'goose', 'bee' ]);
$letters = $words-&gt;transform(
    function ($frequencies, $word) {
        foreach (count_chars($word, 1) as $byte =&gt; $frequency) {
            $letter = chr($byte);
            if ($frequencies-&gt;has($letter)) {
                $new-&gt;set($letter, $frequencies-&gt;get($letter)+1);
            } else {
                $new-&gt;set($letter, 1);
            }
        }
    },
    function (Map $original) { return new MapOfIntegers(); },
    function (MapOfIntegers $new) { return $new-&gt;sum(); }
);
```

This method accepts three callables
1. `$creator`, which is called first with the current map, performs any
initialization needed.  The result of this callable will be passed to
all the other callables.  If no creator is given, then use a default
one that returns an empty Map.

2. `$transformer`, which is called for every element in this map and
receives the initialized value, the current value, and the current key
in that order. The transformer should modify the initialized value
appropriately. Often this means adding to a new map zero or more
tranformed values.

3. `$finisher`, which is called last, receives the initialized value
that was modified by the transformer calls. The finisher may transform
that value once more as needed. If no finisher given, then no finishing
step is made.</long-description>
          <tag name="param" line="577" description="" type="callable" variable="$tranformer">
            <type>callable</type>
          </tag>
          <tag name="param" line="577" description="" type="callable|null" variable="$creator">
            <type>callable</type>
            <type>null</type>
          </tag>
          <tag name="param" line="577" description="" type="callable|null" variable="$finisher">
            <type>callable</type>
            <type>null</type>
          </tag>
          <tag name="return" line="577" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="577" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$transformer</name>
          <default></default>
          <type>callable</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$creator</name>
          <default>null</default>
          <type>callable|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finisher</name>
          <default>null</default>
          <type>callable|null</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="613" package="Haldayne">
        <name>into</name>
        <full_name>\Haldayne\Boost\Map::into()</full_name>
        <docblock line="613">
          <description>Put all of this map's elements into the target and return the target.</description>
          <long-description>```
$words = new MapOfStrings([ 'foo', 'bar' ]);
$words-&gt;map('strlen($_0)')-&gt;into(new MapOfInts)-&gt;sum(); // 6
```

Use when you've mapped your elements into a different type, and you
want to fluently perform operations on the new type. In the example,
the sum of the words' lengths was calculated.</long-description>
          <tag name="return" line="613" description="" type="\Haldayne\Boost\$target">
            <type>\Haldayne\Boost\$target</type>
          </tag>
          <tag name="api" line="613" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$target</name>
          <default></default>
          <type>\Haldayne\Boost\Map</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="627" package="Haldayne">
        <name>push</name>
        <full_name>\Haldayne\Boost\Map::push()</full_name>
        <docblock line="627">
          <description>Treat the map as a stack and push an element onto its end.</description>
          <long-description></long-description>
          <tag name="return" line="627" description="" type="\Haldayne\Boost\MapOfCollections">
            <type>\Haldayne\Boost\MapOfCollections</type>
          </tag>
          <tag name="api" line="627" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$element</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="639" package="Haldayne">
        <name>pop</name>
        <full_name>\Haldayne\Boost\Map::pop()</full_name>
        <docblock line="639">
          <description>Treat the map as a stack and pop an element off its end.</description>
          <long-description></long-description>
          <tag name="return" line="639" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="639" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="662" package="Haldayne">
        <name>count</name>
        <full_name>\Haldayne\Boost\Map::count()</full_name>
        <docblock line="662">
          <description>Count the number of items in the map.</description>
          <long-description></long-description>
          <tag name="return" line="662" description="" type="integer">
            <type>integer</type>
          </tag>
          <tag name="api" line="662" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="676" package="Haldayne">
        <name>toArray</name>
        <full_name>\Haldayne\Boost\Map::toArray()</full_name>
        <docblock line="676">
          <description>Copy this map into an array, recursing as necessary to convert
contained collections into arrays.</description>
          <long-description></long-description>
          <tag name="api" line="676" description=""/>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Arrayable::toArray()" refers="\Haldayne\Boost\Contract\Arrayable::toArray()" link="/classes/Haldayne.Boost.Contract.Arrayable.html#method_toArray"/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="698" package="Haldayne">
        <name>toJson</name>
        <full_name>\Haldayne\Boost\Map::toJson()</full_name>
        <docblock line="698">
          <description>Return a JSON representation of the object.</description>
          <long-description></long-description>
          <tag name="api" line="698" description=""/>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Jsonable::toJson()" refers="\Haldayne\Boost\Contract\Jsonable::toJson()" link="/classes/Haldayne.Boost.Contract.Jsonable.html#method_toJson"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>0</default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="712" package="Haldayne">
        <name>offsetExists</name>
        <full_name>\Haldayne\Boost\Map::offsetExists()</full_name>
        <docblock line="712">
          <description>Determine if a value exists at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="712" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="712" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="724" package="Haldayne">
        <name>offsetGet</name>
        <full_name>\Haldayne\Boost\Map::offsetGet()</full_name>
        <docblock line="724">
          <description>Get a value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="724" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="724" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="768" package="Haldayne">
        <name>offsetUnset</name>
        <full_name>\Haldayne\Boost\Map::offsetUnset()</full_name>
        <docblock line="768">
          <description>Unset the value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="768" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="768" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="782" package="Haldayne">
        <name>getIterator</name>
        <full_name>\Haldayne\Boost\Map::getIterator()</full_name>
        <docblock line="782">
          <description>Get an iterator for a copy of the map.</description>
          <long-description></long-description>
          <tag name="return" line="782" description="" type="\ArrayIterator">
            <type>\ArrayIterator</type>
          </tag>
          <tag name="api" line="782" description=""/>
        </docblock>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="802" package="Haldayne">
        <name>passes</name>
        <full_name>\Haldayne\Boost\Map::passes()</full_name>
        <docblock line="802">
          <description>Decide if the given result is considered "passing" or "failing".</description>
          <long-description>This method provides a definitive reference for what this and all
derived classes consider passing:
  - if the result is strictly false, the result "failed"
  - otherwise, the result "succeeded"</long-description>
          <tag name="param" line="802" description="" type="mixed" variable="$result">
            <type>mixed</type>
          </tag>
          <tag name="return" line="802" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$result</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="813" package="Haldayne">
        <name>is_collection_like</name>
        <full_name>\Haldayne\Boost\Map::is_collection_like()</full_name>
        <docblock line="813">
          <description>Decide if the given value is considered collection-like.</description>
          <long-description></long-description>
          <tag name="param" line="813" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="813" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="843" package="Haldayne">
        <name>collection_to_array</name>
        <full_name>\Haldayne\Boost\Map::collection_to_array()</full_name>
        <docblock line="843">
          <description>Give me a native PHP array, regardless of what kind of collection-like
structure is given.</description>
          <long-description></long-description>
          <tag name="param" line="843" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Traversable|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|object|array" variable="$items">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="return" line="843" description="" type="array|boolean">
            <type>array</type>
            <type>boolean</type>
          </tag>
          <tag name="throws" line="843" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="880" package="Haldayne">
        <name>grep</name>
        <full_name>\Haldayne\Boost\Map::grep()</full_name>
        <docblock line="880">
          <description>Finds elements for which the given code passes, optionally limited to a
maximum count.</description>
          <long-description>If limit is null, no limit on number of matches. If limit is positive,
return that many from the front of the array. If limit is negative,
return that many from the end of the array.</long-description>
          <tag name="param" line="880" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="880" description="" type="integer|null" variable="$limit">
            <type>integer</type>
            <type>null</type>
          </tag>
          <tag name="return" line="880" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$limit</name>
          <default>null</default>
          <type>integer|null</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="925" package="Haldayne">
        <name>walk</name>
        <full_name>\Haldayne\Boost\Map::walk()</full_name>
        <docblock line="925">
          <description>Execute the given code over each element of the map. The code receives
the value by reference and then the key as formal parameters.</description>
          <long-description>The items are walked in the order they exist in the map. If the code
returns boolean false, then the iteration halts. Values can be modified
from within the callback, but not keys.

Example:
```
$map-&gt;each(function (&amp;$value, $key) { $value++; return true; })-&gt;sum();
```</long-description>
          <tag name="param" line="925" description="" type="callable" variable="$code">
            <type>callable</type>
          </tag>
          <tag name="return" line="925" description="" type="\Haldayne\Boost\MapOfCollections">
            <type>\Haldayne\Boost\MapOfCollections</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="942" package="Haldayne">
        <name>walk_backward</name>
        <full_name>\Haldayne\Boost\Map::walk_backward()</full_name>
        <docblock line="942">
          <description>Like `walk`, except walk from the end toward the front.</description>
          <long-description></long-description>
          <tag name="param" line="942" description="" type="callable" variable="$code">
            <type>callable</type>
          </tag>
          <tag name="return" line="942" description="" type="\Haldayne\Boost\MapOfCollections">
            <type>\Haldayne\Boost\MapOfCollections</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="977" package="Haldayne">
        <name>key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::key_to_hash()</full_name>
        <docblock line="977">
          <description>Lookup the hash for the given key. If a hash does not yet exist, one is
created.</description>
          <long-description></long-description>
          <tag name="param" line="977" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="977" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="throws" line="977" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="1015" package="Haldayne">
        <name>hash_to_key</name>
        <full_name>\Haldayne\Boost\Map::hash_to_key()</full_name>
        <docblock line="1015">
          <description>Lookup the key for the given hash.</description>
          <long-description></long-description>
          <tag name="param" line="1015" description="" type="string" variable="$hash">
            <type>string</type>
          </tag>
          <tag name="return" line="1015" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$hash</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="1035" package="Haldayne">
        <name>call</name>
        <full_name>\Haldayne\Boost\Map::call()</full_name>
        <docblock line="1035">
          <description>Call the expression with the arguments.</description>
          <long-description></long-description>
          <tag name="param" line="1035" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="throws" line="1035" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <inherited_from>\Haldayne\Boost\Map</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="68" code="PPC:ERR-50015">Argument $value is missing from the Docblock of allowed</error>
      <error line="75" code="PPC:ERR-50015">Argument $value is missing from the Docblock of normalize</error>
    </parse_markers>
    <source>eJy1VVFv2jAQfs+vuIeqhAqKtqmtVAYrZdXWSVOnibdS0SMxjYdjR7YDZVP/+85OAoQyJk1aXuLYd9999/lz/P5DlmSBxJSZDCMGn1HEuJJsfK2Usd0g6JycBHACt2kmWMqkNYCQYgY2QUuDFSgpVhApaZFLegvBIsuVbAs+Z7BAkTNzSggOZLB/3cNMGaAktNmliwRoA2qNq+pDTX9QXvU1HmlcMG1wKth6rk59/JVI/mltSHQ1RnY8cDUOgKwDvxgly2qdIBJoDFCBu9lw3ZAB9myZjA18ylHHLKb1wdT49OBXQPDgtXTPCQw1Q0stg2RLr+d0BVkuBJdPJC2DJ75gEuaMFMktqQIoRKUyi12GU9VjVZCjhMu5y3fRjp0bbPNDt3d2qdoxp500NIeiULlFNbmpgFJmExWDETxiLoU2LU+lI3K5U/Lx8bEa5mbXPONdgbpV7JFruOdbPxjT7me5ScJ7aPC4Ab0+nLWg4bzqPxqDGBs0gU/F95tzeGgezj+v5V8zVst/+9f8i1r+ENPt/HcX2/kL1JM4T7OwmoAKUuTRPCxgmu2+Vd6DYbMLxdPpwP26t5KiqwQPh5BanmMdzyOd9fol2DmNCrwLGtUhN7w3W1rNXGWoMaWa/Jmcd0SenMyUnhRHd0RedS5NlIgr77p99aunf4FwiQcBGsatbWA0s7mW+476OgQzXo47/p3lU/IxzHLpDQaFaPUuWnVK5Ew6iU2fXhxcKDXfmLa7mXdHp91fopiH6yrh0aLpj8TBSi0P2twqUhrgiVkvhGNjlQOqRfAZhI4i9Hq9GuAulOe3aalbW3wBJoihAztatPsJmrCGdQDMxRPHevxe9NcQNtFq6WUc3+X2bnatcvpp3jxHLHPShbs4wa44GMdenMKAaIuryMuZabXg9OuFJYOEbgi6nF4r96pZD7S/Xdqeexf3sK/pIu9/tb0eba2U/ne0islSHVLl2/e70c1wdPMRBt9ug93r5tcVlwnT3H5U0Uv9fGhl6d9Lmq3NS1eNWrKYhPINbjVT1S8sz81kc59P3H1epdTJ/SONY6l0ioL/ZOHxH6mUx3G38EvwG+n2gOU=</source>
  </file>
  <file path="boost/src/Map.php" generated-path="boost.src.Map.html" hash="09df097062a8ac04ad334c0a9aa3f4ff" package="Haldayne">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Haldayne"/>
    </docblock>
    <namespace-alias name="Arrayable">\Haldayne\Boost\Contract\Arrayable</namespace-alias>
    <namespace-alias name="Jsonable">\Haldayne\Boost\Contract\Jsonable</namespace-alias>
    <namespace-alias name="Expression">\Haldayne\Fox\Expression</namespace-alias>
    <class final="false" abstract="false" namespace="Haldayne\Boost" line="38" package="Haldayne">
      <extends/>
      <implements>\Countable</implements>
      <implements>\Haldayne\Boost\Contract\Arrayable</implements>
      <implements>\Haldayne\Boost\Contract\Jsonable</implements>
      <implements>\ArrayAccess</implements>
      <implements>\IteratorAggregate</implements>
      <name>Map</name>
      <full_name>\Haldayne\Boost\Map</full_name>
      <docblock line="38">
        <description>API improvements for PHP associative arrays. Features a consistent fluent
interface, keys of any type, a short-hand syntax for filtering expressions.</description>
        <long-description>Methods accepting a `$collection` may receive any of these types:
  - array
  - object
  - \Traversable
  - \Haldayne\Boost\Map
  - \Haldayne\Boost\Contract\Arrayable
  - \Haldayne\Boost\Contract\Jsonable

Methods accept a `$key` may be of any type: boolean, integer, float,
string, array, object, closure, or resource.

Methods accepting an `$expression` may receive a [PHP callable][1] or a
string. When given a string, the library wraps an anonymous function around
the string code body and returns the result. By way of example, these
are equivalent and both acceptable as an `$expression`:
  - `$_0 &lt; $_1`
  - `function ($_0, $_1) { return $_0 &lt; $_1; }

Expressions lets you write extremely compact code for filtering, at the
one-time run-time cost of converting the string to the body of an anonymous
function.

Expressions, whether given as a callable or a string, receive two formal
arguments: the current value and the current key.  Note that, inside string
expressions, these are represented by `$_0` and `$_1` respectively.</long-description>
        <tag name="package" line="38" description="Haldayne"/>
      </docblock>
      <constant namespace="Haldayne\Boost" line="46" package="Haldayne">
        <name>LOOSE</name>
        <full_name>\Haldayne\Boost\Map::LOOSE</full_name>
        <value>true</value>
        <docblock line="46">
          <description>Should the comparison be made loosely?</description>
          <long-description></long-description>
          <tag name="see" line="46" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="46" description="" link="\Haldayne\Boost\Map::intersect"/>
          <tag name="api" line="46" description=""/>
        </docblock>
      </constant>
      <constant namespace="Haldayne\Boost" line="54" package="Haldayne">
        <name>STRICT</name>
        <full_name>\Haldayne\Boost\Map::STRICT</full_name>
        <value>false</value>
        <docblock line="54">
          <description>Should the comparison be made strictly?</description>
          <long-description></long-description>
          <tag name="see" line="54" description="" link="\Haldayne\Boost\Map::diff"/>
          <tag name="see" line="54" description="" link="\Haldayne\Boost\Map::intersect"/>
          <tag name="api" line="54" description=""/>
        </docblock>
      </constant>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="961" package="Haldayne">
        <name>$array</name>
        <full_name>\Haldayne\Boost\Map::array</full_name>
        <default>array()</default>
        <docblock line="961">
          <description>The internal array representation of the map.</description>
          <long-description></long-description>
          <tag name="var" line="961" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="Haldayne\Boost" line="967" package="Haldayne">
        <name>$map_key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::map_key_to_hash</full_name>
        <default>array()</default>
        <docblock line="967">
          <description>Track hashes we've created for non-string keys.</description>
          <long-description></long-description>
          <tag name="var" line="967" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="67" package="Haldayne">
        <name>__construct</name>
        <full_name>\Haldayne\Boost\Map::__construct()</full_name>
        <docblock line="67">
          <description>Create a new map.</description>
          <long-description>Initialize the map with the given collection, which can be any type
that is "collection-like": array, object, Traversable, another Map,
etc.</long-description>
          <tag name="param" line="67" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="throws" line="67" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="api" line="67" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default>null</default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="96" package="Haldayne">
        <name>all</name>
        <full_name>\Haldayne\Boost\Map::all()</full_name>
        <docblock line="96">
          <description>Create a new map containing all members from this map whose elements
satisfy the expression.</description>
          <long-description>The expression decides whether an element is in or out. If the
expression returns boolean false, the element is out.  Otherwise, it's
in.

```
$nums = new Map(range(0, 9));
$even = $nums-&gt;all(function ($val, $key) { return 0 == $val % 2; });
$odds = $nums-&gt;all('$_0 &amp; 1');
```</long-description>
          <tag name="param" line="96" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="96" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="96" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="117" package="Haldayne">
        <name>filter</name>
        <full_name>\Haldayne\Boost\Map::filter()</full_name>
        <docblock line="117">
          <description>Apply the filter to every element, creating a new map with only those
elements from the original map that do not fail this filter.</description>
          <long-description>The filter expressions receives two arguments:
  - The current value
  - The current key

If the filter returns exactly boolean false, the element is not copied
into the new map.  Otherwise, it is.  Keys from the original map carry
into the new map.</long-description>
          <tag name="param" line="117" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="117" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="117" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="148" package="Haldayne">
        <name>first</name>
        <full_name>\Haldayne\Boost\Map::first()</full_name>
        <docblock line="148">
          <description>Return a new map containing the first N elements passing the
expression.</description>
          <long-description>Like `find`, but stop after finding N elements from the front. Defaults
to N = 1.

```
$nums = new Map(range(0, 9));
$odd3 = $nums-&gt;first('1 == ($_0 % 2)', 3); // first three odds
```</long-description>
          <tag name="param" line="148" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="148" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="148" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="148" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="172" package="Haldayne">
        <name>last</name>
        <full_name>\Haldayne\Boost\Map::last()</full_name>
        <docblock line="172">
          <description>Return a new map containing the last N elements passing the expression.</description>
          <long-description>Like `first`, but stop after finding N elements from the *end*.
Defaults to N = 1.

```
$nums = new Map(range(0, 9));
$odds = $nums-&gt;last('1 == ($_0 % 2)', 2); // last two odd numbers
```</long-description>
          <tag name="param" line="172" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="172" description="" type="integer" variable="$n">
            <type>integer</type>
          </tag>
          <tag name="return" line="172" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="172" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$n</name>
          <default>1</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="187" package="Haldayne">
        <name>every</name>
        <full_name>\Haldayne\Boost\Map::every()</full_name>
        <docblock line="187">
          <description>Test if every element passes the expression.</description>
          <long-description></long-description>
          <tag name="param" line="187" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="187" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="187" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="199" package="Haldayne">
        <name>some</name>
        <full_name>\Haldayne\Boost\Map::some()</full_name>
        <docblock line="199">
          <description>Test if at least one element passes the expression.</description>
          <long-description></long-description>
          <tag name="param" line="199" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="199" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="199" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="211" package="Haldayne">
        <name>none</name>
        <full_name>\Haldayne\Boost\Map::none()</full_name>
        <docblock line="211">
          <description>Test that no elements pass the expression.</description>
          <long-description></long-description>
          <tag name="param" line="211" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="211" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="211" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="225" package="Haldayne">
        <name>has</name>
        <full_name>\Haldayne\Boost\Map::has()</full_name>
        <docblock line="225">
          <description>Determine if a key exists the map.</description>
          <long-description>This is the object method equivalent of the magic isset($map[$key]);</long-description>
          <tag name="param" line="225" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="225" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="225" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="242" package="Haldayne">
        <name>get</name>
        <full_name>\Haldayne\Boost\Map::get()</full_name>
        <docblock line="242">
          <description>Get the value corresponding to the given key.</description>
          <long-description>If the key does not exist in the map, return the default.

This is the object method equivalent of the magic $map[$key].</long-description>
          <tag name="param" line="242" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="242" description="" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="242" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="242" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="260" package="Haldayne">
        <name>set</name>
        <full_name>\Haldayne\Boost\Map::set()</full_name>
        <docblock line="260">
          <description>Set a key and its corresponding value into the map.</description>
          <long-description>This is the object method equivalent of the magic $map[$key] = 'foo'.</long-description>
          <tag name="param" line="260" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="260" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="260" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="api" line="260" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="275" package="Haldayne">
        <name>forget</name>
        <full_name>\Haldayne\Boost\Map::forget()</full_name>
        <docblock line="275">
          <description>Remove a key and its corresponding value from the map.</description>
          <long-description>This is the object method equivalent of the magic unset($map[$key]);</long-description>
          <tag name="param" line="275" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="275" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="api" line="275" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="287" package="Haldayne">
        <name>isEmpty</name>
        <full_name>\Haldayne\Boost\Map::isEmpty()</full_name>
        <docblock line="287">
          <description>Determine if any key and their values have been set into the map.</description>
          <long-description></long-description>
          <tag name="return" line="287" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="api" line="287" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="305" package="Haldayne">
        <name>diff</name>
        <full_name>\Haldayne\Boost\Map::diff()</full_name>
        <docblock line="305">
          <description>Return a new map containing those keys and values that are not present
in the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose values match will
be removed.  Otherwise, comparison is strict, and elements whose keys
and values match will be removed.</long-description>
          <tag name="param" line="305" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="305" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="305" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="305" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="326" package="Haldayne">
        <name>intersect</name>
        <full_name>\Haldayne\Boost\Map::intersect()</full_name>
        <docblock line="326">
          <description>Return a new map containing those keys and values that are present in
the given collection.</description>
          <long-description>If comparison is loose, then only those elements whose value match will
be included.  Otherise, comparison is strict, and elements whose keys &amp;
values match will be included.</long-description>
          <tag name="param" line="326" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="326" description="" type="\Haldayne\Boost\enum" variable="$comparison">
            <type>\Haldayne\Boost\enum</type>
          </tag>
          <tag name="return" line="326" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="326" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$comparison</name>
          <default>\Haldayne\Boost\Map::LOOSE</default>
          <type>\Haldayne\Boost\enum</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="357" package="Haldayne">
        <name>partition</name>
        <full_name>\Haldayne\Boost\Map::partition()</full_name>
        <docblock line="357">
          <description>Groups elements of this map based on the result of an expression.</description>
          <long-description>Calls the expression for each element in this map. The expression
receives the value and key, respectively.  The expression may return
any value: this value is the grouping key and the element is put into
that group.

```
$nums = new Map(range(0, 9));
$part = $nums-&gt;partition(function ($value, $key) {
   return 0 == $value % 2 ? 'even' : 'odd';
});
var_dump(
    $part['odd']-&gt;count(), // 5
    array_sum($part['even']-&gt;toArray()) // 20
);
```</long-description>
          <tag name="param" line="357" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="357" description="" type="\Haldayne\Boost\MapOfCollections">
            <type>\Haldayne\Boost\MapOfCollections</type>
          </tag>
          <tag name="api" line="357" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="398" package="Haldayne">
        <name>map</name>
        <full_name>\Haldayne\Boost\Map::map()</full_name>
        <docblock line="398">
          <description>Walk the map, applying the expression to every element, transforming
them into a new map.</description>
          <long-description>```
$nums = new Map(range(0, 9));
$doubled = $nums-&gt;map('$_0 * 2');
```

The expression receives two arguments:
  - The current value in `$_0`
  - The current key in `$_1`

The keys in the resulting map will be the same as the keys in the
original map: only the values have (potentially) changed.

Recommended to use this method when you are mapping from one type to
the same type: int to int, string to string, etc. If you are changing
types, use the more powerful `transform` method.</long-description>
          <tag name="param" line="398" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="398" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="api" line="398" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="440" package="Haldayne">
        <name>reduce</name>
        <full_name>\Haldayne\Boost\Map::reduce()</full_name>
        <docblock line="440">
          <description>Walk the map, applying a reducing expression to every element, so as to
reduce the map to a single value.</description>
          <long-description>The `$reducer` expression receives three arguments:
  - The current reduction (`$_0`)
  - The current value (`$_1`)
  - The current key (`$_2`)

The initial value, if given or null if not, is passed as the current
reduction on the first invocation of `$reducer`. The return value from
`$reducer` then becomes the new, current reduced value.

```
$nums = new Map(range(0, 3));
$sum = $nums-&gt;reduce('$_0 + $_1');
// $sum == 6
```

If `$finisher` is a callable or string expression, then it will be
called last, after iterating over all elements. It will be passed
reduced value. The `$finisher` must return the new final value.</long-description>
          <tag name="param" line="440" description="" type="callable|string" variable="$reducer">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="440" description="" type="mixed" variable="$initial">
            <type>mixed</type>
          </tag>
          <tag name="param" line="440" description="" type="callable|string|null" variable="$finisher">
            <type>callable</type>
            <type>string</type>
            <type>null</type>
          </tag>
          <tag name="return" line="440" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="440" description=""/>
          <tag name="see" line="440" description="" link="http://php.net/manual/en/function.array-reduce.php"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$reducer</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$initial</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finisher</name>
          <default>null</default>
          <type>callable|string|null</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="467" package="Haldayne">
        <name>rekey</name>
        <full_name>\Haldayne\Boost\Map::rekey()</full_name>
        <docblock line="467">
          <description>Change the key for every element in the map using an expression to
calculate the new key.</description>
          <long-description>```
$keyed_by_bytecode = new Map(count_chars('war of the worlds', 1));
$keyed_by_letter   = $keyed_by_bytecode-&gt;rekey('chr($_1)');
```</long-description>
          <tag name="param" line="467" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="return" line="467" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
          <tag name="api" line="467" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="497" package="Haldayne">
        <name>merge</name>
        <full_name>\Haldayne\Boost\Map::merge()</full_name>
        <docblock line="497">
          <description>Merge the given collection into this map.</description>
          <long-description>The merger callable decides how to merge the current map's value with
the given collection's value.  The merger callable receives two
arguments:
  - This map's value at the given key
  - The collection's value at the given key

If the current map does not have a value for a key in the collection,
then the default value is assumed.</long-description>
          <tag name="param" line="497" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array" variable="$collection">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="param" line="497" description="" type="callable" variable="$merger">
            <type>callable</type>
          </tag>
          <tag name="param" line="497" description="" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="497" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="api" line="497" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type>\Haldayne\Boost\Map|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|\Haldayne\Boost\Traversable|object|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$merger</name>
          <default></default>
          <type>callable</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="577" package="Haldayne">
        <name>transform</name>
        <full_name>\Haldayne\Boost\Map::transform()</full_name>
        <docblock line="577">
          <description>Flexibly and thoroughly change this map into another map.</description>
          <long-description>```
// transform a word list into a map of word to frequency in the list
use Haldayne\Boost\Map;
$words   = new Map([ 'bear', 'bee', 'goose', 'bee' ]);
$lengths = $words-&gt;transform(
    function (Map $new, $word) {
        if ($new-&gt;has($word)) {
            $new-&gt;set($word, $new-&gt;get($word)+1);
        } else {
            $new-&gt;set($word, 1);
        }
    }
);
```

Sometimes you need to create one map from another using a strategy
that isn't one-to-one. You may need to change keys. You may need to
add multiple elements. You may need to delete elements. You may need
to change from a map to a number.

Whatever the case, the other simpler methods in Map don't quite fit the
problem. What you need, and what this method provides, is a complete
machine to transform this map into something else:

```
// convert a word list into a count of unique letters in those words
use Haldayne\Boost\Map;
$words   = new Map([ 'bear', 'bee', 'goose', 'bee' ]);
$letters = $words-&gt;transform(
    function ($frequencies, $word) {
        foreach (count_chars($word, 1) as $byte =&gt; $frequency) {
            $letter = chr($byte);
            if ($frequencies-&gt;has($letter)) {
                $new-&gt;set($letter, $frequencies-&gt;get($letter)+1);
            } else {
                $new-&gt;set($letter, 1);
            }
        }
    },
    function (Map $original) { return new MapOfIntegers(); },
    function (MapOfIntegers $new) { return $new-&gt;sum(); }
);
```

This method accepts three callables
1. `$creator`, which is called first with the current map, performs any
initialization needed.  The result of this callable will be passed to
all the other callables.  If no creator is given, then use a default
one that returns an empty Map.

2. `$transformer`, which is called for every element in this map and
receives the initialized value, the current value, and the current key
in that order. The transformer should modify the initialized value
appropriately. Often this means adding to a new map zero or more
tranformed values.

3. `$finisher`, which is called last, receives the initialized value
that was modified by the transformer calls. The finisher may transform
that value once more as needed. If no finisher given, then no finishing
step is made.</long-description>
          <tag name="param" line="577" description="" type="callable" variable="$tranformer">
            <type>callable</type>
          </tag>
          <tag name="param" line="577" description="" type="callable|null" variable="$creator">
            <type>callable</type>
            <type>null</type>
          </tag>
          <tag name="param" line="577" description="" type="callable|null" variable="$finisher">
            <type>callable</type>
            <type>null</type>
          </tag>
          <tag name="return" line="577" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="577" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$transformer</name>
          <default></default>
          <type>callable</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$creator</name>
          <default>null</default>
          <type>callable|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finisher</name>
          <default>null</default>
          <type>callable|null</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="613" package="Haldayne">
        <name>into</name>
        <full_name>\Haldayne\Boost\Map::into()</full_name>
        <docblock line="613">
          <description>Put all of this map's elements into the target and return the target.</description>
          <long-description>```
$words = new MapOfStrings([ 'foo', 'bar' ]);
$words-&gt;map('strlen($_0)')-&gt;into(new MapOfInts)-&gt;sum(); // 6
```

Use when you've mapped your elements into a different type, and you
want to fluently perform operations on the new type. In the example,
the sum of the words' lengths was calculated.</long-description>
          <tag name="return" line="613" description="" type="\Haldayne\Boost\$target">
            <type>\Haldayne\Boost\$target</type>
          </tag>
          <tag name="api" line="613" description=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$target</name>
          <default></default>
          <type>\Haldayne\Boost\Map</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="627" package="Haldayne">
        <name>push</name>
        <full_name>\Haldayne\Boost\Map::push()</full_name>
        <docblock line="627">
          <description>Treat the map as a stack and push an element onto its end.</description>
          <long-description></long-description>
          <tag name="return" line="627" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="api" line="627" description=""/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$element</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="639" package="Haldayne">
        <name>pop</name>
        <full_name>\Haldayne\Boost\Map::pop()</full_name>
        <docblock line="639">
          <description>Treat the map as a stack and pop an element off its end.</description>
          <long-description></long-description>
          <tag name="return" line="639" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="api" line="639" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="662" package="Haldayne">
        <name>count</name>
        <full_name>\Haldayne\Boost\Map::count()</full_name>
        <docblock line="662">
          <description>Count the number of items in the map.</description>
          <long-description></long-description>
          <tag name="return" line="662" description="" type="integer">
            <type>integer</type>
          </tag>
          <tag name="api" line="662" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="676" package="Haldayne">
        <name>toArray</name>
        <full_name>\Haldayne\Boost\Map::toArray()</full_name>
        <docblock line="676">
          <description>Copy this map into an array, recursing as necessary to convert
contained collections into arrays.</description>
          <long-description></long-description>
          <tag name="api" line="676" description=""/>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Arrayable::toArray()" refers="\Haldayne\Boost\Contract\Arrayable::toArray()" link="/classes/Haldayne.Boost.Contract.Arrayable.html#method_toArray"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="698" package="Haldayne">
        <name>toJson</name>
        <full_name>\Haldayne\Boost\Map::toJson()</full_name>
        <docblock line="698">
          <description>Return a JSON representation of the object.</description>
          <long-description></long-description>
          <tag name="api" line="698" description=""/>
          <tag name="inherited_from" description="\Haldayne\Boost\Contract\Jsonable::toJson()" refers="\Haldayne\Boost\Contract\Jsonable::toJson()" link="/classes/Haldayne.Boost.Contract.Jsonable.html#method_toJson"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="712" package="Haldayne">
        <name>offsetExists</name>
        <full_name>\Haldayne\Boost\Map::offsetExists()</full_name>
        <docblock line="712">
          <description>Determine if a value exists at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="712" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="712" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="724" package="Haldayne">
        <name>offsetGet</name>
        <full_name>\Haldayne\Boost\Map::offsetGet()</full_name>
        <docblock line="724">
          <description>Get a value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="724" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="724" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="741" package="Haldayne">
        <name>offsetSet</name>
        <full_name>\Haldayne\Boost\Map::offsetSet()</full_name>
        <docblock line="741">
          <description>Set the value at a given key.</description>
          <long-description>If key is null, the value is appended to the array using numeric
indexes, just like native PHP. Unlike native-PHP, $key can be of any
type: boolean, int, float, string, array, object, closure, resource.</long-description>
          <tag name="param" line="741" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="741" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="741" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="768" package="Haldayne">
        <name>offsetUnset</name>
        <full_name>\Haldayne\Boost\Map::offsetUnset()</full_name>
        <docblock line="768">
          <description>Unset the value at a given key.</description>
          <long-description></long-description>
          <tag name="param" line="768" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="768" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Haldayne\Boost" line="782" package="Haldayne">
        <name>getIterator</name>
        <full_name>\Haldayne\Boost\Map::getIterator()</full_name>
        <docblock line="782">
          <description>Get an iterator for a copy of the map.</description>
          <long-description></long-description>
          <tag name="return" line="782" description="" type="\ArrayIterator">
            <type>\ArrayIterator</type>
          </tag>
          <tag name="api" line="782" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="802" package="Haldayne">
        <name>passes</name>
        <full_name>\Haldayne\Boost\Map::passes()</full_name>
        <docblock line="802">
          <description>Decide if the given result is considered "passing" or "failing".</description>
          <long-description>This method provides a definitive reference for what this and all
derived classes consider passing:
  - if the result is strictly false, the result "failed"
  - otherwise, the result "succeeded"</long-description>
          <tag name="param" line="802" description="" type="mixed" variable="$result">
            <type>mixed</type>
          </tag>
          <tag name="return" line="802" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$result</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="813" package="Haldayne">
        <name>is_collection_like</name>
        <full_name>\Haldayne\Boost\Map::is_collection_like()</full_name>
        <docblock line="813">
          <description>Decide if the given value is considered collection-like.</description>
          <long-description></long-description>
          <tag name="param" line="813" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="813" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="843" package="Haldayne">
        <name>collection_to_array</name>
        <full_name>\Haldayne\Boost\Map::collection_to_array()</full_name>
        <docblock line="843">
          <description>Give me a native PHP array, regardless of what kind of collection-like
structure is given.</description>
          <long-description></long-description>
          <tag name="param" line="843" description="" type="\Haldayne\Boost\Map|\Haldayne\Boost\Traversable|\Haldayne\Boost\Contract\Arrayable|\Haldayne\Boost\Contract\Jsonable|object|array" variable="$items">
            <type>\Haldayne\Boost\Map</type>
            <type>\Haldayne\Boost\Traversable</type>
            <type>\Haldayne\Boost\Contract\Arrayable</type>
            <type>\Haldayne\Boost\Contract\Jsonable</type>
            <type>object</type>
            <type>array</type>
          </tag>
          <tag name="return" line="843" description="" type="array|boolean">
            <type>array</type>
            <type>boolean</type>
          </tag>
          <tag name="throws" line="843" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$collection</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="880" package="Haldayne">
        <name>grep</name>
        <full_name>\Haldayne\Boost\Map::grep()</full_name>
        <docblock line="880">
          <description>Finds elements for which the given code passes, optionally limited to a
maximum count.</description>
          <long-description>If limit is null, no limit on number of matches. If limit is positive,
return that many from the front of the array. If limit is negative,
return that many from the end of the array.</long-description>
          <tag name="param" line="880" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="880" description="" type="integer|null" variable="$limit">
            <type>integer</type>
            <type>null</type>
          </tag>
          <tag name="return" line="880" description="static" type="\Haldayne\Boost\new">
            <type>\Haldayne\Boost\new</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$limit</name>
          <default>null</default>
          <type>integer|null</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="925" package="Haldayne">
        <name>walk</name>
        <full_name>\Haldayne\Boost\Map::walk()</full_name>
        <docblock line="925">
          <description>Execute the given code over each element of the map. The code receives
the value by reference and then the key as formal parameters.</description>
          <long-description>The items are walked in the order they exist in the map. If the code
returns boolean false, then the iteration halts. Values can be modified
from within the callback, but not keys.

Example:
```
$map-&gt;each(function (&amp;$value, $key) { $value++; return true; })-&gt;sum();
```</long-description>
          <tag name="param" line="925" description="" type="callable" variable="$code">
            <type>callable</type>
          </tag>
          <tag name="return" line="925" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Haldayne\Boost" line="942" package="Haldayne">
        <name>walk_backward</name>
        <full_name>\Haldayne\Boost\Map::walk_backward()</full_name>
        <docblock line="942">
          <description>Like `walk`, except walk from the end toward the front.</description>
          <long-description></long-description>
          <tag name="param" line="942" description="" type="callable" variable="$code">
            <type>callable</type>
          </tag>
          <tag name="return" line="942" description="" type="\Haldayne\Boost\Map">
            <type>\Haldayne\Boost\Map</type>
          </tag>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>callable</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="977" package="Haldayne">
        <name>key_to_hash</name>
        <full_name>\Haldayne\Boost\Map::key_to_hash()</full_name>
        <docblock line="977">
          <description>Lookup the hash for the given key. If a hash does not yet exist, one is
created.</description>
          <long-description></long-description>
          <tag name="param" line="977" description="" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="977" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="throws" line="977" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="1015" package="Haldayne">
        <name>hash_to_key</name>
        <full_name>\Haldayne\Boost\Map::hash_to_key()</full_name>
        <docblock line="1015">
          <description>Lookup the key for the given hash.</description>
          <long-description></long-description>
          <tag name="param" line="1015" description="" type="string" variable="$hash">
            <type>string</type>
          </tag>
          <tag name="return" line="1015" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$hash</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Haldayne\Boost" line="1035" package="Haldayne">
        <name>call</name>
        <full_name>\Haldayne\Boost\Map::call()</full_name>
        <docblock line="1035">
          <description>Call the expression with the arguments.</description>
          <long-description></long-description>
          <tag name="param" line="1035" description="" type="callable|string" variable="$expression">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="throws" line="1035" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expression</name>
          <default></default>
          <type>callable|string</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="613" code="PPC:ERR-50015">Argument $target is missing from the Docblock of into</error>
      <error line="627" code="PPC:ERR-50015">Argument $element is missing from the Docblock of push</error>
      <error line="698" code="PPC:ERR-50015">Argument $options is missing from the Docblock of toJson</error>
    </parse_markers>
    <source></source>
  </file>
  <package name="Haldayne" full_name="Haldayne"/>
  <package name="global" full_name="global"/>
  <namespace name="Haldayne" full_name="Haldayne">
    <namespace name="Boost" full_name="Haldayne\Boost">
      <namespace name="Contract" full_name="Haldayne\Boost\Contract"/>
    </namespace>
    <namespace name="Customs" full_name="Haldayne\Customs"/>
    <namespace name="Fox" full_name="Haldayne\Fox"/>
  </namespace>
  <deprecated count="0"/>
</project>
